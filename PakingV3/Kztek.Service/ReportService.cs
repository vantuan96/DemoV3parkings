using Kztek.Data.Repository;
using Kztek.Data.Event.Repository;
using Kztek.Data.Event.SqlHelper;
using Kztek.Model.Models;
using Kztek.Service.Admin;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Kztek.Web.Core.Extensions;
using Kztek.Web.Core.Functions;
using Kztek.Model.Models.LockerEvent;
using Kztek.Model.CustomModel;

namespace Kztek.Service
{
    public interface IReportService
    {
        #region iParking
        string GetChildCustomerGroupByparent(string parentId);
        string FindChildByCusGroupParent(string parentId, DataTable _dt);
        DataTable GetReportVehicleAnyTimes(string _fromdate, int pageIndex, int pageSize);
        List<ReportIn> GetReportIn(string KeyWord, bool IsHaveTime, string fromdate, string todate, string CardGroupID, string LaneIDs, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total);
        DataTable GetReportIn_Excel(string KeyWord, bool IsHaveTime, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize);
        DataTable GetReportVehicleInAnyTime(string fromdate, int pageIndex, int pageSize);
        List<ReportIn> GetReportDetailVehicleAnyTimse(string key, string fromdate, List<string> groupVehicleId, List<string> strCG, string cardgroup, int page, int pageSize, ref int totalItem);
        List<ReportIn> GetReportDetailVehicleInAnyTime(string KeyWord, string fromdate, string CardGroupID, List<string> lstVehicleGroupID, string LaneID, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total);
        DataTable GetReportDetailVehicleInAnyTime_Excel(string KeyWord, string fromdate, string CardGroupID, List<string> lstVehicleGroupID, string LaneID, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize);
        List<ReportInOut> GetReportInOut(string KeyWord, List<string> CustomerGroupID, bool IsHaveTime, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize, ref int total);
        List<ReportIn> GetReportIns(string key, bool isHaveTimes, List<string> CustomerGroupId, string userId, string fromdate, string todate, string CardGroupId, string laneId, int pageIndex, int pageSize, ref int total);

        DataTable GetReportInOut_Excel(string KeyWord, List<string> CustomerGroupID, bool IsHaveTime, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize);
        List<ReportDetailMoneyCardMonth> GetReportDetailMoneyCardMonth(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        List<ReportDetailMoneyCardMonth> PrintReportDetailMoneyCardMonth(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        DataTable GetReportDetailMoneyCardMonth_Excel(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize);

        #region trường chinh
        List<ReportDetailMoneyCardMonthTRANSERCO> GetReportDetailMoneyCardMonthTRANSERCO(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        List<ReportDetailMoneyCardMonthTRANSERCO> PrintReportDetailMoneyCardMonthTRANSERCO(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        DataTable PrintReportDetailMoneyCardMonthTRANSERCO_Company(string keyword, List<string> listId, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, ref DataTable dtSumMonth);
        DataTable PrintReportDetailMoneyCardMonthTRANSERCO_Personal(string keyword, List<string> listId, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, ref DataTable dtSumMonth);
        DataTable GetReportDetailMoneyCardMonth_ExcelTRANSERCO(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize);
        #endregion

        List<ReportTotalMoneyCardMonthByCardGroup> GetReportTotalMoneyCardMonthByCardGroup(string _fromdate, string _todate, string CardGroupID);
        DataTable GetReportTotalMoneyCardMonthByCardGroup_Excel(string _fromdate, string _todate, string CardGroupID);
        List<ReportTotalMoneyCardMonthByCardGroup> GetReportTotalMoneyCardMonthByCustomerGroup(string _fromdate, string _todate, List<string> CustomerGroupID, string customerid);
        DataTable GetReportTotalMoneyCardMonthByCustomerGroup_Excel(string _fromdate, string _todate, List<string> CustomerGroupID, string customerid);
        List<ReportTotalMoneyCardMonthByUser> GetReportTotalMoneyCardMonthByUser(string _fromdate, string _todate, string user);
        DataTable GetReportTotalMoneyCardMonthByUser_Excel(string _fromdate, string _todate, string user);
        List<ReportVehicleComeIn> GetReportVehicleComeIn(string KeyWord, List<string> CustomerGroupID, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total);
        DataTable GetReportVehicleComeInExcel(string KeyWord, List<string> CustomerGroupID, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize);

        List<ReportVehicleFreeAll> GetReportVehicleFreeAll(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        List<ReportVehicleFreeAllTRANSERCO> GetReportVehicleFreeAllTRANSERCO(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        List<ReportVehicleFreeAllTRANSERCO> PrintReportVehicleFreeAllTRANSERCO(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, ref int total, ref long totalMoney);
        DataTable GetReportVehicleFreeAll_Excel(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string feename, int pageIndex, int pageSize);
        DataTable GetReportVehicleFreeAllTRANSERCO_Excel(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize);
        List<ReportVehicleFreeAll> GetReportVehicleFreeApart(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, ref long _totalmoneyFree);
        DataTable GetReportVehicleFreeApart_Excel(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize);

        List<ReportDetailMoneyCardDay> GetReportDetailMoneyCardDay(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        //in trường chinh
        List<ReportDetailMoneyCardDay> GetReportDetailMoneyCardDayTRANSERCO(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, ref int total, ref long _totalmoneys);
        DataTable GetReportDetailMoneyCardDayExcel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);

        //trả sau trường trinh

        List<ReportDetailMoneyCardDay> GetReportEventPayLaterTRANSERCO(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        //excel
        DataTable GetReportEventPayLaterTRANSERCOExcel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);
        //in
        List<ReportDetailMoneyCardDay> GetReportEventPayLaterTRANSERCO_Print(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, ref int total, ref long _totalmoneys);

        List<ReportDetailMoneyCardDay2> GetReportDetailMoneyCardDay2(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        DataTable GetReportDetailMoneyCardDay2Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);

        DataTable GetReportTotalMoneyByCardGroupUnion(string CardGroupID, string _fromdate, string _todate);
        List<ReportTotalMoneyByCardGroup> GetReportTotalMoneyByCardGroup(string CardGroupID, string _fromdate, string _todate);
        DataTable GetReportTotalMoneyByCardGroupExcel(string CardGroupID, string _fromdate, string _todate, bool isExcel);
        DataTable GetReportTotalMoneyByLaneUnion(string LaneIDOut, string _fromdate, string _todate);
        DataTable GetReportTotalMoneyByLaneAndLoop(string LaneIDOut, string _fromdate, string _todate);
        List<ReportInOut> GetReportOuts(string key, bool ischeckTime, string fromdt, string todate, List<string> strs, string lane, string user, string CardGroupID, int pageIndex, int pageSize, ref int totalItem);
        List<ReportTotalMoneyByLane> GetReportTotalMoneyByLane(string LaneIDOut, string _fromdate, string _todate);
        DataTable GetReportTotalMoneyByLaneExcel(string LaneIDOut, string _fromdate, string _todate, bool isExcel);
        List<ReportTotalMoneyByUser> GetReportTotalMoneyByUser(string UserIDOut, string _fromdate, string _todate);
        DataTable GetReportTotalMoneyByUserExcel(string UserIDOut, string _fromdate, string _todate, bool isExcel);
        DataTable GetReportTotalMoneyByUserAndLoop(string UserIDOut, string _fromdate, string _todate);
        DataTable GetReportTotalMoneyByUserUnion(string UserIDOut, string _fromdate, string _todate);
        List<ReportCardProcess> ReportCardProcessDetail(string KeyWord, List<string> customerGroupId, string _fromdate, string _todate, string CardGroupID, string Actions, string UserID, int pageIndex, int pageSize, ref int total);
        DataTable ReportCardProcessDetail_Excel(string KeyWord, List<string> customerGroupId, string _fromdate, string _todate, string CardGroupID, string Actions, string UserID, int pageIndex, int pageSize, ref int total);

        DataTable ReportCardProcess(string _fromdate, string _todate, string CardGroupID);

        List<ReportCardExpire> GetReportCardExpired(string KeyWord, string _fromdate, string _todate, string CardGroupID, string CustomerID, int pageIndex, int pageSize, ref int total, string IsAlmostExpired = "0");

        DataTable GetReportCardExpiredExcel(string KeyWord, string _fromdate, string _todate, string CardGroupID, string CustomerID, int pageIndex, int pageSize, string IsAlmostExpired = "0");

        List<ReportCustomerList> GetCustomerList(string KeyWord, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total);
        DataTable GetCustomerList_Excel(string KeyWord, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total);

        List<ReportIn> GetReportVehicleEvent(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, bool IsFilterByTimeIn);
        DataTable GetReportVehicleEvent_Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, bool IsFilterByTimeIn);
        List<string> ReportTotalMoneyByVehicleEvent(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, bool IsFilterByTimeIn);
        DataTable GetTotalMoneysAndVehicleByCardGroup(string _fromdate, string _todate, List<string> lstCardGroupId, string TypeCardGroup, ref long TX_totalIn, ref long NotTX_totalIn, ref long TX_totalOut, ref long NotTX_totalOut, ref long TX_totalmoneys, ref long NotTX_totalmoneys);

        DataTable GetReportTotalMoneyAndVehicleByCardGroup(string CardGroupID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut, ref long _totalmoneys);

        DataTable GetReportTotalByCardGroup(string CardGroupID, string _fromdate, string _todate);

        DataTable GetReportCardDetailByCompartment(string KeyWord, string UserID, string _fromdate, string _todate, string CompartmentID, bool IsFilterByTimeIn, int pageIndex, int pageSize, ref int total);

        DataTable GetReportCardTotalByCompartment(string KeyWord, string UserID, string _fromdate, string _todate, string CompartmentID, bool IsFilterByTimeIn, int pageIndex, int pageSize, ref int total);

        DataTable GetReportPrint(string KeyWord, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total);

        DataTable GetReportVehicleOutByHand(string KeyWord, string UserID, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total);
        List<ReportDetailMoneyCardDay> GetReportDetailMoneyCardDay3(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        List<ReportDetailMoneyCardDay> PrintReportDetailMoneyCardDay3(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        DataTable GetReportDetailMoneyCardDay3_Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);

        DataTable GetReportTotalMoneyByCardGroupCAB2VCT(string CardGroupID, string _fromdate, string _todate);

        DataTable GetMoneyCAB2VCT(string CardGroupID, string _fromdate, string _todate);

        DataTable GetReportTotalVehicleByCardGroup_CAB2VCT20003000(string CardGroupID, string _fromdate, string _todate);

        List<ReportVehicleTooDay> GetReportVehicleTooDay(string KeyWord, string fromdate, string todate, int pageIndex, int pageSize, ref int total);

        DataTable GetReportVehicleTooDay_Excel(string KeyWord, string fromdate, string todate);

        List<ReportInOutByCustomer> GetReportInOutByCustomer(string KeyWord, List<string> CustomerGroupId, string fromdate, string todate, int pageIndex, int pageSize, ref int total);

        DataTable GetReportInOutByCustomer_Excel(string KeyWord, List<string> CustomerGroupId, string fromdate, string todate);

        List<ReportDetailMoneyCardDay> GetReportInternal(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);

        List<ReportDetailMoneyCardDay> GetReportPublic(List<string> lstpublic, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);

        DataTable GetReportPublic_Excel(List<string> lstpublic, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);

        //phụ trội
        List<ReportInOut> GetReportVehicleMoneyByCardMonth(string KeyWord, string UserID, string CardGroupID, string _fromdate, string _todate, string LaneID, int pageIndex, int pageSize, ref int total, ref string _totalmoneys);
        DataTable GetReportVehicleMoneyByCardMonthExcel(string KeyWord, string UserID, string CardGroupID, string _fromdate, string _todate, string LaneID, ref string _totalmoneys);

        List<ReportTotalVehicleMoneyByCardMonth> GetReportTotalSubventionByCardNumber(string KeyWord, List<string> CustomerGroupID, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total, ref string _totalmoneys);

        DataTable GetReportTotalSubventionByCardNumberExcel(string KeyWord, List<string> CustomerGroupID, string _fromdate, string _todate, ref string _totalmoneys);
        #endregion

        #region Access
        List<ReportEvent_Access> GetReportEvent(string KeyWord, string Status, string ControllerID, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total, string cardGroup = "");

        DataTable GetReportEventExcel(string KeyWord, string Status, string ControllerID, string _fromdate, string _todate, string cardGroup = "");
        List<ReportCardExpire_Access> GetReportCardExpire_Access(string KeyWord, string CardGroupID, string CustomerID, List<string> CustomerGroupID, int pageIndex, int pageSize, ref int total, string currentUser = "", string date = "", bool filterTimeAlmost = true);

        DataTable GetReportCardExpireExcel_Access(string KeyWord, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string currentUser = "", string date = "", bool filterTimeAlmost = true);

        List<ReportCustomerExpire_Access> GetReportCustomerExpire_Access(string KeyWord, List<string> CustomerGroupID, int pageIndex, int pageSize, ref int total, string currentUser = "", string date = "", bool filterTimeAlmost = true);

        DataTable GetReportCustomerExpireExcel_Access(string KeyWord, List<string> CustomerGroupID, string currentUser = "", string date = "", bool filterTimeAlmost = true);


        #endregion

        #region Locker
        List<tblLockerEvent_Report> GetReportLockerEvent(string KeyWord, string controllerID, string Type, string CardGroupID, string fromdate, string todate, int pageIndex, int pageSize, ref int total);

        DataTable GetReportLockerEvent_Excel(string KeyWord, string controllerID, string Type, string CardGroupID, string fromdate, string todate, ref int total);
        DataTable GetReportActionHistoryLoker_Excel(string KeyWord, string controllerID, string fromdate, string todate, string actionLooker, string type, ref int total);
        List<ReportLockerProcess> ReportActionHistoryLoker(string KeyWord, string objcontrol, string fromdate, string todate, string actionLooker, string type, int pageIndex, int pageSize, ref int total);
        List<tblLockerAlarmReport> ReportLokerAlarm(string KeyWord, string controllerID, string Type, string CardGroupID, string lockerAlarmCode, string lockerEventCode, string fromdate, string todate, int pageIndex, int pageSize, ref int total);

        DataTable GetReportLokerAlarm_Excel(string KeyWord, string controllerID, string Type, string CardGroupID, string lockerAlarmCode, string lockerEventCode, string fromdate, string todate, int pageIndex, int pageSize, ref int total);
        #endregion

        bool SystemUsingLoop();

        //dùng cho trường chinh, cho miễn phí lượt ngày
        void UpdateFreeMoneyEvent(List<string> list);

        //dùng cho trường chinh, cho tính phí lượt ngày
        void RemoveFreeMoneyEvent(List<string> list);

        //dùng cho trường chinh,trả sau
        void UpdateEventPayLater(List<string> list);
        //dùng cho trường chinh,xóa sự kiện trả sau
        void RemoveEventPayLater(List<string> list);
        //dùng cho trường chinh,ghi chú lý do miễn phí
        void UpdateNoteFree(string Id, string Note);

        #region Biểu đồ
        DataTable GetReportChartInOutByCardGroup(string CardGroupID, string VehicleGroupID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut);

        List<ReportChartInOutByLane> GetReportChartInOutByLane(string LaneID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut);

        List<ReportChartMoneyByLane> GetReportChartMoneyByLane(string LaneID, string VehicleGroupID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut);

        DataTable GetReportChartOutByLane(string VehicleGroupID, string CardgroupID, string LaneID, string _fromdate, string _todate);

        List<ReportChartMoneyByLevel> GetReportMoneyByLevel(string VehicleGroupID, string LaneID, string _fromdate, string _todate);

        DataTable GetReportChartOutByLevel(string VehicleGroupID, string LaneID, string _fromdate, string _todate);

        DataTable GetReportChartOutByTime(string VehicleGroupID, string CardgroupID, string LaneID, string _fromdate, string _todate);
        DataTable GetReportChartMoneyByTime(string VehicleGroupID, string LaneID, string _fromdate, string _todate);

        List<ReportChartInOutByLane> GetReportChartInOutByTime(string LaneID, string _fromdate, string _todate);

        #endregion

        #region BVDK_THANHPHO_VINH

        #region BVDK_ReportTotalMoneyByCardGroup
        DataTable GetBVDK_ReportTotalMoneyByCardGroup(string CardGroupID, string _fromdate, string _todate, ref long _totalmoneys);
        #endregion

        #endregion

        #region FPT
        List<AlarmTurnFPT> GetAlarmExceededTurn_FPT(string KeyWord, string fromdate, string todate, string CardGroupID, string turn, int pageIndex, int pageSize, ref int total);

        DataTable GetAlarmExceededTurn_FPTExcel(string KeyWord, string fromdate, string todate, string CardGroupID, string turn, ref int total);

        List<AlarmNotUseFPT> GetAlarmNotUse_FPT(string KeyWord, List<string> CustomerGroupID, string active, string fromdate, string todate, string CardGroupID, string number, int pageIndex, int pageSize, ref int total);

        DataTable GetAlarmNotUse_FPTExcel(string KeyWord, List<string> CustomerGroupID, string active, string fromdate, string todate, string CardGroupID, string number, ref int total);

        List<ReportChartInOutByLane> FPT_GetChartInOutByTime(string LaneID, string _fromdate, string _todate);
        #endregion

        #region Bạch Mai

        #region So 2(thuế)    
        string GetStringEventIDs(string num, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref double _totalmoneys);

        void InsertEventBachMai(string num, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref double _totalmoneys);

        List<ReportDetailMoneyCardDay> GetReportSoHaiNEW(int pageIndex, int pageSize, ref int total, ref double _totalmoneys);

        DataTable GetReportSoHaiNEWExcel();
        #endregion

        #region số 3(không có nhóm xe đạp)
        List<ReportDetailMoneyCardDay> GetReportS3(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);

        DataTable GetReportS3Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);
        #endregion

        #endregion

        #region Ba Vì
        List<ReportInvoiceBAVI> GetReportInvoiceBavi(string key, string fromdate, string todate, bool IsFilterByTimeIn, string IsSync, int pageIndex, int pageSize, ref int total);

        bool UpdateInvoiceStatus(string eventId, int isSync);
        #endregion

        #region Báo cáo thẻ theo căn hộ

        #region Chi tiết
        List<tblCardCustomViewModel> GetReportDetailCardCompartment(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, bool desc, string columnQuery, ref int total, string ischeckbytime = "0", int pageNumber = 1, int pageSize = 20, string accesslevelids = "", string active = "", bool isfindautocapture = false);
        List<DetailCardDepartmentExcel> GetDetailCardCompartment_Excel(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, bool desc, string columnQuery, string ischeckbytime = "0", string accesslevelids = "", string active = "", bool isfindautocapture = false);
        #endregion

        #region Tổng hợp
        List<TotalCardDepartment> GetReportTotalCardCompartment(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, ref int total, string ischeckbytime = "0", int pageNumber = 1, int pageSize = 20, string active = "");

        List<TotalCardDepartment> GetTotalCardCompartment_Excel(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, ref int total, string ischeckbytime = "0", int pageNumber = 1, int pageSize = 20, string active = "");
        #endregion

        #endregion

        #region Lào Cai
        List<ReportDetailMoneyCardDay_LAOCAI> GetReportDetailMoneyCardDay_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        DataTable GetReportDetailMoneyCardDayExcel_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize);

        List<ReportDetailMoneyCardDay_LAOCAI> Print_GetReportDetailMoneyCardDay_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys);
        #endregion

        #region HOÀNH BỒ
        List<HOANHBO_ReportInOut> HOANHBO_GetReportInOut(string KeyWord, List<string> CustomerGroupID, bool IsFilterByTimeIn, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize, ref int total, ref long totalDVT);

        DataTable HOANHBO_GetReportInOut_Excel(string KeyWord, List<string> CustomerGroupID, bool IsFilterByTimeIn, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize);

        void UpdatePlate(string Id, string Plate);
        #endregion
    }
    public class ReportService : IReportService
    {

        #region Repositories
        IReportRepository _ReportRepository;
        ItblVehicleGroupRepository _tblVehicleGroupRepository;
        ItblCardGroupService _tblCardGroupService;
        ItblLaneService _tblLaneService;
        ItblUserService _tblUserService;
        ItblActiveCardService _tblActiveCardService;
        ItblCustomerGroupService _tblCustomerGroupService;
        ItblCompartmentService _tblCompartmentService;
        ItblControllerService _tblControllerService;
        ItblLockerControllerService _tblLockerControllerService;
        IUserService _UserService;

        private IUser_AuthGroupService _User_AuthGroupService;
        private string AuthCardGroupIds = "";
        public ReportService(IReportRepository _ReportRepository, ItblVehicleGroupRepository _tblVehicleGroupRepository, ItblCardGroupService _tblCardGroupService, ItblLaneService _tblLaneService, ItblUserService _tblUserService, ItblActiveCardService _tblActiveCardService, ItblCustomerGroupService _tblCustomerGroupService, IUserService _UserService, ItblCompartmentService _tblCompartmentService, ItblControllerService _tblControllerService, ItblLockerControllerService _tblLockerControllerService, IUser_AuthGroupService _User_AuthGroupService)
        {
            this._ReportRepository = _ReportRepository;
            this._tblVehicleGroupRepository = _tblVehicleGroupRepository;
            this._tblCardGroupService = _tblCardGroupService;
            this._tblLaneService = _tblLaneService;
            this._tblUserService = _tblUserService;
            this._tblActiveCardService = _tblActiveCardService;
            this._tblCustomerGroupService = _tblCustomerGroupService;
            this._UserService = _UserService;
            this._tblCompartmentService = _tblCompartmentService;
            this._tblControllerService = _tblControllerService;
            this._tblLockerControllerService = _tblLockerControllerService;

            this._User_AuthGroupService = _User_AuthGroupService;

            AuthCardGroupIds = _User_AuthGroupService.GetAuthCardGroupIds();
        }
        #endregion

        #region Common
        public bool SystemUsingLoop()
        {
            try
            {
                DataTable dt = Data.SqlHelper.ExcuteSQL.GetDataSet("select LaneID from tblLane where IsLoop=1 and InActive=0", false).Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    return true;
                }
            }
            catch
            { }
            return false;
        }

        public string GetChildCustomerGroupByparent(string parentId)
        {
            var dtcustomergroup = new DataTable();
            var str = string.Format("('{0}'", parentId);

            if (!string.IsNullOrEmpty(parentId))
            {
                var ctmg = _tblCustomerGroupService.GetAllChildByParentID(parentId);

                if (ctmg != null && ctmg.Any())
                {
                    dtcustomergroup = ctmg.ToDataTableNullable();
                }
            }

            if (dtcustomergroup != null && dtcustomergroup.Rows.Count > 0)
            {
                var parentNote = dtcustomergroup.Select(string.Format("ParentID ='{0}'", parentId));

                if (parentNote.Length > 0)
                {
                    foreach (DataRow dr in parentNote)
                    {

                        str += ",'" + dr["CustomerGroupID"] + "'";
                        var child = dtcustomergroup.Select(string.Format("ParentID ='{0}'", dr["CustomerGroupID"]));
                        if (child.Length > 0)
                        {
                            str += FindChildByCusGroupParent(dr["CustomerGroupID"].ToString(), dtcustomergroup);
                        }
                    }
                }

            }
            return str + ")";
        }

        public string FindChildByCusGroupParent(string parentId, DataTable _dt)
        {
            var str = "";
            var child = _dt.Select(string.Format("ParentID ='{0}'", parentId));
            if (child.Length > 0)
            {
                foreach (DataRow dr in child)
                {
                    str += ",'" + dr["CustomerGroupID"] + "'";
                    var childN = _dt.Select(string.Format("ParentID ='{0}'", dr["CustomerGroupID"]));
                    if (childN.Length > 0)
                    {
                        str += FindChildByCusGroupParent(dr["CustomerGroupID"].ToString(), _dt);
                    }
                }
            }

            return str;
        }

        private void getChildToTable(string parentId, DataTable list, DataTable dtAdd, int lv)
        {
            var lvChild = lv + 1;
            var _parentGroup = list.Select(string.Format("ParentID ='{0}'", parentId));
            foreach (DataRow item in _parentGroup)
            {
                var _chilGroup = list.Select(string.Format("ParentID ='{0}'", item["CustomerGroupID"].ToString()));
                dtAdd.Rows.Add(item["ParentID"].ToString(), item["CustomerGroupID"].ToString(), item["GroupName"].ToString(), item["Moneys"].ToString(), lvChild.ToString(), _chilGroup.Length > 0 ? "1" : "0");
                if (_chilGroup.Length > 0)
                {
                    getChildToTable(item["CustomerGroupID"].ToString(), list, dtAdd, lvChild);
                }
            }
        }

        public DataTable GetCardByCustomerWithGroup(string customerIdList)
        {
            var str = "";
            if (!string.IsNullOrWhiteSpace(customerIdList))
            {
                var arr = customerIdList.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                var count = 0;
                foreach (var item in arr)
                {
                    count++;
                    str += string.Format("'{0}'{1}", item, count != arr.Length ? "," : "");
                }
            }


            var query = new StringBuilder();
            query.AppendLine("select c.CustomerID, c.CardNo, c.CardNumber, c.Plate1, c.Plate2, c.Plate3, ca.CardGroupName,c.IsLock,c.ExpireDate,c.ImportDate from tblCard c  WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCardGroup ca On c.CardGroupID = CONVERT(varchar(255), ca.CardGroupID)");
            if (!string.IsNullOrEmpty(str))
            {
                query.AppendLine(string.Format("where CustomerID IN ({0})", str));
            }


            return Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
        }

        public string GetCardGroup(string CardGroupID)
        {
            if (CardGroupID == "LOOP_D")
                return "Vòng từ-Xe lượt";
            else if (CardGroupID == "LOOP_M")
                return "Vòng từ-Xe tháng";

            DataTable dtCardGroup = Data.SqlHelper.ExcuteSQL.GetDataSet("select CardGroupName, CardGroupID from tblCardGroup order by SortOrder", false).Tables[0];

            var gName = "";
            if (dtCardGroup != null)
            {
                var rRow = dtCardGroup.Select(string.Format("CardGroupID = '{0}'", CardGroupID));
                if (rRow.Any())
                {
                    gName = rRow[0]["CardGroupName"].ToString();
                }
            }
            return gName;
        }

        #endregion

        #region ReportIn
        public List<ReportIn> GetReportIn(string KeyWord, bool IsHaveTime, string fromdate, string todate, string CardGroupID, string LaneIDs, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            //query.AppendLine("inner join MPARKING.dbo.tblCard c on e.CardNumber = c.CardNumber");
            query.AppendLine("where EventCode = '1' and e.[IsDelete] = 0");

            if (IsHaveTime == true)
            {
                query.AppendLine(string.Format("and DateTimeIn >= '{0}' and DateTimeIn <= '{1}'", fromdate, todate));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDs))
            {
                var t = LaneIDs.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM dbo.tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("Union");
                    query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_LOOP' as Id, Plate, '' as CardNo, '' as CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CarType, CustomerName, LaneIDIn, UserIDIn");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '1' and IsDelete = 0");

                    if (IsHaveTime == true)
                    {
                        query.AppendLine(string.Format("and DateTimeIn >= '{0}' and DateTimeIn <= '{1}'", fromdate, todate));
                    }

                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneIDs))
                    {
                        var t = LaneIDs.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }


                    if (CustomerGroupId.Any())
                    {
                        query.AppendLine("AND CustomerGroupID IN (");

                        var count = 0;
                        foreach (var item in CustomerGroupId)
                        {
                            count++;
                            query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                        }

                        query.AppendLine(")");
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--Count
            query.AppendLine("select COUNT(*) as totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT Id");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '1' and e.[IsDelete] = 0");

            if (IsHaveTime == true)
            {
                query.AppendLine(string.Format("and DateTimeIn >= '{0}' and DateTimeIn <= '{1}'", fromdate, todate));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDs))
            {
                var t = LaneIDs.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("Union");
                    query.AppendLine("SELECT Id");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '1' and IsDelete = 0");

                    if (IsHaveTime == true)
                    {
                        query.AppendLine(string.Format("and DateTimeIn >= '{0}' and DateTimeIn <= '{1}'", fromdate, todate));
                    }

                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneIDs))
                    {
                        var t = LaneIDs.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportIn>(list.Tables[0]);
        }
        public DataTable GetReportIn_Excel(string KeyWord, bool IsHaveTime, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY e.DatetimeIn desc) AS STT,");
            query.AppendLine("e.CardNo, e.CardNumber as 'Mã thẻ', e.Plate as 'Biển số', (select convert(varchar(10), e.DateTimeIn, 103) + ' ' + left(convert(varchar(32), e.DateTimeIn, 108), 8)) as 'Thời gian vào', e.CardGroupID as 'Nhóm thẻ', e.CustomerName as 'Khách hàng', e.LaneIDIn as 'Làn vào', e.UserIDIn as 'Giám sát vào','' as 'Ngày hết hạn','' as 'Số ngày còn lại'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT CONVERT(nvarchar(50),Id)+'_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn,'PLATEIN.JPG','OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            query.AppendLine("FROM dbo.tblCardEvent  WITH (NOLOCK)");
            query.AppendLine("where EventCode = '1' and IsDelete = 0");
            if (IsHaveTime == true)
            {
                query.AppendLine(string.Format("and DateTimeIn >= '{0}' and DateTimeIn <= '{1}'", fromdate, todate));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            //var isLoopEvent = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(Id) as TotalRow FROM IPARKINGEVENT.dbo.tblLoopEvent");
            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM dbo.tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("Union");
                    query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_LOOP' as Id, Plate, '' as CardNo, '' as CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CarType, CustomerName, LaneIDIn, UserIDIn");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '1' and IsDelete = 0");

                    if (IsHaveTime == true)
                    {
                        query.AppendLine(string.Format("and DateTimeIn >= '{0}' and DateTimeIn <= '{1}'", fromdate, todate));
                    }

                    //nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];

        }

        #endregion

        #region ReportVehicleInAnyTime + Detail
        public DataTable GetReportVehicleInAnyTime(string _fromdate, int pageIndex, int pageSize)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
            DataTable dt = new DataTable();
            dt.Columns.Add("VehicleGroupName", typeof(string));
            dt.Columns.Add("VehicleGroupID", typeof(string));
            dt.Columns.Add("VehicleCount", typeof(string));


            if (string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:59");
            }
            else
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:59");
            }
            //  string _fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:00"); 

            var queyFirst = new StringBuilder();
            queyFirst.AppendLine("SELECT * FROM(");
            queyFirst.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY SortOrder) AS RowNumber,VehicleGroupID, VehicleType, VehicleGroupName, SortOrder from tblVehicleGroup WHERE Inactive = 0");
            queyFirst.AppendLine(") as a");
            queyFirst.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            queyFirst.AppendLine("SELECT COUNT(*) totalCount FROM tblVehicleGroup WHERE Inactive = 0");
            // var total = 0;
            var _total = 0;
            var dtset = Data.SqlHelper.ExcuteSQL.GetDataSet(queyFirst.ToString(), false);
            DataTable dtvehiclegroup = dtset != null ? dtset.Tables[0] : new DataTable();
            if (dtvehiclegroup != null && dtvehiclegroup.Rows.Count > 0)
            {

                try
                {
                    //Kiểm tra có tồn tại tblCardEventHistory
                    DataTable isExistedEventHistory = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(*) AS RN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tblCardEventHistory'");
                    if (isExistedEventHistory != null && isExistedEventHistory.Rows.Count > 0 && Convert.ToInt32(isExistedEventHistory.Rows[0]["RN"]) > 0)
                    // Truong hop co tblCardEventHistory
                    {
                        foreach (DataRow dr in dtvehiclegroup.Rows)
                        {
                            int _vehicle1 = 0;//in but not out yet
                            int _vehicle2 = 0;//in and out yet

                            var command1 = new StringBuilder();
                            command1.AppendLine("SELECT count(a.Id) FROM (");
                            command1.AppendLine("SELECT Id FROM [dbo].tblCardEvent ce WHERE ce.[EventCode]='1'");
                            command1.AppendLine(string.Format("AND ce.[VehicleGroupID] = '{0}' AND ce.[DateTimeIn] <= '{1}'", dr["VehicleGroupID"].ToString(), _fromdate));
                            command1.AppendLine("Union");
                            command1.AppendLine("SELECT Id FROM [dbo].tblCardEventHistory ceh WHERE ceh.[EventCode]='1'");
                            command1.AppendLine(string.Format("AND ceh.[VehicleGroupID] = '{0}' AND ceh.[DateTimeIn] <= '{1}'", dr["VehicleGroupID"].ToString(), _fromdate));
                            command1.AppendLine(") as a");

                            var tempset = ExcuteSQLEvent.GetDataSet(command1.ToString(), false);
                            DataTable temp = tempset != null ? tempset.Tables[0] : new DataTable();

                            if (temp != null && temp.Rows.Count > 0)
                            {
                                if (temp.Rows[0][0].ToString() != "")
                                    _vehicle1 = int.Parse(temp.Rows[0][0].ToString());
                            }

                            var command2 = new StringBuilder();
                            command2.AppendLine("SELECT count(a.Id) FROM (");
                            command2.AppendLine("SELECT Id FROM [dbo].tblCardEvent ce WHERE ce.[EventCode]='2'");
                            command2.AppendLine(string.Format("AND ce.[VehicleGroupID] = '{0}' AND ce.[DateTimeIn] <= '{1}' AND ce.[DateTimeOut] > '{1}'", dr["VehicleGroupID"].ToString(), _fromdate));
                            command2.AppendLine("Union");
                            command2.AppendLine("SELECT Id FROM [dbo].tblCardEventHistory ceh WHERE ceh.[EventCode]='2'");
                            command2.AppendLine(string.Format("AND ceh.[VehicleGroupID] = '{0}' AND ceh.[DateTimeIn] <= '{1}' AND ceh.[DateTimeOut] > '{1}'", dr["VehicleGroupID"].ToString(), _fromdate));
                            command2.AppendLine(") as a");

                            var tempset2 = ExcuteSQLEvent.GetDataSet(command2.ToString(), false);
                            temp = tempset2 != null ? tempset2.Tables[0] : new DataTable();

                            if (temp != null && temp.Rows.Count > 0)
                            {
                                if (temp.Rows[0][0].ToString() != "")
                                    _vehicle2 = int.Parse(temp.Rows[0][0].ToString());
                            }

                            if (dr["VehicleType"].ToString() == "0")//car
                            {
                                if (SystemUsingLoop() == true)
                                {
                                    temp = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("select count(Id) from tblLoopEvent where EventCode='1'" +
                                        " and DateTimeIn<='" + _fromdate +
                                        "'");
                                    if (temp != null && temp.Rows.Count > 0)
                                    {
                                        if (temp.Rows[0][0].ToString() != "")
                                            _vehicle1 = _vehicle1 + int.Parse(temp.Rows[0][0].ToString());
                                    }

                                    temp = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("select count(Id) from tblLoopEvent where EventCode='2' and IsDelete=0" +
                                      " and DateTimeIn<='" + _fromdate +
                                      "' and DateTimeOut>'" + _fromdate +
                                      "'");
                                    if (temp != null && temp.Rows.Count > 0)
                                    {
                                        if (temp.Rows[0][0].ToString() != "")
                                            _vehicle2 = _vehicle2 + int.Parse(temp.Rows[0][0].ToString());
                                    }
                                }
                            }
                            var totalVehicle = _vehicle1 + _vehicle2;
                            _total += totalVehicle;
                            dt.Rows.Add(dr["VehicleGroupName"].ToString(), dr["VehicleGroupID"].ToString(), totalVehicle != 0 ? totalVehicle.ToString("###,###") : "0");
                        }
                    }
                    else // truong hop khong co tblCardEventHistory
                    {
                        foreach (DataRow dr in dtvehiclegroup.Rows)
                        {
                            int _vehicle1 = 0;//in but not out yet
                            int _vehicle2 = 0;//in and out yet

                            var sbQuery = new StringBuilder();
                            sbQuery.AppendLine("select count(Id) from tblCardEvent where EventCode='1'" +
                                " and VehicleGroupID='" + dr["VehicleGroupID"].ToString() +
                                "' and DateTimeIn<='" + _fromdate +
                                "'");

                            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                            {
                                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;

                                    sbQuery.AppendLine("and CardGroupID IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        sbQuery.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    sbQuery.AppendLine(" )");
                                }
                            }

                            sbQuery.AppendLine("select count(Id) from tblCardEvent where EventCode='2' and IsDelete=0" +
                                " and VehicleGroupID='" + dr["VehicleGroupID"].ToString() +
                                "' and DateTimeIn<='" + _fromdate +
                                "' and DateTimeOut>'" + _fromdate +
                                "'");

                            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                            {
                                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;

                                    sbQuery.AppendLine("and CardGroupID IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        sbQuery.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    sbQuery.AppendLine(" )");
                                }
                            }

                            DataSet dstemp = ExcuteSQLEvent.GetDataSet(sbQuery.ToString(), false);
                            if (dstemp != null && dstemp.Tables.Count > 1)
                            {
                                if (dstemp.Tables[0].Rows[0][0].ToString() != "0")
                                    _vehicle1 = int.Parse(dstemp.Tables[0].Rows[0][0].ToString());

                                if (dstemp.Tables[1].Rows[0][0].ToString() != "0")
                                    _vehicle2 = int.Parse(dstemp.Tables[1].Rows[0][0].ToString());
                                }

                            if (dr["VehicleType"].ToString() == "0")//car
                            {
                                DataTable _dtLoop = /*SqlExQuery<DataTable>.ExcuteQueryRtnEntity("Select * from tblLoopEvent")*/ ExcuteSQLEvent.GetDataSet("Select * from tblLoopEvent", false).Tables[0];
                                if (_dtLoop != null && _dtLoop.Rows.Count > 0)
                                {
                                    if (SystemUsingLoop() == true)
                                    {
                                        sbQuery.Clear();
                                        sbQuery.AppendLine("select count(Id) from tblLoopEvent where EventCode='1'" +
                                            " and DateTimeIn<='" + _fromdate +
                                            "'");

                                        if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                                        {
                                            var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                            if (t.Any())
                                            {
                                                var count = 0;

                                                sbQuery.AppendLine("and CarType IN ( ");

                                                foreach (var item in t)
                                                {
                                                    count++;

                                                    sbQuery.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                                }

                                                sbQuery.AppendLine(" )");
                                            }
                                        }

                                        sbQuery.AppendLine("select count(Id) from tblLoopEvent where EventCode='2' and IsDelete=0" +
                                          " and DateTimeIn<='" + _fromdate +
                                          "' and DateTimeOut>'" + _fromdate +
                                          "'");

                                        if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                                        {
                                            var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                            if (t.Any())
                                            {
                                                var count = 0;

                                                sbQuery.AppendLine("and CarType IN ( ");

                                                foreach (var item in t)
                                                {
                                                    count++;

                                                    sbQuery.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                                }

                                                sbQuery.AppendLine(" )");
                                            }
                                        }

                                        DataSet _dstemp = ExcuteSQLEvent.GetDataSet(sbQuery.ToString(), false);
                                        if (_dstemp != null && _dstemp.Tables.Count > 1)
                                        {
                                            if (_dstemp.Tables[0].Rows[0][0].ToString() != "0")
                                                _vehicle1 = _vehicle1 + int.Parse(_dstemp.Tables[0].Rows[0][0].ToString());

                                            if (_dstemp.Tables[1].Rows[0][0].ToString() != "0")
                                                _vehicle2 = _vehicle2 + int.Parse(_dstemp.Tables[1].Rows[0][0].ToString());
                                        }
                                    }
                                }

                            }
                            var totalVehicle = _vehicle1 + _vehicle2;
                            _total += totalVehicle;
                            dt.Rows.Add(dr["VehicleGroupName"].ToString(), dr["VehicleGroupID"].ToString(), totalVehicle != 0 ? totalVehicle.ToString("###,###") : "0");
                        }
                    }

                    dt.Rows.Add(DictionarySearch["total"], "", _total != 0 ? _total.ToString("###,###") : "0");
                }
                catch (Exception ex)
                {

                }
            }
            return dt;
        }

        public List<ReportIn> GetReportDetailVehicleInAnyTime(string KeyWord, string fromdate, string CardGroupID, List<string> lstVehicleGroupID, string LaneID, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total)
        {

            if (string.IsNullOrEmpty(fromdate))
            {
                fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '1'");

            if (lstVehicleGroupID.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in lstVehicleGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstVehicleGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine(string.Format("and DateTimeIn <= '{0}'", fromdate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            query.AppendLine("Union");

            query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '2' and IsDelete = 0");
            if (lstVehicleGroupID.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in lstVehicleGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstVehicleGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            var isLoopEvent = /*SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent")*/ ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("Union");
                    query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_LOOP' as Id, Plate, '' as CardNo, '' as CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CarType, CustomerName, LaneIDIn, UserIDIn");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '1'");

                    query.AppendLine(string.Format("and DateTimeIn <= '{0}'", fromdate));

                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(LaneID))
                        query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

                    if (!string.IsNullOrWhiteSpace(UserID))
                        query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));

                    query.AppendLine("Union");
                    query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_LOOP' as Id, Plate, '' as CardNo, '' as CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CarType, CustomerName, LaneIDIn, UserIDIn");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '2' and IsDelete = 0");

                    query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));

                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(LaneID))
                        query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

                    if (!string.IsNullOrWhiteSpace(UserID))
                        query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--Count
            query.AppendLine("select COUNT(*) as totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT Id");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '1'");
            if (lstVehicleGroupID.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in lstVehicleGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstVehicleGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            query.AppendLine(string.Format("and DateTimeIn <= '{0}'", fromdate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            query.AppendLine("Union");

            query.AppendLine("SELECT Id");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '2' and IsDelete = 0");
            if (lstVehicleGroupID.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in lstVehicleGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstVehicleGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("Union");
                    query.AppendLine("SELECT Id");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '1'");

                    query.AppendLine(string.Format("and DateTimeIn <= '{0}'", fromdate));

                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(LaneID))
                        query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

                    if (!string.IsNullOrWhiteSpace(UserID))
                        query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));

                    query.AppendLine("Union");
                    query.AppendLine("SELECT Id");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '2' and IsDelete = 0");

                    query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));

                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(LaneID))
                        query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

                    if (!string.IsNullOrWhiteSpace(UserID))
                        query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportIn>(list.Tables[0]);
        }

        public DataTable GetReportDetailVehicleInAnyTime_Excel(string KeyWord, string fromdate, string CardGroupID, List<string> lstVehicleGroupID, string LaneID, string UserID, List<string> CustomerGroupId, int pageIndex, int pageSize)
        {
            if (string.IsNullOrEmpty(fromdate))
            {
                fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //query.AppendLine("");

            //query.AppendLine("SELECT * FROM(");
            //query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) as RowNumber,a.CardNo, a.CardNumber,a.Plate, (select convert(varchar(10), a.DateTimeIn, 103) + ' ' + left(convert(varchar(32), a.DateTimeIn, 108), 8)) as 'Thời gian vào', a.CardGroupID, a.CustomerName, a.LaneIDIn, a.UserIDIn");
            //query.AppendLine("FROM(");

            //query.AppendLine("SELECT CardNo, CardNumber,PlateIn as Plate, DateTimeIn, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            //query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            //query.AppendLine("where EventCode = '1'");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) as STT,a.CardNo, a.CardNumber as 'Mã thẻ',a.Plate as 'Biển số', (select convert(varchar(10), a.DateTimeIn, 103) + ' ' + left(convert(varchar(32), a.DateTimeIn, 108), 8)) as 'Thời gian vào', a.CardGroupID as 'Nhóm thẻ', a.CustomerName as 'Khách hàng', a.LaneIDIn as 'Làn vào', a.UserIDIn as 'Giám sát vào'");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '1'");

            if (lstVehicleGroupID.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in lstVehicleGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstVehicleGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine(string.Format("and DateTimeIn <= '{0}'", fromdate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            query.AppendLine("Union");

            //query.AppendLine("SELECT CardNo, CardNumber,PlateIn as Plate, DateTimeIn, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            //query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            //query.AppendLine("where EventCode = '2' and IsDelete = 0");
            query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '2' and IsDelete = 0");

            if (lstVehicleGroupID.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in lstVehicleGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstVehicleGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("Union");
                    //query.AppendLine("SELECT CardNo, CardNumber,PlateIn as Plate, DateTimeIn, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
                    //query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    //query.AppendLine("where EventCode = '1'");

                    query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_LOOP' as Id, Plate, '' as CardNo, '' as CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CarType, CustomerName, LaneIDIn, UserIDIn");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '1'");

                    query.AppendLine(string.Format("and DateTimeIn <= '{0}'", fromdate));


                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(LaneID))
                        query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

                    if (!string.IsNullOrWhiteSpace(UserID))
                        query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));

                    query.AppendLine("Union");
                    query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_LOOP' as Id, Plate, '' as CardNo, '' as CardNumber, DateTimeIn, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CarType, CustomerName, LaneIDIn, UserIDIn");
                    query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    query.AppendLine("where EventCode = '2' and IsDelete = 0");
                    //query.AppendLine("SELECT CardNo, CardNumber,PlateIn as Plate, DateTimeIn, CardGroupID, CustomerName, LaneIDIn, UserIDIn");
                    //query.AppendLine("FROM dbo.tblLoopEvent  WITH(NOLOCK)");
                    //query.AppendLine("where EventCode = '2' and IsDelete = 0");

                    query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));

                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (CustomerGroupId.Any())
                    //{
                    //    query.AppendLine("AND CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupId)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(LaneID))
                        query.AppendLine(string.Format("and LaneIDIn = '{0}'", LaneID));

                    if (!string.IsNullOrWhiteSpace(UserID))
                        query.AppendLine(string.Format("and UserIDIn = '{0}'", UserID));

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("and Plate LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as a");
            query.AppendLine(") as C1");


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }
        #endregion

        #region ReportInOut
        public List<ReportInOut> GetReportInOut(string KeyWord, List<string> CustomerGroupID, bool IsFilterByTimeIn, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT CONVERT(nvarchar(50), e.[Id]) + '_CARD' as Id, e.[CardNo], e.[CardNumber], CAST(CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[PicDirIn] as PicIn1, REPLACE(e.[PicDirIn], 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, e.[PicDirOut] as PicOut1, REPLACE(e.[PicDirOut], 'PLATEOUT.JPG', 'OVERVIEWOUT.JPG') as PicOut2, e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH(NOLOCK)");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND (e.[LaneIDIn] = '{0}' OR e.[LaneIDOut] = '{0}')", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND (e.[UserIDIn] = '{0}' OR e.[UserIDOut] = '{0}')", UserID));
            //nhóm thẻ theo user đăng nhập
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[LaneIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[UserIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR  REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT CONVERT(nvarchar(50), le.[Id]) + '_LOOP' as Id, '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[PicDirIn] as PicIn1, REPLACE(le.[PicDirIn],'PLATEIN.JPG','OVERVIEWIN.JPG') as PicIn2, le.[PicDirOut] as PicOut1, REPLACE(le.[PicDirOut],'PLATEOUT.JPG','OVERVIEWOUT.JPG') as PicOut2, le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2'");
                    //query.AppendLine(string.Format("AND DateTimeIn>='{0}' and DateTimeIn <= '{1}'", _fromdate, _todate));
                    query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", fromdate, todate)));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND (le.[LaneIDIn] = '{0}' OR le.[LaneIDOut] = '{0}')", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND (le.[UserIDIn] = '{0}' OR le.[UserIDOut] = '{0}')", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;
                            var _count = 0;
                            query.AppendLine("and (le.LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) ");

                            query.AppendLine("OR le.[LaneIDOut] IN (");

                            foreach (var item in t)
                            {
                                _count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;
                            var _count = 0;
                            query.AppendLine("and (le.UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) ");

                            query.AppendLine("OR le.[UserIDOut] IN (");

                            foreach (var item in t)
                            {
                                _count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) )");
                        }
                    }

                    ////Nhom KH
                    //if (CustomerGroupID.Any())
                    //{
                    //    query.AppendLine("AND le.CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupID)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as TEMP");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--Count Total
            query.AppendLine("SELECT COUNT(Id) as totalCount");
            query.AppendLine("FROM ( SELECT Id FROM dbo.[tblCardEvent]");
            query.AppendLine("e WITH(NOLOCK)");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

            // query.AppendLine(string.Format("WHERE e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}'  AND e.[IsDelete] = 0 and e.[EventCode] = '2'", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND (e.[LaneIDIn] = '{0}' OR e.[LaneIDOut] = '{0}')", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND (e.[UserIDIn] = '{0}' OR e.[UserIDOut] = '{0}')", UserID));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[LaneIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[UserIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT Id");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2'");
                    //query.AppendLine(string.Format("AND DateTimeIn>='{0}' and DateTimeIn <= '{1}'", _fromdate, _todate));
                    query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", fromdate, todate)));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND (le.[LaneIDIn] = '{0}' OR le.[LaneIDOut] = '{0}')", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND (le.[UserIDIn] = '{0}' OR le.[UserIDOut] = '{0}')", UserID));
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;
                            var _count = 0;
                            query.AppendLine("and (le.LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) ");

                            query.AppendLine("OR le.[LaneIDOut] IN (");

                            foreach (var item in t)
                            {
                                _count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;
                            var _count = 0;
                            query.AppendLine("and (le.UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) ");

                            query.AppendLine("OR le.[UserIDOut] IN (");

                            foreach (var item in t)
                            {
                                _count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" ) )");
                        }
                    }

                    ////Nhom KH
                    //if (CustomerGroupID.Any())
                    //{
                    //    query.AppendLine("AND le.CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupID)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportInOut>(list.Tables[0]);
        }
        public DataTable GetReportInOut_Excel(string KeyWord, List<string> CustomerGroupID, bool IsFilterByTimeIn, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            var dtrtn = new DataTable();
            try
            {
                //query.AppendLine("SELECT * FROM(");
                query.AppendLine(string.Format("select ROW_NUMBER() OVER(ORDER BY {0} desc) AS STT,", IsFilterByTimeIn ? "a.[DatetimeIn]" : "a.[DatetimeOut]"));
                query.AppendLine("a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DateTimeIn, 103) + ' ' + left(convert(varchar(32), a.DateTimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền'");
                query.AppendLine("FROM(");

                query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys]");
                query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
                query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
                query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

                //if (!string.IsNullOrWhiteSpace(CardGroupID))
                //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
                //if (!string.IsNullOrWhiteSpace(LaneID))
                //    query.AppendLine(string.Format("AND e.[LaneIDIn] = '{0}' OR e.[LaneIDOut] = '{0}'", LaneID));
                //if (!string.IsNullOrWhiteSpace(UserID))
                //    query.AppendLine(string.Format("AND e.[UserIDIn] = '{0}' OR e.[UserIDOut] = '{0}'", UserID));
                //nhóm thẻ theo user đăng nhập
                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and e.CardGroupID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                //Nhom the
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                {
                    var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and e.CardGroupID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                //Lan
                if (!string.IsNullOrWhiteSpace(LaneID))
                {
                    var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;
                        var _count = 0;
                        query.AppendLine("and (e.LaneIDIn IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) ");

                        query.AppendLine("OR e.[LaneIDOut] IN (");

                        foreach (var item in t)
                        {
                            _count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) )");
                    }
                }

                //User
                if (!string.IsNullOrWhiteSpace(UserID))
                {
                    var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;
                        var _count = 0;
                        query.AppendLine("and (e.UserIDIn IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) ");

                        query.AppendLine("OR e.[UserIDOut] IN (");

                        foreach (var item in t)
                        {
                            _count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) )");
                    }
                }

                //Nhom KH
                if (CustomerGroupID.Any())
                {
                    query.AppendLine("AND e.CustomerGroupID IN (");

                    var count = 0;
                    foreach (var item in CustomerGroupID)
                    {
                        count++;
                        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    }

                    query.AppendLine(")");
                }

                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

                var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
                if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
                {
                    if (isLoopEvent != null)
                    {
                        if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                        {
                            query.AppendLine("UNION");
                            query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys]");
                            query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                            query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2'");
                            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate)));
                            //if (!string.IsNullOrWhiteSpace(CardGroupID))
                            //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                            //if (!string.IsNullOrWhiteSpace(LaneID))
                            //    query.AppendLine(string.Format("AND le.[LaneIDIn] = '{0}' OR le.[LaneIDOut] = '{0}'", LaneID));
                            //if (!string.IsNullOrWhiteSpace(UserID))
                            //    query.AppendLine(string.Format("AND le.[UserIDIn] = '{0}' OR le.[UserIDOut] = '{0}'", UserID));
                            if (!string.IsNullOrWhiteSpace(CardGroupID))
                            {
                                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;

                                    query.AppendLine("and le.[CarType] IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" )");
                                }
                            }
                            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                            {
                                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;

                                    query.AppendLine("and le.[CarType] IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" )");
                                }
                            }

                            //Lan
                            if (!string.IsNullOrWhiteSpace(LaneID))
                            {
                                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;
                                    var _count = 0;
                                    query.AppendLine("and (le.LaneIDIn IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" ) ");

                                    query.AppendLine("OR le.[LaneIDOut] IN (");

                                    foreach (var item in t)
                                    {
                                        _count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" ) )");
                                }
                            }

                            //User
                            if (!string.IsNullOrWhiteSpace(UserID))
                            {
                                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;
                                    var _count = 0;
                                    query.AppendLine("and (le.UserIDIn IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" ) ");

                                    query.AppendLine("OR le.[UserIDOut] IN (");

                                    foreach (var item in t)
                                    {
                                        _count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" ) )");
                                }
                            }

                            ////Nhom KH
                            //if (CustomerGroupID.Any())
                            //{
                            //    query.AppendLine("AND le.CustomerGroupID IN (");

                            //    var count = 0;
                            //    foreach (var item in CustomerGroupID)
                            //    {
                            //        count++;
                            //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                            //    }

                            //    query.AppendLine(")");
                            //}

                            if (!string.IsNullOrWhiteSpace(KeyWord))
                                query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                        }
                    }
                }
                query.AppendLine(") as a");

                dtrtn = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            }
            catch (Exception ex)
            {
            }
            //query.AppendLine(") as TEMP");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));
            return dtrtn;
        }
        #endregion

        #region ReportVehicleComeIn
        public List<ReportVehicleComeIn> GetReportVehicleComeIn(string KeyWord, List<string> CustomerGroupID, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) AS RowNumber,");
            query.AppendLine("a.[CardNo], a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[PicIn1], a.[PicIn2], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[UserIDIn]");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[PicDirIn] as PicIn1, REPLACE(e.[PicDirIn],'PLATEIN.JPG','OVERVIEWIN.JPG') as PicIn2, e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[UserIDIn]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate));
            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDIn] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDIn] = '{0}'", UserID));

            //nhóm thẻ theo user đăng nhập
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("and e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[PicDirIn] as PicIn1, REPLACE(le.[PicDirIn],'PLATEIN.JPG','OVERVIEWIN.JPG') as PicIn2, le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[UserIDIn]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0");
                    query.AppendLine(string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDIn] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDIn] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    ////Nhom KH
                    //if (CustomerGroupID.Any())
                    //{
                    //    query.AppendLine("and le.CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupID)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount FROM(");
            query.AppendLine("SELECT e.Id");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("and e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.Id");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0");
                    query.AppendLine(string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    ////Nhom KH
                    //if (CustomerGroupID.Any())
                    //{
                    //    query.AppendLine("and le.CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupID)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportVehicleComeIn>(list.Tables[0]);
        }
        public DataTable GetReportVehicleComeInExcel(string KeyWord, List<string> CustomerGroupID, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) AS STT,");
            query.AppendLine("a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Kháng hàng', a.[LaneIDIn] AS 'Làn vào', a.[UserIDIn] AS 'Giám sát vào'");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[UserIDIn]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

            query.AppendLine("WHERE e.[IsDelete] = 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate));

            //nhóm thẻ theo user đăng nhập
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("and e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    //tblLoopEvent
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DateTimeIn], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[UserIDIn]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0");
                    query.AppendLine(string.Format("AND le.[DatetimeIn] >= '{0}' AND le.[DatetimeIn] <= '{1}' ", fromdate, todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }


                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDIn IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    ////Nhom KH
                    //if (CustomerGroupID.Any())
                    //{
                    //    query.AppendLine("and le.CustomerGroupID IN (");

                    //    var count = 0;
                    //    foreach (var item in CustomerGroupID)
                    //    {
                    //        count++;
                    //        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    //    }

                    //    query.AppendLine(")");
                    //}

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            //query.AppendLine(") as C1");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #region ReportDetailMoneyCardDay
        public List<ReportDetailMoneyCardDay> GetReportDetailMoneyCardDay(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));

                    //// nhóm thẻ theo User
                    //if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    //{
                    //    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    //    if (t.Any())
                    //    {
                    //        var count = 0;

                    //        query.AppendLine("and e.CardGroupID IN ( ");

                    //        foreach (var item in t)
                    //        {
                    //            count++;

                    //            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    //        }

                    //        query.AppendLine(" )");
                    //    }
                    //}
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }
        public DataTable GetReportDetailMoneyCardDayExcel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian'");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian'");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }

        public List<ReportDetailMoneyCardDay2> GetReportDetailMoneyCardDay2(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a. *");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id], pi.[PrintIndex], pi.[Para1], pi.[Para2]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblPrintIndex] pi on pi.[EventID] = e.[Id]");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] = '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isExistedEventHistory = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(*) AS RN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tblCardEventHistory'");
            if (Convert.ToInt32(isExistedEventHistory.Rows[0]["RN"]) > 0)
            {
                query.AppendLine("UNION");
                //tblCardEventHistory
                query.AppendLine("SELECT eh.[CardNo], eh.[CardNumber], CAST( CASE WHEN eh.[PlateIn] <> '' THEN eh.[PlateIn] ELSE eh.[PlateOut] END AS nvarchar(50)) as Plate, eh.[DatetimeIn], eh.[DatetimeOut], eh.[CardGroupID], eh.[CustomerName], eh.[LaneIDIn], eh.[LaneIDOut], eh.[UserIDIn], eh.[UserIDOut], eh.[Moneys], '' AS TotalTimes, eh.[Id], pi.[PrintIndex], pi.[Para1], pi.[Para2]");

                query.AppendLine("FROM dbo.[tblCardEventHistory] eh WITH (NOLOCK)");
                query.AppendLine("LEFT JOIN dbo.[tblPrintIndex] pi on pi.[EventID] = eh.[Id]");

                query.AppendLine("WHERE eh.[IsDelete] = 0 and eh.[EventCode] = '2' AND eh.[IsFree] = 0 AND eh.[Moneys] > 0");
                query.AppendLine(string.Format("AND eh.[DatetimeOut] >= '{0}' AND eh.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                    query.AppendLine(string.Format("AND eh.[CardGroupID] = '{0}'", CardGroupID));
                if (!string.IsNullOrWhiteSpace(LaneID))
                    query.AppendLine(string.Format("AND eh.[LaneIDOut] = '{0}'", LaneID));
                if (!string.IsNullOrWhiteSpace(UserID))
                    query.AppendLine(string.Format("AND eh.[UserIDOut] = '{0}'", UserID));
                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND (eh.[CardNumber] LIKE '%{0}%' OR eh.[CardNo] LIKE '%{0}%' OR eh.[PlateIn] LIKE '%{0}%' OR eh.[PlateOut] LIKE '%{0}%')", KeyWord));
            }
            var isLoopEvent = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent");
            if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
            {
                query.AppendLine("UNION");
                query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id], '' AS [PrintIndex], '' AS [Para1], '' AS [Para2]");
                query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                    query.AppendLine(string.Format("AND le.[CardGroupID] = '{0}'", CardGroupID));
                if (!string.IsNullOrWhiteSpace(LaneID))
                    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                if (!string.IsNullOrWhiteSpace(UserID))
                    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));


            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.[Moneys]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblPrintIndex] pi on pi.[EventID] = e.[Id]");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));
            if (Convert.ToInt32(isExistedEventHistory.Rows[0]["RN"]) > 0)
            {
                query.AppendLine("UNION");
                query.AppendLine("SELECT eh.[Id], eh.[Moneys]");
                query.AppendLine("FROM dbo.[tblCardEventHistory] eh WITH (NOLOCK)");
                query.AppendLine("LEFT JOIN dbo.[tblPrintIndex] pi on pi.[EventID] = eh.[Id]");
                query.AppendLine("WHERE eh.[IsDelete] = 0 and eh.[EventCode] = '2' AND eh.[IsFree] = 0 AND eh.[Moneys] > 0");
                query.AppendLine(string.Format("AND eh.[DatetimeOut] >= '{0}' AND eh.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                    query.AppendLine(string.Format("AND eh.[CardGroupID] = '{0}'", CardGroupID));
                if (!string.IsNullOrWhiteSpace(LaneID))
                    query.AppendLine(string.Format("AND eh.[LaneIDOut] = '{0}'", LaneID));
                if (!string.IsNullOrWhiteSpace(UserID))
                    query.AppendLine(string.Format("AND eh.[UserIDOut] = '{0}'", UserID));
                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND (eh.[CardNumber] LIKE '%{0}%' OR eh.[CardNo] LIKE '%{0}%' OR eh.[PlateIn] LIKE '%{0}%' OR eh.[PlateOut] LIKE '%{0}%')", KeyWord));
            }
            if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
            {
                query.AppendLine("UNION");
                query.AppendLine("SELECT [Id], [Moneys]");
                query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                    query.AppendLine(string.Format("AND le.[CardGroupID] = '{0}'", CardGroupID));
                if (!string.IsNullOrWhiteSpace(LaneID))
                    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                if (!string.IsNullOrWhiteSpace(UserID))
                    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
            }
            query.AppendLine(") as a");
            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay2>(list.Tables[0]);

        }
        public DataTable GetReportDetailMoneyCardDay2Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        {
            var query = new StringBuilder();
            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.[DatetimeIn], 103) + ' ' + left(convert(varchar(32), a.[DatetimeIn], 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.[DatetimeOut], 103) + ' ' + left(convert(varchar(32), a.[DatetimeOut], 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian', a.[PrintIndex] AS 'Số HĐ', a.[Para1] AS 'Mẫu số', a.[Para2] AS 'KH'");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian', pri.[PrintIndex], pri.[Para1], pri.[Para2]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblPrintIndex] pri on pri.[EventID] = e.[Id]");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            if (!string.IsNullOrWhiteSpace(LaneID))
                query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            DataTable isExistedEventHistory = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(*) AS RN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tblCardEventHistory'");
            if (Convert.ToInt32(isExistedEventHistory.Rows[0]["RN"]) > 0)
            {
                query.AppendLine("UNION");
                query.AppendLine("SELECT eh.[CardNo], eh.[CardNumber], CAST( CASE WHEN eh.[PlateIn] <> '' THEN eh.[PlateIn] ELSE eh.[PlateOut] END AS nvarchar(50)) as Plate, eh.[DatetimeIn], eh.[DatetimeOut], eh.[CardGroupID], eh.[CustomerName], eh.[LaneIDIn], eh.[LaneIDOut], eh.[UserIDIn], eh.[UserIDOut], eh.[Moneys], '' AS 'Tổng thời gian', pi.[PrintIndex], pi.[Para1], pi.[Para2]");
                query.AppendLine("FROM dbo.[tblCardEventHistory] eh WITH (NOLOCK)");
                query.AppendLine("LEFT JOIN dbo.[tblPrintIndex] pi on pi.[EventID] = eh.[Id]");
                query.AppendLine("WHERE eh.[IsDelete] = 0 and eh.[EventCode] = '2' AND eh.[IsFree] = 0 AND eh.[Moneys] > 0");
                query.AppendLine(string.Format("AND eh.[DatetimeOut] >= '{0}' AND eh.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                    query.AppendLine(string.Format("AND eh.[CardGroupID] = '{0}'", CardGroupID));
                if (!string.IsNullOrWhiteSpace(LaneID))
                    query.AppendLine(string.Format("AND eh.[LaneIDOut] = '{0}'", LaneID));
                if (!string.IsNullOrWhiteSpace(UserID))
                    query.AppendLine(string.Format("AND eh.[UserIDOut] = '{0}'", UserID));
                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND (eh.[CardNumber] LIKE '%{0}%' OR eh.[CardNo] LIKE '%{0}%' OR eh.[PlateIn] LIKE '%{0}%' OR eh.[PlateOut] LIKE '%{0}%')", KeyWord));
            }
            var isLoopEvent = SqlExQuery<DataTable>.ExcuteQueryRtnEntity("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent");
            if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
            {
                query.AppendLine("UNION");
                query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian', '' AS [PrintIndex], '' AS [Para1], '' AS [Para2]");
                query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                    query.AppendLine(string.Format("AND le.[CardGroupID] = '{0}'", CardGroupID));
                if (!string.IsNullOrWhiteSpace(LaneID))
                    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                if (!string.IsNullOrWhiteSpace(UserID))
                    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }

        //in trường chinh
        public List<ReportDetailMoneyCardDay> GetReportDetailMoneyCardDayTRANSERCO(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");


            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }

        //trả sau trường chinh     
        public List<ReportDetailMoneyCardDay> GetReportEventPayLaterTRANSERCO(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], (Select Moneys From tblEventPayLater p Where p.EventId = CONVERT(nvarchar(50), e.Id)) as Moneys, '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Id] IN (Select EventId From tblEventPayLater)");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], (Select Moneys From tblEventPayLater p Where p.EventId = CONVERT(nvarchar(50), e.Id)) as Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Id] IN (Select EventId From tblEventPayLater)");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }

        //trả sau excel
        public DataTable GetReportEventPayLaterTRANSERCOExcel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], (Select Moneys From tblEventPayLater p Where p.EventId = CONVERT(nvarchar(50), e.Id)) as Moneys, '' AS 'Tổng thời gian'");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Id] IN (Select EventId From tblEventPayLater)");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian'");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }

        //in trả sau
        public List<ReportDetailMoneyCardDay> GetReportEventPayLaterTRANSERCO_Print(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], (Select Moneys From tblEventPayLater p Where p.EventId = CONVERT(nvarchar(50), e.Id)) as Moneys, '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Id] IN (Select EventId From tblEventPayLater)");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");


            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], (Select Moneys From tblEventPayLater p Where p.EventId = CONVERT(nvarchar(50), e.Id)) as Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Id] IN (Select EventId From tblEventPayLater)");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }

        public void UpdateFreeMoneyEvent(List<string> list)
        {
            if (list != null && list.Count > 0)
            {
                var count = 0;

                var query = new StringBuilder();
                query.AppendLine("UPDATE tblCardEvent");
                query.AppendLine("Set IsFree = 'True'");
                query.AppendLine("WHERE Id In ( ");

                foreach (var item in list)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == list.Count ? "" : ","));
                }

                query.AppendLine(" )");

                foreach (var item in list)
                {

                    query.AppendLine(string.Format("Insert NoteFreeTRANSERCO(Id,Note) Values('{0}','')", item));
                }

                ExcuteSQLEvent.Execute(query.ToString());
            }

        }

        public void UpdateEventPayLater(List<string> list)
        {
            if (list != null && list.Count > 0)
            {
                var count = 0;
                var count1 = 0;
                var query = new StringBuilder();
                query.AppendLine("Insert into tblEventPayLater(Id,EventId,Moneys)");
                query.AppendLine("Select NEWID(), Id, Moneys From tblCardEvent e");
                query.AppendLine("WHERE NOT EXISTS (SELECT * FROM tblEventPayLater p WHERE p.EventId = CONVERT(nvarchar(50), e.Id))");
                query.AppendLine("AND e.Id In ( ");

                foreach (var item in list)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == list.Count ? "" : ","));
                }

                query.AppendLine(" )");

                query.AppendLine("UPDATE tblCardEvent");
                query.AppendLine("Set Moneys = '0'");
                query.AppendLine("WHERE Id In ( ");

                foreach (var item in list)
                {
                    count1++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count1 == list.Count ? "" : ","));
                }
                query.AppendLine(" )");

                ExcuteSQLEvent.Execute(query.ToString());
            }

        }

        public void RemoveEventPayLater(List<string> list)
        {
            if (list != null && list.Count > 0)
            {
                var count = 0;
                var count1 = 0;
                var query = new StringBuilder();
                query.AppendLine("update tblCardEvent");
                query.AppendLine("Set Moneys = v.Moneys");
                query.AppendLine("From tblCardEvent e");
                query.AppendLine("Left join tblEventPayLater v On v.EventId = CONVERT(nvarchar(50), e.Id)");
                query.AppendLine("Where e.Id In ( ");

                foreach (var item in list)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == list.Count ? "" : ","));
                }

                query.AppendLine(" )");

                query.AppendLine("Delete tblEventPayLater");
                query.AppendLine("WHERE EventId In ( ");

                foreach (var item in list)
                {
                    count1++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count1 == list.Count ? "" : ","));
                }
                query.AppendLine(" )");

                ExcuteSQLEvent.Execute(query.ToString());
            }

        }
        #endregion

        #region ReportTotalMoneyByCardGroup
        public List<ReportTotalMoneyByCardGroup> GetReportTotalMoneyByCardGroup(string CardGroupID, string _fromdate, string _todate)
        {
            var dt = GetReportTotalMoneyByCardGroupExcel(CardGroupID, _fromdate, _todate);

            return dt.DataTableToList<ReportTotalMoneyByCardGroup>();
        }
        public DataTable GetReportTotalMoneyByCardGroupExcel(string CardGroupID, string _fromdate, string _todate, bool isExcel = false)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var sb = new StringBuilder();

            sb.AppendLine("select CardGroupName, CardGroupID from tblCardGroup WITH(NOLOCK) where Inactive = 'False' ");


            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("and CONVERT(varchar(50),CardGroupID) IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("and CONVERT(varchar(50),CardGroupID) IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }
            sb.AppendLine("order by SortOrder");

            var dtcardgroup = Data.SqlHelper.ExcuteSQL.GetDataSet(sb.ToString(), false).Tables[0];

            DataTable dt = new DataTable();
            dt.Columns.Add("RowNumber", typeof(string));
            if (!isExcel) dt.Columns.Add("CardGroupID", typeof(string));
            dt.Columns.Add("CardGroupName", typeof(string));
            dt.Columns.Add("Count", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            int dtCount = 0;
            long totalMoney = 0;
            int totalcount = 0;

            for (int i = 0; i < dtcardgroup.Rows.Count; i++)
            {
                var _CardGroupID = dtcardgroup.Rows[i]["CardGroupID"].ToString();

                var query = new StringBuilder();
                query.AppendLine("SELECT Count(ce.Id) as TotalCount, SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
                query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
                query.AppendLine(string.Format("AND ce.[CardGroupID] = '{0}'", _CardGroupID));

                var dataTable = ExcuteSQLEvent.GetDataSet(query.ToString()).Tables[0];
                string money = dataTable.Rows[0]["TotalMoney"].ToString();
                string count = dataTable.Rows[0]["TotalCount"].ToString();
                if (string.IsNullOrWhiteSpace(money)) continue;

                dtCount++;

                var newrow = dt.NewRow();
                newrow["RowNumber"] = dtCount.ToString();
                if (!isExcel) newrow["CardGroupID"] = dtcardgroup.Rows[i]["CardGroupID"];
                newrow["CardGroupName"] = dtcardgroup.Rows[i]["CardGroupName"];
                newrow["Moneys"] = string.IsNullOrWhiteSpace(money) ? "0" : money;
                newrow["Count"] = string.IsNullOrWhiteSpace(count) ? "0" : count;
                dt.Rows.Add(newrow);

                long _money = 0;

                long.TryParse(newrow["Moneys"].ToString(), out _money);

                totalMoney += _money;
                totalcount += !string.IsNullOrEmpty(newrow["Count"].ToString()) ? Convert.ToInt32(newrow["Count"].ToString()) : 0;
            }

            if (SystemUsingLoop() == true)
            {
                if (CardGroupID == "" || CardGroupID.Contains("LOOP_D") || CardGroupID.Contains("LOOP_M"))
                {

                    string[] cartypes = new string[] { "LOOP_D", "LOOP_M" };
                    for (int i = 0; i < cartypes.Length; i++)
                    {
                        dtCount++;
                        if (CardGroupID != "" && !CardGroupID.Contains(cartypes[i]))
                            continue;
                        long _moneys = 0;
                        var query = new StringBuilder();
                        query.AppendLine("select Count(Id) as TotalCount, sum(Moneys) AS TotalMoney from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0" +
                            " and DateTimeOut>='" + _fromdate +
                            "' and DateTimeOut<='" + _todate +
                            "' and CarType LIKE '%" + cartypes[i] + "%'");

                        if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                        {
                            var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                            if (t.Any())
                            {
                                var count = 0;

                                sb.AppendLine("AND CarType IN ( ");

                                foreach (var item in t)
                                {
                                    count++;

                                    sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                }

                                sb.AppendLine(" )");
                            }
                        }

                        //Nhom the
                        if (!string.IsNullOrWhiteSpace(CardGroupID))
                        {
                            var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                            if (t.Any())
                            {
                                var count = 0;

                                sb.AppendLine("AND CarType IN ( ");

                                foreach (var item in t)
                                {
                                    count++;

                                    sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                }

                                sb.AppendLine(" )");
                            }
                        }


                        DataTable temp = ExcuteSQLEvent.GetDataSet(query.ToString()).Tables[0];
                        if (temp != null && temp.Rows.Count > 0)
                        {
                            string money = temp.Rows[0]["TotalMoney"].ToString();
                            string count = temp.Rows[0]["TotalCount"].ToString();
                            if (string.IsNullOrWhiteSpace(money)) continue;

                            if (money != "")
                            {
                                _moneys = long.Parse(money);
                                totalMoney = totalMoney + _moneys;
                                totalcount += Convert.ToInt32(count);
                            }

                            var newrow = dt.NewRow();
                            newrow["RowNumber"] = dtCount.ToString();
                            if (!isExcel) newrow["CardGroupID"] = cartypes[i];
                            newrow["CardGroupName"] = GetCardGroup(cartypes[i]);
                            newrow["Moneys"] = string.IsNullOrWhiteSpace(money) ? "0" : money;
                            newrow["Count"] = string.IsNullOrWhiteSpace(count) ? "0" : count;
                            dt.Rows.Add(newrow);
                        }
                    }
                }
            }

            var totalMoneyRow = dt.NewRow();
            totalMoneyRow["CardGroupName"] = DictionarySearch["total"];
            totalMoneyRow["Moneys"] = totalMoney.ToString();
            totalMoneyRow["Count"] = totalcount.ToString();
            dt.Rows.Add(totalMoneyRow);

            return dt;
        }
        public DataTable GetReportTotalMoneyByCardGroupUnion(string CardGroupID, string _fromdate, string _todate)
        {
            var query = new StringBuilder();

            query.AppendLine("select SUM(a.TotalMoney) FROM(");

            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine(" AND ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //query.AppendLine(string.Format("AND ce.[CardGroupID] = '{0}'", CardGroupID));

            query.AppendLine("UNION");

            //tblCardEventHistory
            query.AppendLine("SELECT SUM(ceh.[Moneys]) AS TotalMoney FROM tblCardEventHistory ceh WITH (NOLOCK) where ceh.[EventCode] = '2' and ceh.[IsDelete] = 0 and ceh.[IsFree] = 0 and ceh.[Moneys] > 0");
            query.AppendLine(string.Format("AND ceh.[DateTimeOut] >= '{0}' AND ceh.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine(" AND ceh.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND ceh.[CardGroupID] = '{0}'", CardGroupID));
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }
        #endregion

        #region ReportTotalMoneyByLane
        public List<ReportTotalMoneyByLane> GetReportTotalMoneyByLane(string LaneIDOut, string _fromdate, string _todate)
        {
            var dt = GetReportTotalMoneyByLaneExcel(LaneIDOut, _fromdate, _todate);

            return dt.DataTableToList<ReportTotalMoneyByLane>();
        }
        public DataTable GetReportTotalMoneyByLaneExcel(string LaneIDOut, string _fromdate, string _todate, bool isExcel = false)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            // DataTable dtlane = Data.SqlHelper.ExcuteSQL.GetDataSet("select LaneName, LaneID from tblLane where LaneID LIKE '%" + LaneIDOut + "%' order by SortOrder").Tables[0];
            var sb = new StringBuilder();

            sb.AppendLine("select LaneName, LaneID from tblLane ");
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDOut))
            {
                var t = LaneIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("where LaneID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            sb.AppendLine("order by SortOrder");

            var dtlane = Data.SqlHelper.ExcuteSQL.GetDataSet(sb.ToString(), false).Tables[0];

            DataTable dt = new DataTable();
            dt.Columns.Add("RowNumber", typeof(string));
            if (!isExcel) dt.Columns.Add("LaneID", typeof(string));
            dt.Columns.Add("LaneName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            int dtCount = 0;
            long totalMoney = 0;

            for (int i = 0; i < dtlane.Rows.Count; i++)
            {
                string _LaneIDOut = dtlane.Rows[i]["LaneID"].ToString();
                var query = new StringBuilder();
                query.AppendLine("select ISNULL(SUM(a.TotalMoney),0) AS TotalMoney from (");
                query.AppendLine("SELECT ISNULL(SUM(ce.[Moneys]),0) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
                query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
                query.AppendLine(string.Format("AND ce.[LaneIDOut] = '{0}'", _LaneIDOut));

                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and ce.CardGroupID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                if (SystemUsingLoop() == true)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("select ISNULL(sum(Moneys),0) AS TotalMoney from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0" +
                               " and DateTimeOut>='" + _fromdate +
                               "' and DateTimeOut<='" + _todate + "'");

                    query.AppendLine(string.Format("AND [LaneIDOut] = '{0}'", _LaneIDOut));

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            sb.AppendLine("AND CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            sb.AppendLine(" )");
                        }
                    }
                }

                query.AppendLine(") as a");

                string money = ExcuteSQLEvent.GetDataSet(query.ToString()).Tables[0].Rows[0]["TotalMoney"].ToString();

                if (string.IsNullOrWhiteSpace(money)) continue;

                dtCount++;
                var newrow = dt.NewRow();
                newrow["RowNumber"] = dtCount.ToString();
                if (!isExcel) newrow["LaneID"] = dtlane.Rows[i]["LaneID"];
                newrow["LaneName"] = dtlane.Rows[i]["LaneName"];
                newrow["Moneys"] = money;
                dt.Rows.Add(newrow);

                long _money = 0;

                long.TryParse(newrow["Moneys"].ToString(), out _money);

                totalMoney += _money;
            }

            var totalMoneyRow = dt.NewRow();
            totalMoneyRow["LaneName"] = DictionarySearch["totalAmount"];
            totalMoneyRow["Moneys"] = totalMoney.ToString();
            dt.Rows.Add(totalMoneyRow);

            return dt;
        }
        public DataTable GetReportTotalMoneyByLaneUnion(string LaneIDOut, string _fromdate, string _todate)
        {
            var query = new StringBuilder();

            query.AppendLine("select SUM(a.TotalMoney) FROM(");
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDOut))
            {
                var t = LaneIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("where ce.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND ce.[LaneIDOut] = '{0}'", LaneIDOut));

            query.AppendLine("UNION");

            //tblCardEventHistory
            query.AppendLine("SELECT SUM(ceh.[Moneys]) AS TotalMoney FROM tblCardEventHistory ceh WITH (NOLOCK) where ceh.[EventCode] = '2' and ceh.[IsDelete] = 0 and ceh.[IsFree] = 0 and ceh.[Moneys] > 0");
            query.AppendLine(string.Format("AND ceh.[DateTimeOut] >= '{0}' AND ceh.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDOut))
            {
                var t = LaneIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("where ceh.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND ceh.[LaneIDOut] = '{0}'", LaneIDOut));
            query.AppendLine("UNION");
            //tblLoopEvent
            query.AppendLine("SELECT SUM(le.[Moneys]) AS TotalMoney FROM tblLoopEvent le WITH (NOLOCK) where le.[EventCode] = '2' and le.[IsDelete] = 0 and le.[IsFree] = 0 and le.[Moneys] > 0");
            query.AppendLine(string.Format("AND le.[DateTimeOut] >= '{0}' AND le.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDOut))
            {
                var t = LaneIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("where le.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneIDOut));
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }
        public DataTable GetReportTotalMoneyByLaneAndLoop(string LaneIDOut, string _fromdate, string _todate)
        {
            var query = new StringBuilder();

            query.AppendLine("select SUM(a.TotalMoney) FROM(");
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDOut))
            {
                var t = LaneIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("where ce.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND ce.[LaneIDOut] = '{0}'", LaneIDOut));
            query.AppendLine("UNION");
            //tblLoopEvent
            query.AppendLine("SELECT SUM(le.[Moneys]) AS TotalMoney FROM tblLoopEvent le WITH (NOLOCK) where le.[EventCode] = '2' and le.[IsDelete] = 0 and le.[IsFree] = 0 and le.[Moneys] > 0");
            query.AppendLine(string.Format("AND le.[DateTimeOut] >= '{0}' AND le.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneIDOut))
            {
                var t = LaneIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("where le.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneIDOut));
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }
        #endregion

        #region ReportTotalMoneyByUser
        public List<ReportTotalMoneyByUser> GetReportTotalMoneyByUser(string UserIDOut, string _fromdate, string _todate)
        {
            var dt = GetReportTotalMoneyByUserExcel(UserIDOut, _fromdate, _todate);

            return dt.DataTableToList<ReportTotalMoneyByUser>();
        }
        public DataTable GetReportTotalMoneyByUserExcel(string UserIDOut, string _fromdate, string _todate, bool isExcel = false)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            //  DataTable dtuser = Data.SqlHelper.ExcuteSQL.GetDataSet("select UserName, UserID from tblUser where UserID LIKE '%" + UserIDOut + "%' AND IsLock=0 order by SortOrder").Tables[0];

            var sb = new StringBuilder();
            sb.AppendLine("select UserName, Id from dbo.[User] where IsDeleted=0 ");
            //User
            if (!string.IsNullOrWhiteSpace(UserIDOut))
            {
                var t = UserIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("and CONVERT(VARCHAR(255), Id) IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }
            //sb.AppendLine("order by SortOrder");

            var dtuser = Data.SqlHelper.ExcuteSQL.GetDataSet(sb.ToString(), false).Tables[0];

            DataTable dt = new DataTable();
            dt.Columns.Add("RowNumber", typeof(string));
            if (!isExcel) dt.Columns.Add("Id", typeof(string));
            dt.Columns.Add("UserName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            int dtCount = 0;
            long totalMoney = 0;

            for (int i = 0; i < dtuser.Rows.Count; i++)
            {
                string _UserIDOut = dtuser.Rows[i]["Id"].ToString();
                var query = new StringBuilder();
                query.AppendLine("select ISNULL(SUM(a.TotalMoney),0) AS TotalMoney from (");
                query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
                query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
                query.AppendLine(string.Format("AND ce.[UserIDOut] = '{0}'", _UserIDOut));

                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and ce.CardGroupID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                if (SystemUsingLoop() == true)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("select ISNULL(sum(Moneys),0) AS TotalMoney from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0" +
                               " and DateTimeOut>='" + _fromdate +
                               "' and DateTimeOut<='" + _todate + "'");

                    query.AppendLine(string.Format("AND [UserIDOut] = '{0}'", _UserIDOut));

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            sb.AppendLine("AND CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            sb.AppendLine(" )");
                        }
                    }
                }
                query.AppendLine(") as a");

                string money = ExcuteSQLEvent.GetDataSet(query.ToString()).Tables[0].Rows[0]["TotalMoney"].ToString();

                if (string.IsNullOrWhiteSpace(money)) continue;

                dtCount++;
                var newrow = dt.NewRow();
                newrow["RowNumber"] = dtCount.ToString();
                if (!isExcel) newrow["Id"] = dtuser.Rows[i]["Id"];
                newrow["UserName"] = dtuser.Rows[i]["UserName"];
                newrow["Moneys"] = money;
                dt.Rows.Add(newrow);

                long _money = 0;

                long.TryParse(newrow["Moneys"].ToString(), out _money);

                totalMoney += _money;
            }

            var totalMoneyRow = dt.NewRow();
            totalMoneyRow["UserName"] = DictionarySearch["totalAmount"];
            totalMoneyRow["Moneys"] = totalMoney.ToString();
            dt.Rows.Add(totalMoneyRow);

            return dt;
        }

        public DataTable GetReportTotalMoneyByUserAndLoop(string UserIDOut, string _fromdate, string _todate)
        {
            var query = new StringBuilder();

            query.AppendLine("select SUM(a.TotalMoney) FROM(");
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //User
            if (!string.IsNullOrWhiteSpace(UserIDOut))
            {
                var t = UserIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND ce.[UserIDOut] = '{0}'", UserIDOut));

            query.AppendLine("UNION");
            //tblLoopEvent
            query.AppendLine("SELECT SUM(le.[Moneys]) AS TotalMoney FROM tblLoopEvent le WITH (NOLOCK) where le.[EventCode] = '2' and le.[IsDelete] = 0 and le.[IsFree] = 0 and le.[Moneys] > 0");
            query.AppendLine(string.Format("AND le.[DateTimeOut] >= '{0}' AND le.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //User
            if (!string.IsNullOrWhiteSpace(UserIDOut))
            {
                var t = UserIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and le.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            // query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserIDOut));
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }
        public DataTable GetReportTotalMoneyByUserUnion(string UserIDOut, string _fromdate, string _todate)
        {
            var query = new StringBuilder();

            query.AppendLine("select SUM(a.TotalMoney) FROM(");
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //User
            if (!string.IsNullOrWhiteSpace(UserIDOut))
            {
                var t = UserIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //  query.AppendLine(string.Format("AND ce.[UserIDOut] = '{0}'", UserIDOut));
            query.AppendLine("UNION");
            //tblCardEventHistory
            query.AppendLine("SELECT SUM(ceh.[Moneys]) AS TotalMoney FROM tblCardEventHistory ceh WITH (NOLOCK) where ceh.[EventCode] = '2' and ceh.[IsDelete] = 0 and ceh.[IsFree] = 0 and ceh.[Moneys] > 0");
            query.AppendLine(string.Format("AND ceh.[DateTimeOut] >= '{0}' AND ceh.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //User
            if (!string.IsNullOrWhiteSpace(UserIDOut))
            {
                var t = UserIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ceh.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //   query.AppendLine(string.Format("AND ceh.[UserIDOut] = '{0}'", UserIDOut));
            query.AppendLine("UNION");
            //tblLoopEvent
            query.AppendLine("SELECT SUM(le.[Moneys]) AS TotalMoney FROM tblLoopEvent le WITH (NOLOCK) where le.[EventCode] = '2' and le.[IsDelete] = 0 and le.[IsFree] = 0 and le.[Moneys] > 0");
            query.AppendLine(string.Format("AND le.[DateTimeOut] >= '{0}' AND le.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            //User
            if (!string.IsNullOrWhiteSpace(UserIDOut))
            {
                var t = UserIDOut.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and le.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //     query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserIDOut));
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            return list.Tables[0];
        }
        #endregion

        #region ReportDetailMoneyCardMonth
        public List<ReportDetailMoneyCardMonth> GetReportDetailMoneyCardMonth(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,c.Address ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0");
            query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));



            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(FeeLevel) AS totalMoney FROM (");
            query.AppendLine("SELECT Id,FeeLevel");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID) ");
            query.AppendLine("WHERE IsDelete = 0");
            query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%' )", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            query.AppendLine(") as a");


            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportDetailMoneyCardMonth>(list.Tables[0]);
        }
        public List<ReportDetailMoneyCardMonth> PrintReportDetailMoneyCardMonth(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,c.Address ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0");
            query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");
            // query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(FeeLevel) AS totalMoney FROM (");
            query.AppendLine("SELECT Id,FeeLevel");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID) ");
            query.AppendLine("WHERE IsDelete = 0");
            query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%' )", keyword));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("AND UserID = '{0}'", UserID));

            query.AppendLine(") as a");


            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportDetailMoneyCardMonth>(list.Tables[0]);
        }
        public DataTable GetReportDetailMoneyCardMonth_Excel(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS 'STT',CardNo, CardNumber as 'Mã thẻ', CardGroupID as 'Nhóm thẻ', c.CustomerName as 'Khách hàng', ac.CustomerGroupID as 'Nhóm khách hàng',Plate as 'Biển số',c.Address as 'Địa chỉ', (select convert(varchar(10), OldExpireDate, 103)) as 'Thời hạn cũ', (select convert(varchar(10), NewExpireDate, 103)) as 'Thời hạn mới', FeeLevel as 'Phí(VNĐ)', UserID as 'NV thực hiện', (select convert(varchar(10), Date, 103) + ' ' + left(convert(varchar(32), Date, 108),8)) as 'Ngày thực hiện'");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0");
            query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }
        #endregion

        #region ReportDetailMoneyCardMonthTRANSERCO
        public List<ReportDetailMoneyCardMonthTRANSERCO> GetReportDetailMoneyCardMonthTRANSERCO(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber,ac.Id, Date,CardNo, CardNumber, CardGroupID, Plate,c.Description, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,IsTransferPayment");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));



            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(FeeLevel) AS totalMoney FROM (");
            query.AppendLine("SELECT Id,FeeLevel");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID) ");
            query.AppendLine("WHERE IsDelete = 0");
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%' )", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            query.AppendLine(") as a");


            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportDetailMoneyCardMonthTRANSERCO>(list.Tables[0]);
        }
        public List<ReportDetailMoneyCardMonthTRANSERCO> PrintReportDetailMoneyCardMonthTRANSERCO(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate,c.Description, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,IsTransferPayment ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");
            // query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(FeeLevel) AS totalMoney FROM (");
            query.AppendLine("SELECT Id,FeeLevel");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID) ");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%' )", keyword));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("AND CardGroupID = '{0}'", CardGroupID));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");


            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportDetailMoneyCardMonthTRANSERCO>(list.Tables[0]);
        }

        public DataTable PrintReportDetailMoneyCardMonthTRANSERCO_Company(string keyword, List<string> listId, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, ref DataTable dtSumMonth)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var namemonth = GetMonthNameSql(keyword, listId, _fromdate, _todate, CardGroupID, CustomerID, CustomerGroupID, UserID);//FunctionHelper.MonthName(_fromdate, _todate);

            var query = new StringBuilder();

            #region Danh sách
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT CustomerID,Description,Plate,ContractStartDate,ContractEndDate,");
            query.AppendLine("(Select CustomerGroupName From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as CustomerGroupName, ");
            query.AppendLine("(Select Tax From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Tax,");
            query.AppendLine("(Select Description From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Address,");
            query.AppendLine("SUM(a.FeeLevel) as FeeLevel,Month");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate,c.Description, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,IsTransferPayment,ac.ContractStartDate,ac.ContractEndDate,left(datename(month,NewExpireDate),3) AS Month ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");

            query.AppendLine("Group by CustomerID,Plate,Description,CustomerGroupID,ContractStartDate,ContractEndDate,Month");
            query.AppendLine(") as b");

            query.AppendLine("PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(FeeLevel)");
            query.AppendLine(string.Format("  for Month In ({0})", namemonth));
            query.AppendLine(") as pvt");
            #endregion

            #region Tổng
            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(FeeLevel) AS totalMoney FROM (");
            query.AppendLine("SELECT Id,FeeLevel");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID) ");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%' )", keyword));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("AND CardGroupID = '{0}'", CardGroupID));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");
            #endregion

            #region Tổng từng tháng
            //Tổng từng tháng
            var _query = QuerySumMoneyMonth(namemonth);
            query.AppendLine(_query);
            query.AppendLine("SELECT CustomerID,Description,Plate,ContractStartDate,ContractEndDate,");
            query.AppendLine("(Select CustomerGroupName From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as CustomerGroupName, ");
            query.AppendLine("(Select Tax From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Tax,");
            query.AppendLine("(Select Description From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Address,");
            query.AppendLine("SUM(a.FeeLevel) as FeeLevel,Month");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate,c.Description, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,IsTransferPayment,ac.ContractStartDate,ac.ContractEndDate,left(datename(month,NewExpireDate),3) AS Month ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");

            query.AppendLine("Group by CustomerID,Plate,Description,CustomerGroupID,ContractStartDate,ContractEndDate,Month");
            query.AppendLine(") as b");

            query.AppendLine("PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(FeeLevel)");
            query.AppendLine(string.Format("  for Month In ({0})", namemonth));
            query.AppendLine(") as pvt");
            #endregion

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            dtSumMonth = list.Tables[2];
            return list.Tables[0];
        }

        public DataTable PrintReportDetailMoneyCardMonthTRANSERCO_Personal(string keyword, List<string> listId, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, ref DataTable dtSumMonth)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var namemonth = GetMonthNameSql(keyword, listId, _fromdate, _todate, CardGroupID, CustomerID, CustomerGroupID, UserID);

            var query = new StringBuilder();

            #region Danh sách
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT CustomerID,Description,Plate,ContractStartDate,ContractEndDate,");
            //query.AppendLine("(Select CustomerGroupName From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as CustomerGroupName, ");
            //query.AppendLine("(Select Tax From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Tax,");
            //query.AppendLine("(Select Description From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Address,");
            query.AppendLine("SUM(a.FeeLevel) as FeeLevel,Month");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate,c.Description, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,IsTransferPayment,ac.ContractStartDate,ac.ContractEndDate,left(datename(month,NewExpireDate),3) AS Month ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");

            query.AppendLine("Group by CustomerID,Plate,Description,CustomerGroupID,ContractStartDate,ContractEndDate,Month");
            query.AppendLine(") as b");

            query.AppendLine("PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(FeeLevel)");
            query.AppendLine(string.Format("  for Month In ({0})", namemonth));
            query.AppendLine(") as pvt");
            #endregion

            #region Tổng
            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount,SUM(FeeLevel) AS totalMoney FROM (");
            query.AppendLine("SELECT Id,FeeLevel");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID) ");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%' )", keyword));

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("AND CardGroupID = '{0}'", CardGroupID));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");
            #endregion

            #region Tổng từng tháng
            var _query = QuerySumMoneyMonth(namemonth);
            query.AppendLine(_query);
            query.AppendLine("SELECT CustomerID,Description,Plate,ContractStartDate,ContractEndDate,");
            //query.AppendLine("(Select CustomerGroupName From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as CustomerGroupName, ");
            //query.AppendLine("(Select Tax From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Tax,");
            //query.AppendLine("(Select Description From tblCustomerGroup Where CustomerGroupID = a.CustomerGroupID) as Address,");
            query.AppendLine("SUM(a.FeeLevel) as FeeLevel,Month");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS RowNumber, Date,CardNo, CardNumber, CardGroupID, Plate,c.Description, c.CustomerName as CustomerID, ac.CustomerGroupID, OldExpireDate, NewExpireDate, FeeLevel, UserID,IsTransferPayment,ac.ContractStartDate,ac.ContractEndDate,left(datename(month,NewExpireDate),3) AS Month ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");

            query.AppendLine("Group by CustomerID,Plate,Description,CustomerGroupID,ContractStartDate,ContractEndDate,Month");
            query.AppendLine(") as b");

            query.AppendLine("PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(FeeLevel)");
            query.AppendLine(string.Format("  for Month In ({0})", namemonth));
            query.AppendLine(") as pvt");
            #endregion

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            dtSumMonth = list.Tables[2];
            return list.Tables[0];
        }
        public DataTable GetReportDetailMoneyCardMonth_ExcelTRANSERCO(string keyword, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY Date desc) AS 'STT',CardNo, CardNumber as 'Mã thẻ', CardGroupID as 'Nhóm thẻ', c.CustomerName as 'Khách hàng',Plate as 'Biển số',c.Description as 'Mã hợp đồng',ac.CustomerGroupID as 'Nhóm khách hàng', (select convert(varchar(10), OldExpireDate, 103)) as 'Thời hạn cũ', (select convert(varchar(10), NewExpireDate, 103)) as 'Thời hạn mới', FeeLevel as 'Phí(VNĐ)',(Case When IsTransferPayment = 'True' Then 'CK' Else 'TM' End) as 'Thanh toán', UserID as 'NV thực hiện', (select convert(varchar(10), Date, 103) + ' ' + left(convert(varchar(32), Date, 108),8)) as 'Ngày thực hiện'");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") as a");

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }

        public string GetMonthNameSql(string keyword, List<string> listId, string _fromdate, string _todate, string CardGroupID, string CustomerID, List<string> CustomerGroupID, string UserID)
        {
            var monthname = "";

            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM (");
            query.AppendLine("SELECT distinct left(datename(month,NewExpireDate),3) AS Month,MONTH(NewExpireDate) AS STT ");
            query.AppendLine(" FROM tblActiveCard ac WITH (NOLOCK) ");
            query.AppendLine(" LEFT JOIN tblCustomer c ON ac.CustomerID = CONVERT(nvarchar(50), c.CustomerID)");
            query.AppendLine("WHERE IsDelete = 0 AND FeeLevel > 0");
            //query.AppendLine(string.Format("AND [Date] >= '{0}' AND [Date] < '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND [NewExpireDate] >= '{0}' AND [NewExpireDate] < '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(keyword))
                query.AppendLine(string.Format("AND (Plate LIKE '%{0}%' OR CardNumber LIKE '%{0}%' OR CardNo LIKE '%{0}%')", keyword));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND CustomerID = '{0}'", CustomerID));

            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND ac.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            if (listId != null && listId.Count > 0)
            {
                var count = 0;

                query.AppendLine("and ac.Id IN ( ");

                foreach (var item in listId)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == listId.Count ? "" : ","));
                }

                query.AppendLine(" )");

            }

            query.AppendLine(") as a");
            query.AppendLine("order by STT asc");

            var dt = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                int count = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    count++;
                    monthname += dr["Month"].ToString() + (count < dt.Rows.Count ? "," : "");
                }
            }

            return monthname;
        }

        public string QuerySumMoneyMonth(string monthname)
        {
            var query = new StringBuilder();

            query.AppendLine("SELECT ");

            var arr = monthname.Split(',');

            if (arr.Length > 0)
            {
                int count = 0;
                foreach (var item in arr)
                {
                    count++;
                    query.AppendLine(string.Format("SUM({0}) AS {0}{1}", item, count < arr.Length ? "," : ""));
                }
            }
            else
            {
                query.AppendLine("SUM(0) AS NoColumn");
            }

            query.AppendLine(" FROM ( ");
            return query.ToString();
        }

        #endregion

        #region ReportTotalMoneyCardMonthByCardGroup
        public List<ReportTotalMoneyCardMonthByCardGroup> GetReportTotalMoneyCardMonthByCardGroup(string _fromdate, string _todate, string CardGroupID)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }


            var list = new List<ReportTotalMoneyCardMonthByCardGroup>();

            DataTable dt = new DataTable();
            dt.Columns.Add("GroupName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var dtcardgroup = _tblCardGroupService.GetActiveCardGroupMonth(CardGroupID);

            double _totalmoneys = 0;

            if (dtcardgroup != null && dtcardgroup.Rows.Count > 0)
            {

                foreach (DataRow dr in dtcardgroup.Rows)
                {

                    double _moneys = 0;
                    DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet(string.Format("select sum(FeeLevel) from tblActiveCard where IsDelete=0 and Date >= '{0}' and Date <= '{1}' and CardGroupID = '{2}'", _fromdate, _todate, dr["CardGroupID"].ToString()), false).Tables[0];

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = double.Parse(temp.Rows[0][0].ToString());

                        }
                        else
                        {
                            _moneys = 0;
                        }

                        _totalmoneys = _totalmoneys + _moneys;
                    }

                    var cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));

                    var item = new ReportTotalMoneyCardMonthByCardGroup();
                    item.Moneys = _moneys;
                    item.Id = cardgroup.CardGroupID.ToString();
                    item.GroupName = cardgroup.CardGroupName;

                    list.Add(item);

                }

                var _item = new ReportTotalMoneyCardMonthByCardGroup();
                _item.Moneys = _totalmoneys;
                _item.Id = "";
                _item.GroupName = DictionarySearch["total"];

                list.Add(_item);
                // dt.Rows.Add("TỔNG SỐ", string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _totalmoneys));

                // list = Data.SqlHelper.ExcuteSQL.DataTableToList<ReportTotalMoneyCardMonthByCardGroup>(dt);

            }

            return list;

        }
        public DataTable GetReportTotalMoneyCardMonthByCardGroup_Excel(string _fromdate, string _todate, string CardGroupID)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            DataTable dt = new DataTable();
            dt.Columns.Add("STT", typeof(string));
            dt.Columns.Add("GroupName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var dtcardgroup = _tblCardGroupService.GetActiveCardGroupMonth(CardGroupID);

            double _totalmoneys = 0;

            if (dtcardgroup != null && dtcardgroup.Rows.Count > 0)
            {
                var count = 0;
                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    count++;
                    double _moneys = 0;
                    DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet(string.Format("select sum(FeeLevel) from tblActiveCard where IsDelete=0 and Date >= '{0}' and Date <= '{1}' and CardGroupID = '{2}'", _fromdate, _todate, dr["CardGroupID"].ToString()), false).Tables[0];

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = double.Parse(temp.Rows[0][0].ToString());

                        }
                        else
                        {
                            _moneys = 0;
                        }

                        _totalmoneys = _totalmoneys + _moneys;
                    }

                    var cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));

                    dt.Rows.Add(count, cardgroup.CardGroupName, string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneys));


                }


                dt.Rows.Add("#", FunctionHelper.GetLocalizeDictionary("report", "reportSearch")["total"], string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _totalmoneys));

            }

            return dt;

        }
        #endregion

        #region ReportTotalMoneyCardMonthByCustomerGroup
        public List<ReportTotalMoneyCardMonthByCardGroup> GetReportTotalMoneyCardMonthByCustomerGroup(string _fromdate, string _todate, List<string> CustomerGroupID, string customerid)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var list = new List<ReportTotalMoneyCardMonthByCardGroup>();



            DataTable dt = new DataTable();
            dt.Columns.Add("ParentID", typeof(string));
            dt.Columns.Add("CustomerGroupID", typeof(string));
            dt.Columns.Add("GroupName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var sb = new StringBuilder();
            sb.AppendFormat("select CustomerGroupName as GroupName, CustomerGroupID, ParentID from tblCustomerGroup where 1=1");

            if (CustomerGroupID != null && CustomerGroupID.Count > 0)
            {
                sb.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            sb.AppendFormat("order by SortOrder");

            DataTable dtcardgroup = Data.SqlHelper.ExcuteSQL.GetDataSet(sb.ToString(), false).Tables[0];

            double _totalmoneys = 0;
            if (dtcardgroup != null && dtcardgroup.Rows.Count > 0)
            {

                foreach (DataRow dr in dtcardgroup.Rows)
                {

                    double _moneys = 0;
                    //DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet("select sum(FeeLevel) from tblActiveCard where IsDelete=0" +
                    //    " and Date>='" + _fromdate +
                    //    "' and Date<='" + _todate +
                    //    "' and CustomerGroupID='" + dr["CustomerGroupID"].ToString() + "'");

                    var query = new StringBuilder();

                    query.AppendLine(string.Format("select sum(FeeLevel) from tblActiveCard where IsDelete=0 and Date >= '{0}' and Date <= '{1}' and CustomerGroupID = '{2}'", _fromdate, _todate, dr["CustomerGroupID"].ToString()));

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CardGroupID IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = double.Parse(temp.Rows[0][0].ToString());

                        }
                        else
                        {
                            _moneys = 0;
                        }

                        _totalmoneys = _totalmoneys + _moneys;
                    }

                    dt.Rows.Add(dr["ParentID"].ToString(), dr["CustomerGroupID"].ToString(), dr["GroupName"].ToString(), _moneys);

                }

            }

            dt.Rows.Add(DictionarySearch["total"], _totalmoneys);

            if (dt != null && dt.Rows.Count > 0)
            {
                // sap xep lai dang tree
                var dt2 = dt.Clone();
                dt2.Columns.Add("Level");
                dt2.Columns.Add("ChkChild");
                var lv = 1;
                //var query = new StringBuilder();

                //if (CustomerGroupID != null && CustomerGroupID.Count > 0)
                //{
                //    query.AppendLine("ParentID = '");

                //    var count = 0;
                //    foreach (var item in CustomerGroupID)
                //    {
                //        //count++;
                //        //query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                //        query.AppendLine(item);
                //    }

                //    query.AppendLine("'");
                //}
                //else
                //{
                //    query.AppendLine("ParentID = ''");

                //}
                if (string.IsNullOrEmpty(customerid))
                {
                    customerid = "0";
                }

                // var dtall = _tblCustomerGroupService.GetAllActive().ToDataTableNullable();
                var _parentGroup = dt.Select(string.Format("ParentID ='{0}'", customerid));

                //string.Format("ParentID ='{0}'", CustomerGroupID)

                //query.Clear();
                //if (CustomerGroupID != null && CustomerGroupID.Count > 0)
                //{
                //    query.AppendLine("CustomerGroupID = '");

                //    var count = 0;
                //    foreach (var item in CustomerGroupID)
                //    {
                //        //count++;
                //        //query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                //        query.AppendLine(item);
                //    }

                //    query.AppendLine("'");
                //}
                //else
                //{
                //    query.AppendLine("CustomerGroupID = ''");

                //}
                var _parentFirst = dt.Select(string.Format("CustomerGroupID ='{0}'", customerid));

                if (_parentFirst.Length > 0)
                {
                    var _dFirst = _parentFirst[0];
                    var _chilFGroup = dt.Select(string.Format("ParentID ='{0}'", _dFirst["CustomerGroupID"].ToString()));
                    dt2.Rows.Add(_dFirst["ParentID"].ToString(), _dFirst["CustomerGroupID"].ToString(), _dFirst["GroupName"].ToString(), _dFirst["Moneys"].ToString(), lv.ToString(), _chilFGroup.Length > 0 ? "1" : "0");
                }

                foreach (DataRow item in _parentGroup)
                {
                    var _chilGroup = dt.Select(string.Format("ParentID ='{0}'", item["CustomerGroupID"].ToString()));
                    var lv0 = lv + 1;
                    dt2.Rows.Add(item["ParentID"].ToString(), item["CustomerGroupID"].ToString(), item["GroupName"].ToString(), item["Moneys"].ToString(), lv0.ToString(), _chilGroup.Length > 0 ? "1" : "0");
                    if (_chilGroup.Length > 0)
                    {
                        getChildToTable(item["CustomerGroupID"].ToString(), dt, dt2, lv0);
                    }
                }

                if (dt2 != null && dt2.Rows.Count > 0)
                {
                    list = Data.SqlHelper.ExcuteSQL.DataTableToList<ReportTotalMoneyCardMonthByCardGroup>(dt2);
                }
            }


            return list;
        }

        public DataTable GetReportTotalMoneyCardMonthByCustomerGroup_Excel(string _fromdate, string _todate, List<string> CustomerGroupID, string customerid)
        {
            var Dictionary = FunctionHelper.GetLocalizeDictionary("report", "ReportTotalMoneyCardMonthByGroupUser");
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("ParentID", typeof(string));
            dt.Columns.Add("CustomerGroupID", typeof(string));
            dt.Columns.Add("GroupName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var sb = new StringBuilder();
            sb.AppendFormat("select CustomerGroupName as GroupName, CustomerGroupID, ParentID from tblCustomerGroup where 1=1");

            if (CustomerGroupID != null && CustomerGroupID.Count > 0)
            {
                sb.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            sb.AppendFormat("order by SortOrder");

            DataTable dtcardgroup = Data.SqlHelper.ExcuteSQL.GetDataSet(sb.ToString(), false).Tables[0];

            double _totalmoneys = 0;
            if (dtcardgroup != null && dtcardgroup.Rows.Count > 0)
            {

                foreach (DataRow dr in dtcardgroup.Rows)
                {

                    double _moneys = 0;
                    //DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet("select sum(FeeLevel) from tblActiveCard where IsDelete=0" +
                    //    " and Date>='" + _fromdate +
                    //    "' and Date<='" + _todate +
                    //    "' and CustomerGroupID='" + dr["CustomerGroupID"].ToString() + "'");
                    var query = new StringBuilder();

                    query.AppendLine(string.Format("select sum(FeeLevel) from tblActiveCard where IsDelete=0 and Date >= '{0}' and Date <= '{1}' and CustomerGroupID = '{2}'", _fromdate, _todate, dr["CustomerGroupID"].ToString()));

                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and CardGroupID IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = double.Parse(temp.Rows[0][0].ToString());

                        }
                        else
                        {
                            _moneys = 0;
                        }

                        _totalmoneys = _totalmoneys + _moneys;
                    }

                    dt.Rows.Add(dr["ParentID"].ToString(), dr["CustomerGroupID"].ToString(), dr["GroupName"].ToString(), _moneys.ToString("###.###"));

                }

            }

            dt.Rows.Add("TỔNG SỐ", _totalmoneys.ToString("###.###"));

            if (dt != null && dt.Rows.Count > 0)
            {
                // sap xep lai dang tree
                var dt2 = dt.Clone();
                dt2.Columns.Add("Level");
                dt2.Columns.Add("ChkChild");
                var lv = 1;
                if (string.IsNullOrEmpty(customerid))
                {
                    customerid = "0";
                }
                var _parentGroup = dt.Select(string.Format("ParentID ='{0}'", customerid));
                var _parentFirst = dt.Select(string.Format("CustomerGroupID='{0}'", customerid));
                if (_parentFirst.Length > 0)
                {
                    var _dFirst = _parentFirst[0];
                    var _chilFGroup = dt.Select(string.Format("ParentID ='{0}'", _dFirst["CustomerGroupID"].ToString()));
                    dt2.Rows.Add(_dFirst["ParentID"].ToString(), _dFirst["CustomerGroupID"].ToString(), _dFirst["GroupName"].ToString(), _dFirst["Moneys"].ToString(), lv.ToString(), _chilFGroup.Length > 0 ? "1" : "0");
                }

                foreach (DataRow item in _parentGroup)
                {
                    var _chilGroup = dt.Select(string.Format("ParentID ='{0}'", item["CustomerGroupID"].ToString()));
                    var lv0 = lv + 1;
                    dt2.Rows.Add(item["ParentID"].ToString(), item["CustomerGroupID"].ToString(), item["GroupName"].ToString(), item["Moneys"].ToString(), lv0.ToString(), _chilGroup.Length > 0 ? "1" : "0");
                    if (_chilGroup.Length > 0)
                    {
                        getChildToTable(item["CustomerGroupID"].ToString(), dt, dt2, lv0);
                    }
                }

                return dt2;
            }
            else
            {
                return dt;
            }

        }
        #endregion

        #region ReportTotalMoneyCardMonthByUser
        public List<ReportTotalMoneyCardMonthByUser> GetReportTotalMoneyCardMonthByUser(string _fromdate, string _todate, string user)
        {
            var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
            var list = new List<ReportTotalMoneyCardMonthByUser>();
            //DataTable dtuser = new DataTable();
            DataTable dt = new DataTable();
            dt.Columns.Add("UserID", typeof(string));
            dt.Columns.Add("UserName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dtuser = _UserService.GetAllActiveByListId(user);

            double _totalmoneys = 0;

            foreach (var item in dtuser)
            {
                double _moneys = 0;

                var query = new StringBuilder();
                query.AppendLine(string.Format("select sum(FeeLevel) from tblActiveCard where IsDelete=0 and Date >= '{0}' and Date <= '{1}' and UserID = '{2}'", _fromdate, _todate, item.Id.ToString()));

                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and CardGroupID IN ( ");

                        foreach (var item1 in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item1, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

                if (temp != null && temp.Rows.Count > 0)
                {
                    if (temp.Rows[0][0].ToString() != "")
                    {
                        _moneys = double.Parse(temp.Rows[0][0].ToString());

                    }
                    else
                    {
                        _moneys = 0;
                    }

                    _totalmoneys = _totalmoneys + _moneys;
                }

                dt.Rows.Add(item.Id.ToString(), item.Username.ToString(), _moneys);

            }

            dt.Rows.Add("", DictionarySearch["total"], _totalmoneys);

            if (dt != null && dt.Rows.Count > 0)
            {
                list = Data.SqlHelper.ExcuteSQL.DataTableToList<ReportTotalMoneyCardMonthByUser>(dt);
            }

            return list;
        }
        public DataTable GetReportTotalMoneyCardMonthByUser_Excel(string _fromdate, string _todate, string user)
        {
            DataTable dtuser = new DataTable();
            DataTable dt = new DataTable();
            dt.Columns.Add("STT", typeof(string));
            dt.Columns.Add("UserName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            dtuser = _UserService.GetAllActiveByListId(user).ToDataTableNullable();

            double _totalmoneys = 0;
            int count = 0;
            if (dtuser != null && dtuser.Rows.Count > 0)
            {
                foreach (DataRow dr in dtuser.Rows)
                {
                    double _moneys = 0;
                    count++;

                    var query = new StringBuilder();

                    query.AppendLine(string.Format("select sum(FeeLevel) from tblActiveCard where IsDelete=0 and Date >= '{0}' and Date <= '{1}' and UserID = '{2}'", _fromdate, _todate, dr["Id"].ToString()));
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count1 = 0;

                            query.AppendLine("and CardGroupID IN ( ");

                            foreach (var item1 in t)
                            {
                                count1++;

                                query.AppendLine(string.Format("'{0}'{1}", item1, count1 == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = double.Parse(temp.Rows[0][0].ToString());

                        }
                        else
                        {
                            _moneys = 0;
                        }

                        _totalmoneys = _totalmoneys + _moneys;
                    }

                    dt.Rows.Add(count, dr["UserName"].ToString(), _moneys);

                }
                dt.Rows.Add("", FunctionHelper.GetLocalizeDictionary("report", "reportSearch")["total"], _totalmoneys);
            }


            return dt;
        }
        #endregion

        #region ReportVehicleMoneyByCardMonth
        public List<ReportInOut> GetReportVehicleMoneyByCardMonth(string KeyWord, string UserID, string CardGroupID, string _fromdate, string _todate, string LaneID, int pageIndex, int pageSize, ref int total, ref string _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY e.[DatetimeIn] desc) AS RowNumber, e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[CardGroupID], e.[CustomerName], e.LaneIDIn ,e.UserIDIn,e.LaneIDOut ,e.UserIDOut,e.[Moneys]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.[tblCardGroup] cg on cg.[CardGroupID] = e.[CardGroupID]");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.[IsFree] = 0 AND e.[Moneys] > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));



            query.AppendLine(") as b");

            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            query.AppendLine("ORDER BY [DatetimeIn] DESC");

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) AS totalCount, SUM(a.Moneys) AS totalMoney FROM(");

            query.AppendLine("SELECT e.Id, e.Moneys");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.[tblCardGroup] cg on cg.[CardGroupID] = e.[CardGroupID]");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.[IsFree] = 0 AND e.[Moneys] > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = list.Tables.Count > 1 && !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) && Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()) > 0 ? Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()).ToString() : "0";

            return ExcuteSQLEvent.ConvertTo<ReportInOut>(list.Tables[0]);

        }

        public DataTable GetReportVehicleMoneyByCardMonthExcel(string KeyWord, string UserID, string CardGroupID, string _fromdate, string _todate, string LaneID, ref string _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY e.[DatetimeIn] desc) AS RowNumber, e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, (select convert(varchar(10), e.[DatetimeIn], 103) + ' ' + left(convert(varchar(32), e.[DatetimeIn], 108), 8)) AS DatetimeIn, e.[CardGroupID] as 'Nhóm thẻ', e.[CustomerName], e.LaneIDIn as 'Làn vào' ,e.LaneIDOut as 'Làn ra',e.UserIDIn as 'Giám sát vào' ,e.UserIDOut as 'Giám sát ra',e.[Moneys]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.[tblCardGroup] cg on cg.[CardGroupID] = e.[CardGroupID]");


            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.[IsFree] = 0 AND e.[Moneys] > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));



            query.AppendLine(") as b");

            query.AppendLine("ORDER BY DatetimeIn DESC");

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) AS totalCount, SUM(a.Moneys) AS totalMoney FROM(");

            query.AppendLine("SELECT e.Id, e.Moneys");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.[tblCardGroup] cg on cg.[CardGroupID] = e.[CardGroupID]");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.[IsFree] = 0 AND e.[Moneys] > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            _totalmoneys = list.Tables.Count > 1 && !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) && Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()) > 0 ? Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()).ToString("###,###") : "0";

            return list.Tables[0];
        }
        #endregion

        #region GetReportTotalSubventionByCardNumber
        public List<ReportTotalVehicleMoneyByCardMonth> GetReportTotalSubventionByCardNumber(string KeyWord, List<string> CustomerGroupID, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total, ref string _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT *");

            query.AppendLine("FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CardNumber desc) AS RowNumber, a.CardNo, a.CardNumber,a.RegistedPlate, a.CustomerName, a.CustomerGroupID,a.Moneys ");

            query.AppendLine("FROM (SELECT e.CardNumber, e.CardNo, e.RegistedPlate, e.CustomerName,e.CustomerGroupID, SUM(e.Moneys) AS Moneys FROM dbo.tblCardEvent e");

            query.AppendLine("INNER JOIN MPARKING.dbo.tblCardGroup cg ON e.CardGroupID = cg.CardGroupID");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.IsFree = 0 AND e.Moneys > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[RegistedPlate] LIKE '%{0}%' OR e.[CustomerName] LIKE N'%{0}%')", KeyWord));

            query.AppendLine("GROUP BY e.CardNumber, e.CardNo, e.RegistedPlate, e.CustomerName,e.CustomerGroupID");

            query.AppendLine(") AS a");
            query.AppendLine("WHERE a.RegistedPlate IN (SELECT c.Plate1 FROM MPARKING.dbo.tblCard c)");
            query.AppendLine(") AS C1");

            //--COUNT TOTAL RECORD
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            query.AppendLine("SELECT COUNT(*) AS totalCount, SUM(b.Moneys) AS totalMoney FROM(");
            query.AppendLine("SELECT a.CardNumber,a.Moneys");
            query.AppendLine("FROM (");
            query.AppendLine("SELECT e.CardNumber,e.RegistedPlate, SUM(e.Moneys) AS Moneys");

            query.AppendLine("FROM dbo.tblCardEvent e");
            query.AppendLine("INNER JOIN MPARKING.dbo.tblCardGroup cg ON e.CardGroupID = cg.CardGroupID");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.IsFree = 0 AND e.Moneys > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[RegistedPlate] LIKE '%{0}%' OR e.[CustomerName] LIKE N'%{0}%')", KeyWord));

            query.AppendLine("GROUP BY e.CardNumber,e.RegistedPlate");

            query.AppendLine(") AS a");

            query.AppendLine("WHERE a.RegistedPlate IN (SELECT c.Plate1 FROM MPARKING.dbo.tblCard c)");

            query.AppendLine(") AS b");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = list.Tables.Count > 1 && !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) && Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()) > 0 ? Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()).ToString() : "0";

            return ExcuteSQLEvent.ConvertTo<ReportTotalVehicleMoneyByCardMonth>(list.Tables[0]);

        }

        public DataTable GetReportTotalSubventionByCardNumberExcel(string KeyWord, List<string> CustomerGroupID, string _fromdate, string _todate, ref string _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("SELECT *");

            query.AppendLine("FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CardNumber desc) AS RowNumber, a.CardNo, a.CardNumber,a.RegistedPlate, a.CustomerName,a.CustomerGroupID,a.Moneys ");

            query.AppendLine("FROM (SELECT e.CardNumber, e.CardNo, e.RegistedPlate, e.CustomerName,e.CustomerGroupID, SUM(e.Moneys) AS Moneys FROM dbo.tblCardEvent e");

            // query.AppendLine("INNER JOIN dbo.tblCardEvent e ON e.CardNumber = c.CardNumber");
            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON e.CardGroupID = cg.CardGroupID");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.IsFree = 0 AND e.Moneys > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[RegistedPlate] LIKE '%{0}%' OR e.[CustomerName] LIKE N'%{0}%')", KeyWord));

            query.AppendLine("GROUP BY e.CardNumber, e.CardNo, e.RegistedPlate, e.CustomerName,e.CustomerGroupID");

            query.AppendLine(") AS a");
            query.AppendLine("WHERE a.RegistedPlate IN (SELECT c.Plate1 FROM MPARKING.dbo.tblCard c)");
            query.AppendLine(") AS C1");

            //total
            query.AppendLine("SELECT COUNT(*) AS totalCount, SUM(b.Moneys) AS totalMoney FROM(");
            query.AppendLine("SELECT a.CardNumber,a.Moneys");
            query.AppendLine("FROM (");
            query.AppendLine("SELECT e.CardNumber,e.RegistedPlate, SUM(e.Moneys) AS Moneys");

            query.AppendLine("FROM dbo.tblCardEvent e");
            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON e.CardGroupID = cg.CardGroupID");

            query.AppendLine("WHERE cg.[CardType] = 0 AND e.[IsDelete] = 0 AND e.IsFree = 0 AND e.Moneys > 0");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[RegistedPlate] LIKE '%{0}%' OR e.[CustomerName] LIKE N'%{0}%')", KeyWord));

            query.AppendLine("GROUP BY e.CardNumber,e.RegistedPlate");

            query.AppendLine(") AS a");

            query.AppendLine("WHERE a.RegistedPlate IN (SELECT c.Plate1 FROM MPARKING.dbo.tblCard c)");

            query.AppendLine(") AS b");


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            _totalmoneys = list.Tables.Count > 1 && !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) && Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()) > 0 ? Convert.ToDecimal(list.Tables[1].Rows[0]["totalMoney"].ToString()).ToString("###,###") : "0";

            var dt = list.Tables[0];
            return dt;
        }
        #endregion

        #region ReportVehicleFreeAll
        public List<ReportVehicleFreeAll> GetReportVehicleFreeAll(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total, ref long totalMoney)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber,");
            query.AppendLine("a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[DatetimeOut], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[LaneIDOut], a.[UserIDIn], a.[UserIDOut], a.[Moneys], a.[Voucher]");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], v.[Voucher]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));


            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], v.[Voucher]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 1");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}'", fromdate, todate));

                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%'", KeyWord));
                }
            }


            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.Id,e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT  le.Id,le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 1");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}'", fromdate, todate));

                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }


                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }


            query.AppendLine(") as a");


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            totalMoney = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportVehicleFreeAll>(list.Tables[0]);
        }

        public DataTable GetReportVehicleFreeAll_Excel(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string feename, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dtExcel = new DataTable();
            dtExcel.Columns.Add("STT", typeof(string));
            dtExcel.Columns.Add("Mã thẻ", typeof(string));
            dtExcel.Columns.Add("Biển số", typeof(string));
            dtExcel.Columns.Add("Thời gian vào", typeof(string));
            dtExcel.Columns.Add("Thời gian ra", typeof(string));
            dtExcel.Columns.Add("Nhóm thẻ", typeof(string));
            dtExcel.Columns.Add("Khách hàng", typeof(string));
            dtExcel.Columns.Add("Làn vào", typeof(string));
            dtExcel.Columns.Add("Làn ra", typeof(string));
            dtExcel.Columns.Add("Giám sát vào", typeof(string));
            dtExcel.Columns.Add("Giám sát ra", typeof(string));
            dtExcel.Columns.Add("Tiền", typeof(string));
            dtExcel.Columns.Add("Voucher", typeof(string));

            long _totalmoneys = 0;

            var query = new StringBuilder();
            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS STT,");
            query.AppendLine("a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.[DatetimeIn], 103) + ' ' + left(convert(varchar(32), a.[DatetimeIn], 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.[DatetimeOut], 103) + ' ' + left(convert(varchar(32), a.[DatetimeOut], 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', a.[Voucher] AS 'Voucher'");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], v.[Voucher]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));


            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));


            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%'  OR v.[Voucher] LIKE '%{0}%' )", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");

                    //tblLoopEvent
                    query.AppendLine("SELECT '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], v.[Voucher]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 1");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}'", fromdate, todate));

                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%' ", KeyWord));
                }
            }


            query.AppendLine(") as a");
            //query.AppendLine(") as C1");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string _moneys = dr["Tiền"].ToString();
                    var _moneyValue = long.Parse(_moneys);
                    _totalmoneys = _totalmoneys + _moneyValue;

                    var _lanein = _tblLaneService.GetById(Guid.Parse(dr["Làn vào"].ToString()));
                    if (_lanein != null)
                    {
                        dr["Làn vào"] = _lanein.LaneName;
                    }
                    else
                    {
                        dr["Làn vào"] = "";
                    }

                    var _laneout = _tblLaneService.GetById(Guid.Parse(dr["Làn ra"].ToString()));
                    if (_laneout != null)
                    {
                        dr["Làn ra"] = _laneout.LaneName;
                    }
                    else
                    {
                        dr["Làn ra"] = "";
                    }

                    if (!dr["Nhóm thẻ"].ToString().Equals("LOOP_D") && !dr["Nhóm thẻ"].ToString().Equals("LOOP_M"))
                    {
                        var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["Nhóm thẻ"].ToString()));
                        if (_cardgroup != null)
                        {
                            dr["Nhóm thẻ"] = _cardgroup.CardGroupName;
                        }
                        else
                        {
                            dr["Nhóm thẻ"] = "";
                        }
                    }
                    else
                    {
                        if (dr["Nhóm thẻ"].ToString().Equals("LOOP_D"))
                        {
                            dr["Nhóm thẻ"] = "Vòng từ - Xe lượt(Loop)";
                        }
                        else
                        {
                            dr["Nhóm thẻ"] = "Vòng từ - Xe tháng(Loop)";
                        }
                    }

                    //var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["Nhóm thẻ"].ToString()));
                    //if (_cardgroup != null)
                    //{
                    //    dr["Nhóm thẻ"] = _cardgroup.CardGroupName;
                    //}
                    //else
                    //{
                    //    dr["Nhóm thẻ"] = "";
                    //}

                    var _userin = _UserService.GetById(dr["Giám sát vào"].ToString());
                    if (_userin != null)
                    {
                        dr["Giám sát vào"] = _userin.Username;
                    }
                    else
                    {
                        dr["Giám sát vào"] = "";
                    }

                    var _userout = _UserService.GetById(dr["Giám sát ra"].ToString());
                    if (_userout != null)
                    {
                        dr["Giám sát ra"] = _userout.Username;
                    }
                    else
                    {
                        dr["Giám sát ra"] = "";
                    }
                    var money = !string.IsNullOrEmpty(feename) && feename.Contains("TAK_110CAUGIAY") ? "0" : string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneyValue);

                    dtExcel.Rows.Add(dr["STT"].ToString(), dr["Mã thẻ"].ToString(), dr["Biển số"].ToString(), dr["Thời gian vào"].ToString(), dr["Thời gian ra"].ToString(), dr["Nhóm thẻ"].ToString(), dr["Khách hàng"].ToString(), dr["Làn vào"].ToString(), dr["Làn ra"].ToString(), dr["Giám sát vào"].ToString(), dr["Giám sát ra"].ToString(), money, dr["Voucher"].ToString());
                }
            }

            return dtExcel;
        }
        #endregion

        #region ReportVehicleFreeAllTRANSERCO
        public List<ReportVehicleFreeAllTRANSERCO> GetReportVehicleFreeAllTRANSERCO(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total, ref long totalMoney)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber,");
            query.AppendLine("a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[DatetimeOut], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[LaneIDOut], a.[UserIDIn], a.[UserIDOut], a.[Moneys], a.[Voucher],a.Id,a.Note");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], v.[Voucher],e.Id,nt.Note");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");
            query.AppendLine("LEFT JOIN dbo.[NoteFreeTRANSERCO] nt ON nt.[Id] = CONVERT(nvarchar(128), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));


            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.Id,e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            totalMoney = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportVehicleFreeAllTRANSERCO>(list.Tables[0]);
        }

        //in trường chinh
        public List<ReportVehicleFreeAllTRANSERCO> PrintReportVehicleFreeAllTRANSERCO(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, ref int total, ref long totalMoney)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber,");
            query.AppendLine("a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[DatetimeOut], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[LaneIDOut], a.[UserIDIn], a.[UserIDOut], a.[Moneys], a.[Voucher],a.Note");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], v.[Voucher],nt.Note");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");
            query.AppendLine("LEFT JOIN dbo.[NoteFreeTRANSERCO] nt ON nt.[Id] = CONVERT(nvarchar(128), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));



            query.AppendLine(") as a");
            query.AppendLine(") as C1");


            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.Id,e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));



            query.AppendLine(") as a");


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            totalMoney = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportVehicleFreeAllTRANSERCO>(list.Tables[0]);
        }
        public DataTable GetReportVehicleFreeAllTRANSERCO_Excel(string KeyWord, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dtExcel = new DataTable();
            dtExcel.Columns.Add("STT", typeof(string));
            dtExcel.Columns.Add("Mã thẻ", typeof(string));
            dtExcel.Columns.Add("Biển số", typeof(string));
            dtExcel.Columns.Add("Thời gian vào", typeof(string));
            dtExcel.Columns.Add("Thời gian ra", typeof(string));
            dtExcel.Columns.Add("Nhóm thẻ", typeof(string));
            dtExcel.Columns.Add("Khách hàng", typeof(string));
            dtExcel.Columns.Add("Làn vào", typeof(string));
            dtExcel.Columns.Add("Làn ra", typeof(string));
            dtExcel.Columns.Add("Giám sát vào", typeof(string));
            dtExcel.Columns.Add("Giám sát ra", typeof(string));
            dtExcel.Columns.Add("Tiền", typeof(string));
            dtExcel.Columns.Add("Voucher", typeof(string));
            dtExcel.Columns.Add("Ghi chú", typeof(string));

            long _totalmoneys = 0;

            var query = new StringBuilder();
            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS STT,");
            query.AppendLine("a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.[DatetimeIn], 103) + ' ' + left(convert(varchar(32), a.[DatetimeIn], 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.[DatetimeOut], 103) + ' ' + left(convert(varchar(32), a.[DatetimeOut], 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', a.[Voucher] AS 'Voucher', a.Note AS 'Ghi chú'");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], v.[Voucher],nt.Note");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");
            query.AppendLine("LEFT JOIN dbo.[NoteFreeTRANSERCO] nt ON nt.[Id] = CONVERT(nvarchar(128), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));


            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));


            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%'  OR v.[Voucher] LIKE '%{0}%' )", KeyWord));


            query.AppendLine(") as a");
            //query.AppendLine(") as C1");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string _moneys = dr["Tiền"].ToString();
                    var _moneyValue = long.Parse(_moneys);
                    _totalmoneys = _totalmoneys + _moneyValue;

                    var _lanein = _tblLaneService.GetById(Guid.Parse(dr["Làn vào"].ToString()));
                    if (_lanein != null)
                    {
                        dr["Làn vào"] = _lanein.LaneName;
                    }
                    else
                    {
                        dr["Làn vào"] = "";
                    }

                    var _laneout = _tblLaneService.GetById(Guid.Parse(dr["Làn ra"].ToString()));
                    if (_laneout != null)
                    {
                        dr["Làn ra"] = _laneout.LaneName;
                    }
                    else
                    {
                        dr["Làn ra"] = "";
                    }

                    var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["Nhóm thẻ"].ToString()));
                    if (_cardgroup != null)
                    {
                        dr["Nhóm thẻ"] = _cardgroup.CardGroupName;
                    }
                    else
                    {
                        dr["Nhóm thẻ"] = "";
                    }

                    var _userin = _UserService.GetById(dr["Giám sát vào"].ToString());
                    if (_userin != null)
                    {
                        dr["Giám sát vào"] = _userin.Username;
                    }
                    else
                    {
                        dr["Giám sát vào"] = "";
                    }

                    var _userout = _UserService.GetById(dr["Giám sát ra"].ToString());
                    if (_userout != null)
                    {
                        dr["Giám sát ra"] = _userout.Username;
                    }
                    else
                    {
                        dr["Giám sát ra"] = "";
                    }

                    dtExcel.Rows.Add(dr["STT"].ToString(), dr["Mã thẻ"].ToString(), dr["Biển số"].ToString(), dr["Thời gian vào"].ToString(), dr["Thời gian ra"].ToString(), dr["Nhóm thẻ"].ToString(), dr["Khách hàng"].ToString(), dr["Làn vào"].ToString(), dr["Làn ra"].ToString(), dr["Giám sát vào"].ToString(), dr["Giám sát ra"].ToString(), string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneyValue), dr["Voucher"].ToString(), dr["Ghi chú"].ToString());
                }
            }

            return dtExcel;
        }

        public void RemoveFreeMoneyEvent(List<string> list)
        {
            if (list != null && list.Count > 0)
            {
                var count = 0;
                var count1 = 0;
                var query = new StringBuilder();
                query.AppendLine("UPDATE tblCardEvent");
                query.AppendLine("Set IsFree = 'False'");
                query.AppendLine("WHERE Id In ( ");

                foreach (var item in list)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == list.Count ? "" : ","));
                }

                query.AppendLine(" )");

                query.AppendLine("Delete NoteFreeTRANSERCO");
                query.AppendLine("WHERE Id In ( ");

                foreach (var item in list)
                {
                    count1++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count1 == list.Count ? "" : ","));
                }

                query.AppendLine(" )");

                ExcuteSQLEvent.Execute(query.ToString());
            }

        }

        public void UpdateNoteFree(string Id, string Note)
        {
            var query = new StringBuilder();
            query.AppendLine(string.Format("IF NOT EXISTS (SELECT * FROM NoteFreeTRANSERCO WHERE Id = '{0}')", Id));
            query.AppendLine("BEGIN");
            query.AppendLine(string.Format("INSERT NoteFreeTRANSERCO(Id,Note) Values('{0}','{1}')", Id, Note));
            query.AppendLine("END");
            query.AppendLine("ELSE");
            query.AppendLine("UPDATE NoteFreeTRANSERCO");
            query.AppendLine(string.Format("Set Note = N'{0}'", Note));
            query.AppendLine(string.Format("WHERE Id = '{0}' ", Id));

            ExcuteSQLEvent.Execute(query.ToString());
        }

        #endregion

        #region ReportVehicleFreeApart
        public List<ReportVehicleFreeAll> GetReportVehicleFreeApart(string KeyWord, string _fromdate, string _todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, ref long _totalmoneyFree)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber,");
            query.AppendLine("a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[DatetimeOut], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[LaneIDOut], a.[UserIDIn], a.[UserIDOut], CONVERT(varchar,a.[Moneys]) as Moneys, CONVERT(varchar,a.[FreeType]) as FreeType, a.[Voucher]");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], e.[FreeType], v.[Voucher]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.FreeType<>''");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));


            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));


            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    //tblLoopEvent
                    query.AppendLine("SELECT '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], le.FreeType, v.[Voucher]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.FreeType<>''");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}'", _fromdate, _todate));

                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(Moneys) AS totalMoney, SUM(FreeType) as totalfreemoneys FROM (");
            query.AppendLine("SELECT e.Id,e.Moneys, CONVERT(INT,e.FreeType) as FreeType");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.FreeType<>''");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    //tblLoopEvent
                    query.AppendLine("SELECT  le.Id,le.Moneys, CONVERT(INT,le.FreeType) as FreeType");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.FreeType<>''");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}'", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;
            _totalmoneyFree = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalfreemoneys"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalfreemoneys"].ToString()) : 0;

            return ExcuteSQLEvent.ConvertTo<ReportVehicleFreeAll>(list.Tables[0]);
        }
        public DataTable GetReportVehicleFreeApart_Excel(string KeyWord, string _fromdate, string _todate, string CardGroupID, string LaneID, string UserID, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            long _totalmoneys = 0;
            long _totalfreemoneys = 0;

            DataTable dtExcel = new DataTable();
            dtExcel.Columns.Add("STT", typeof(string));
            dtExcel.Columns.Add("Mã thẻ", typeof(string));
            dtExcel.Columns.Add("Biển số", typeof(string));
            dtExcel.Columns.Add("Thời gian vào", typeof(string));
            dtExcel.Columns.Add("Thời gian ra", typeof(string));
            dtExcel.Columns.Add("Nhóm thẻ", typeof(string));
            dtExcel.Columns.Add("Khách hàng", typeof(string));
            dtExcel.Columns.Add("Làn vào", typeof(string));
            dtExcel.Columns.Add("Làn ra", typeof(string));
            dtExcel.Columns.Add("Giám sát vào", typeof(string));
            dtExcel.Columns.Add("Giám sát ra", typeof(string));
            dtExcel.Columns.Add("Tiền", typeof(string));
            dtExcel.Columns.Add("Tiền miễn phí", typeof(string));
            dtExcel.Columns.Add("Voucher", typeof(string));
            var query = new StringBuilder();

            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS STT,");
            query.AppendLine("a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.[DatetimeIn], 103) + ' ' + left(convert(varchar(32), a.[DatetimeIn], 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.[DatetimeOut], 103) + ' ' + left(convert(varchar(32), a.[DatetimeOut], 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', a.[FreeType] AS 'Tiền miễn phí', a.[Voucher] AS 'Voucher'");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], e.[FreeType], v.[Voucher]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.FreeType<>''");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));


            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));


            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    //tblLoopEvent
                    query.AppendLine("SELECT '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '0' AS FreeType, v.[Voucher]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.FreeType<>''");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}'", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%'", KeyWord));
                }
            }

            query.AppendLine(") as a");


            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string _moneys = dr["Tiền"].ToString();
                    var _moneyValue = long.Parse(_moneys);
                    _totalmoneys = _totalmoneys + _moneyValue;

                    int _freemoney = 0;
                    if (dr["Tiền miễn phí"].ToString() != "")
                        _freemoney = int.Parse(dr["Tiền miễn phí"].ToString());
                    _totalfreemoneys = _totalfreemoneys + _freemoney;

                    var _lanein = _tblLaneService.GetById(Guid.Parse(dr["Làn vào"].ToString()));
                    if (_lanein != null)
                    {
                        dr["Làn vào"] = _lanein.LaneName;
                    }
                    else
                    {
                        dr["Làn vào"] = "";
                    }

                    var _laneout = _tblLaneService.GetById(Guid.Parse(dr["Làn ra"].ToString()));
                    if (_laneout != null)
                    {
                        dr["Làn ra"] = _laneout.LaneName;
                    }
                    else
                    {
                        dr["Làn ra"] = "";
                    }

                    var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["Nhóm thẻ"].ToString()));
                    if (_cardgroup != null)
                    {
                        dr["Nhóm thẻ"] = _cardgroup.CardGroupName;
                    }
                    else
                    {
                        dr["Nhóm thẻ"] = "";
                    }

                    var _userin = _UserService.GetById(dr["Giám sát vào"].ToString());
                    if (_userin != null)
                    {
                        dr["Giám sát vào"] = _userin.Username;
                    }
                    else
                    {
                        dr["Giám sát vào"] = "";
                    }

                    var _userout = _UserService.GetById(dr["Giám sát ra"].ToString());
                    if (_userout != null)
                    {
                        dr["Giám sát ra"] = _userout.Username;
                    }
                    else
                    {
                        dr["Giám sát ra"] = "";
                    }

                    dtExcel.Rows.Add(dr["STT"].ToString(), dr["Mã thẻ"].ToString(), dr["Biển số"].ToString(), dr["Thời gian vào"].ToString(), dr["Thời gian ra"].ToString(), dr["Nhóm thẻ"].ToString(), dr["Khách hàng"].ToString(), dr["Làn vào"].ToString(), dr["Làn ra"].ToString(), dr["Giám sát vào"].ToString(), dr["Giám sát ra"].ToString(), string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneyValue), _freemoney.ToString(), dr["Voucher"].ToString());
                }

                dtExcel.Rows.Add(0, "#", "TỔNG SỐ", "", "", "", "", "", "", "", "", string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _totalmoneys, ""), string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _totalfreemoneys));
            }

            return dtExcel;
        }
        #endregion

        #region ReportCardProcessDetail
        public List<ReportCardProcess> ReportCardProcessDetail(string KeyWord, List<string> customerGroupId, string _fromdate, string _todate, string CardGroupID, string Actions, string UserID, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            //tblCardProcess
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY [Date] desc) AS RowNumber,cu.CustomerName,cu.[Address],cu.[CustomerGroupID],c.*,ca.Plate1 as Plate,ca.CardNo");
            query.AppendLine("FROM dbo.[tblCardProcess] c WITH (NOLOCK)");
            //query.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(nvarchar(255), cg.CardGroupID)");
            //query.AppendLine("LEFT JOIN tblUser u on c.UserID = CONVERT(nvarchar(255), u.UserID)");
            query.AppendLine("LEFT JOIN tblCard ca ON c.CardNumber = ca.CardNumber AND ca.IsDelete = 0");
            query.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(nvarchar(255),cu.CustomerID) --AND (c.Actions='RELEASE' OR c.Actions='RETURN')");
            query.AppendLine("WHERE 1 = 1");
            query.AppendLine(string.Format("AND c.[Date] >= '{0}' AND c.[Date] <= '{1}'", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (customerGroupId.Any())
            {
                query.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in customerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == customerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(Actions))
                query.AppendLine(string.Format("AND c.[Actions] = '{0}'", Actions));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND c.[CardNumber] LIKE '%{0}%'", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(Id) totalCount");
            query.AppendLine("FROM dbo.[tblCardProcess] c WITH (NOLOCK)");
            //query.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(nvarchar(255), cg.CardGroupID)");
            //query.AppendLine("LEFT JOIN tblUser u on c.UserID = CONVERT(nvarchar(255), u.UserID)");
            query.AppendLine("LEFT JOIN tblCard ca ON c.CardNumber = ca.CardNumber AND ca.IsDelete = 0");
            query.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(nvarchar(255),cu.CustomerID) --AND (c.Actions='RELEASE' OR c.Actions='RETURN')");
            query.AppendLine("WHERE 1 = 1");
            query.AppendLine(string.Format("AND c.[Date] >= '{0}' AND c.[Date] <= '{1}'", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Actions))
                query.AppendLine(string.Format("AND c.[Actions] = '{0}'", Actions));

            if (customerGroupId.Any())
            {
                query.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in customerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == customerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND c.[CardNumber] LIKE '%{0}%'", KeyWord));


            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportCardProcess>(list.Tables[0]);
        }
        public DataTable ReportCardProcessDetail_Excel(string KeyWord, List<string> customerGroupId, string _fromdate, string _todate, string CardGroupID, string Actions, string UserID, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY [Date] desc) AS STT, (select convert(varchar(10), c.[Date], 103) + ' ' + left(convert(varchar(32), c.[Date], 108), 8)) as 'Thời gian', ca.CardNo, c.CardNumber as 'Mã thẻ', cg.CardGroupName as 'Nhóm thẻ', c.Actions as 'Hành vi',cu.CustomerName as 'Chủ thẻ', '' as 'Nhóm KH',cu.[Address] as 'Địa chỉ' ,  CAST( CASE WHEN ca.[Plate2] <> '' THEN ca.[Plate1]+'_'+ca.Plate2 WHEN ca.Plate3 <> '' THEN ca.[Plate1]+'_'+ca.Plate2+'_'+ca.Plate3 ELSE ca.[Plate1] END AS nvarchar(50)) as 'Biển số', u.UserName as 'NV thực hiện',cu.[CustomerGroupID]");

            query.AppendLine("FROM dbo.[tblCardProcess] c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(nvarchar(255), cg.CardGroupID)");
            query.AppendLine("LEFT JOIN tblUser u on c.UserID = CONVERT(nvarchar(255), u.UserID)");
            query.AppendLine("LEFT JOIN tblCard ca ON c.CardNumber = ca.CardNumber AND ca.IsDelete = 0");
            query.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(nvarchar(255),cu.CustomerID) AND (c.Actions='RELEASE' OR c.Actions='RETURN')");

            query.AppendLine("WHERE 1 = 1");

            query.AppendLine(string.Format("AND c.[Date] >= '{0}' AND c.[Date] <= '{1}'", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.UserID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Actions))
                query.AppendLine(string.Format("AND c.[Actions] = '{0}'", Actions));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND c.[CardNumber] LIKE '%{0}%'", KeyWord));

            if (customerGroupId.Any())
            {
                query.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in customerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == customerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            var dtevent = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

            if (dtevent != null && dtevent.Rows.Count > 0)
            {

                foreach (DataRow item in dtevent.Rows)
                {
                    if (!string.IsNullOrWhiteSpace(item["CustomerGroupID"].ToString()))
                    {
                        var customerGroup = _tblCustomerGroupService.GetById(Guid.Parse(item["CustomerGroupID"].ToString()));
                        if (customerGroup != null)
                        {
                            item["Nhóm KH"] = customerGroup.CustomerGroupName;
                        }
                        else
                        {
                            item["Nhóm KH"] = "";
                        }
                    }

                    switch (item["Hành vi"].ToString())
                    {
                        case "ADD":
                            item["Hành vi"] = "Thêm thẻ";
                            break;
                        case "DELETE":
                            item["Hành vi"] = "Xóa thẻ";
                            break;
                        case "CHANGE":
                            item["Hành vi"] = "Đổi thẻ";
                            break;
                        case "RELEASE":
                            item["Hành vi"] = "Phát thẻ";
                            break;
                        case "RETURN":
                            item["Hành vi"] = "Trả thẻ";
                            break;
                        case "LOCK":
                            item["Hành vi"] = "Khóa thẻ";
                            break;
                        case "UNLOCK":
                            item["Hành vi"] = "Mở thẻ";
                            break;
                        default:
                            item["Hành vi"] = "";
                            break;
                    }

                }
                dtevent.Columns.Remove("CustomerGroupID");
            }

            return dtevent;
        }
        #endregion

        #region ReportCardProcess
        public DataTable ReportCardProcess(string _fromdate, string _todate, string CardGroupID)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dtcardgroup = new DataTable();
            DataTable dt = new DataTable();
            dt.Columns.Add("RowNumber", typeof(string));
            dt.Columns.Add("CardGroupID", typeof(string));
            dt.Columns.Add("ADD", typeof(string));
            dt.Columns.Add("RELEASE", typeof(string));
            dt.Columns.Add("CHANGE", typeof(string));
            dt.Columns.Add("RETURN", typeof(string));
            dt.Columns.Add("LOCK", typeof(string));
            dt.Columns.Add("UNLOCK", typeof(string));
            dt.Columns.Add("DELETE", typeof(string));
            dt.Columns.Add("ACTIVE", typeof(string));

            if (!string.IsNullOrEmpty(CardGroupID))
            {
                var g = new StringBuilder();
                g.AppendLine("select CardGroupID from tblCardGroup where Inactive=0 and CardGroupID IN (");

                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                var count = 0;
                foreach (var item in t)
                {
                    count++;

                    g.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                }


                g.AppendLine(") ");

                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var m = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (m.Any())
                    {
                        var count1 = 0;

                        g.AppendLine("and CardGroupID IN ( ");

                        foreach (var item in m)
                        {
                            count1++;

                            g.AppendLine(string.Format("'{0}'{1}", item, count1 == m.Length ? "" : ","));
                        }

                        g.AppendLine(" )");
                    }
                }

                g.AppendLine("order by SortOrder");

                dtcardgroup = Data.SqlHelper.ExcuteSQL.GetDataSet(g.ToString(), false).Tables[0];
            }
            else
            {
                var g = new StringBuilder();

                g.AppendLine("select CardGroupID from tblCardGroup where Inactive=0");

                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var m = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (m.Any())
                    {
                        var count1 = 0;

                        g.AppendLine("and CardGroupID IN ( ");

                        foreach (var item in m)
                        {
                            count1++;

                            g.AppendLine(string.Format("'{0}'{1}", item, count1 == m.Length ? "" : ","));
                        }

                        g.AppendLine(" )");
                    }
                }

                g.AppendLine("order by SortOrder");

                dtcardgroup = Data.SqlHelper.ExcuteSQL.GetDataSet(g.ToString(), false).Tables[0];
            }

            if (dtcardgroup != null && dtcardgroup.Rows.Count > 0)
            {
                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    int _add = 0;
                    int _release = 0;
                    int _change = 0;
                    int _return = 0;
                    int _lock = 0;
                    int _unlock = 0;
                    int _delete = 0;
                    int _active = 0;

                    DataTable temp = Data.SqlHelper.ExcuteSQL.GetDataSet("select * from tblCardProcess where" +
                        " Date>='" + _fromdate +
                        "' and Date<='" + _todate +
                        "' and CardGroupID='" + dr["CardGroupID"].ToString() +
                        "'", false).Tables[0];

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        foreach (DataRow dtr in temp.Rows)
                        {
                            if (dtr["Actions"].ToString() == "ADD")
                                _add++;
                            else if (dtr["Actions"].ToString() == "RELEASE")
                                _release++;
                            else if (dtr["Actions"].ToString() == "CHANGE")
                                _change++;
                            else if (dtr["Actions"].ToString() == "RETURN")
                                _return++;
                            else if (dtr["Actions"].ToString() == "LOCK")
                                _lock++;
                            else if (dtr["Actions"].ToString() == "UNLOCK")
                                _unlock++;
                            else if (dtr["Actions"].ToString() == "DELETE")
                                _delete++;
                            else if (dtr["Actions"].ToString() == "ACTIVE")
                                _active++;
                        }
                    }

                    var cardgroupname = "";
                    if (!string.IsNullOrEmpty(dr["CardGroupID"].ToString()) && !dr["CardGroupID"].ToString().Equals("0"))
                    {
                        var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));
                        if (_cardgroup != null)
                        {
                            cardgroupname = _cardgroup.CardGroupName;
                        }
                        else
                        {
                            cardgroupname = "";
                        }
                    }


                    dt.Rows.Add(dt.Rows.Count + 1, cardgroupname, _add, _release, _change, _return, _lock, _unlock, _delete, _active);
                }
            }

            return dt;
        }
        #endregion

        #region ReportCardExpired
        public List<ReportCardExpire> GetReportCardExpired(string KeyWord, string _fromdate, string _todate, string CardGroupID, string CustomerID, int pageIndex, int pageSize, ref int total, string IsAlmostExpired = "0")
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                _fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            //tblCard
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY c.[ExpireDate] desc) AS RowNumber, c.[CardNo], c.[CardNumber],'' as Plate, c.[Plate1], c.[Plate2], c.[Plate3], c.[ExpireDate], c.[CardGroupID], cg.CardGroupName, c.[CustomerID], cu.[CustomerCode], cu.[CustomerName], cu.[Address], cu.[Mobile]");
            query.AppendLine("FROM dbo.[tblCard] c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(nvarchar(255), cg.CardGroupID)");
            query.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(nvarchar(255), cu.CustomerID)");

            query.AppendLine("WHERE c.[IsDelete] = 0");

            if (IsAlmostExpired == "0")
            {
                var dh = Convert.ToDateTime(_fromdate).AddDays(15).ToString("yyyy/MM/dd HH:mm:ss");

                query.AppendLine(string.Format("AND c.[ExpireDate] >= '{0}' AND c.[ExpireDate] <= '{1}'", _fromdate, dh));
            }
            else
            {
                var dh = Convert.ToDateTime(_fromdate).AddDays(-1).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and c.[ExpireDate] <= '{0}' ", dh));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND c.[CustomerID] = '{0}'", CustomerID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (c.[CardNumber] LIKE '%{0}%' OR c.[CardNo] LIKE '%{0}%' OR c.[Plate1] LIKE '%{0}%' OR c.[Plate2] LIKE '%{0}%' OR c.[Plate3] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            query.AppendLine("SELECT COUNT( c.CardID) totalCount");
            query.AppendLine("FROM dbo.[tblCard] c WITH (NOLOCK)");
            query.AppendLine("WHERE c.[IsDelete] = 0");

            if (IsAlmostExpired == "0")
            {
                var dh = Convert.ToDateTime(_fromdate).AddDays(15).ToString("yyyy/MM/dd HH:mm:ss");

                query.AppendLine(string.Format("AND c.[ExpireDate] >= '{0}' AND c.[ExpireDate] <= '{1}'", _fromdate, dh));
            }
            else
            {
                var dh = Convert.ToDateTime(_fromdate).AddDays(-1).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and c.[ExpireDate] <= '{0}' ", dh));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND c.[CustomerID] = '{0}'", CustomerID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (c.[CardNumber] LIKE '%{0}%' OR c.[CardNo] LIKE '%{0}%' OR c.[Plate1] LIKE '%{0}%' OR c.[Plate2] LIKE '%{0}%' OR c.[Plate3] LIKE '%{0}%')", KeyWord));

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportCardExpire>(list.Tables[0]);
        }

        public DataTable GetReportCardExpiredExcel(string KeyWord, string _fromdate, string _todate, string CardGroupID, string CustomerID, int pageIndex, int pageSize, string IsAlmostExpired = "0")
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                _fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }

            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            //tblCard
            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY c.[ExpireDate] desc) AS STT, c.[CardNo] as 'Số thẻ', c.[CardNumber] as 'Mã thẻ', c.[Plate1] as 'Biển số 1', c.[Plate2] as 'Biển số 2', c.[Plate3] as 'Biển số 3', (SELECT CONVERT(varchar(19), c.[ExpireDate], 103)) as 'Ngày hết hạn', cg.CardGroupName as 'Nhóm thẻ', cu.CustomerCode as 'Mã khách hàng', cu.CustomerName as 'Tên KH', cu.[Address] as 'Địa chỉ', cu.[Mobile] as 'SĐT'");
            query.AppendLine("FROM dbo.[tblCard] c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(nvarchar(255), cg.CardGroupID)");
            query.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(nvarchar(255), cu.CustomerID)");

            query.AppendLine("WHERE c.[IsDelete] = 0");

            if (IsAlmostExpired == "0")
            {
                var dh = Convert.ToDateTime(_fromdate).AddDays(15).ToString("yyyy/MM/dd HH:mm:ss");

                query.AppendLine(string.Format("AND c.[ExpireDate] >= '{0}' AND c.[ExpireDate] <= '{1}'", _fromdate, dh));
            }
            else
            {
                var dh = Convert.ToDateTime(_fromdate).AddDays(-1).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and c.[ExpireDate] <= '{0}' ", dh));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("AND c.[CustomerID] = '{0}'", CustomerID));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (c.[CardNumber] LIKE '%{0}%' OR c.[CardNo] LIKE '%{0}%' OR c.[Plate1] LIKE '%{0}%' OR c.[Plate2] LIKE '%{0}%' OR c.[Plate3] LIKE '%{0}%')", KeyWord));
            //query.AppendLine(") as C1");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));
            return Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString()).Tables[0];
        }
        #endregion

        #region #9

        #region ReportCustomerList
        public List<ReportCustomerList> GetCustomerList(string KeyWord, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total)
        {
            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY c.SortOrder desc) AS RowNumber, c.CustomerID, c.[CustomerCode],g.CustomerGroupName, c.[CustomerName], c.[Address], c.[Mobile], '' as CardGroupName, '' as CardNo, '' as CardNumber, '' as Plate, '' as [ExpireDate], '' as ImportDate,'' as IsLock");
            query.AppendLine("FROM tblCustomer c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCustomerGroup g On c.CustomerGroupID = CONVERT(varchar(255),g.CustomerGroupID)");
            //query.AppendLine("LEFT JOIN tblCompartment p On c.CompartmentID = CONVERT(varchar(255),p.CompartmentID)");
            query.AppendLine("where 1 = 1");

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(") ");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (c.CustomerName LIKE N'%{0}%' or c.CustomerCode LIKE '%{0}%' or c.Mobile LIKE N'%{0}%')", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //COUNT TOTALRECORD
            query.AppendLine("SELECT COUNT(*) totalCount");
            query.AppendLine("FROM tblCustomer c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCustomerGroup g On c.CustomerGroupID = CONVERT(varchar(255),g.CustomerGroupID)");
            //query.AppendLine("LEFT JOIN tblCompartment p On c.CompartmentID = CONVERT(varchar(255),p.CompartmentID)");
            query.AppendLine("where 1 = 1");
            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(") ");
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (c.CustomerName LIKE N'%{0}%' or c.CustomerCode LIKE '%{0}%' or c.Mobile LIKE N'%{0}%')", KeyWord));

            var dtCus = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

            var strListId = "";
            foreach (DataRow item in dtCus.Rows)
            {
                strListId += item["CustomerID"] + ",";
            }
            var dtCard = GetCardByCustomerWithGroup(strListId);

            foreach (DataRow iCus in dtCus.Rows)
            {
                var cardNo = "";
                var cardNumber = "";
                var plate = "";
                var _state = "";
                var drCard = dtCard.Select(string.Format("CustomerID = '{0}'", iCus["CustomerID"].ToString()));
                if (drCard.Length > 0)
                {
                    foreach (DataRow item in drCard)
                    {
                        // cardNo
                        if (cardNo == "")
                            cardNo = item["CardNo"].ToString();
                        else
                            cardNo = cardNo + ";" + item["CardNo"].ToString();

                        // cardNo
                        if (cardNumber == "")
                            cardNumber = item["CardNumber"].ToString();
                        else
                            cardNumber = cardNumber + ";" + item["CardNumber"].ToString();

                        //plate
                        var _plate = item["Plate1"].ToString();
                        if (item["Plate2"].ToString() != "")
                            _plate = _plate + "_" + item["Plate2"].ToString();
                        if (item["Plate3"].ToString() != "")
                            _plate = _plate + "_" + item["Plate3"].ToString();

                        if (plate == "")
                            plate = _plate;
                        else
                            plate = plate + ";" + _plate;

                        _state = bool.Parse(item["IsLock"].ToString()) == true ? "Đang khóa" : "Đang hoạt động";
                        iCus["ExpireDate"] = Convert.ToDateTime(item["ExpireDate"].ToString()).ToString("dd/MM/yyyy");
                        iCus["ImportDate"] = Convert.ToDateTime(item["ImportDate"].ToString()).ToString("dd/MM/yyyy");
                        iCus["CardGroupName"] = item["CardGroupName"].ToString();
                    }

                    iCus["CardNo"] = cardNo;
                    iCus["CardNumber"] = cardNumber;
                    iCus["Plate"] = plate;
                    iCus["IsLock"] = _state;
                }
            }

            var lst = Data.SqlHelper.ExcuteSQL.ConvertTo<ReportCustomerList>(dtCus);

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return lst;
        }
        public DataTable GetCustomerList_Excel(string KeyWord, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total)
        {
            var query = new StringBuilder();
            //query.AppendLine("");
            //query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY c.SortOrder desc) AS STT, c.[CustomerCode] as 'Mã KH',g.CustomerGroupName as 'Nhóm KH', c.[CustomerName] as 'Tên KH', c.[Address] as 'Địa chỉ', c.[Mobile] as 'Điện thoại', '' as 'Nhóm thẻ', '' as CardNo, '' as 'Mã thẻ', '' as 'Biển số', '' as 'Ngày hết hạn', '' as 'Ngày nhập thẻ','' as 'Trạng thái', c.CustomerID");
            query.AppendLine("FROM tblCustomer c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCustomerGroup g On c.CustomerGroupID = CONVERT(varchar(255),g.CustomerGroupID)");
            //query.AppendLine("LEFT JOIN tblCompartment p On c.CompartmentID = CONVERT(varchar(255),p.CompartmentID)");
            query.AppendLine("where 1 = 1");

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (c.CustomerName LIKE N'%{0}%' or c.CustomerCode LIKE '%{0}%' or c.Mobile LIKE N'%{0}%')", KeyWord));

            //query.AppendLine(") as a");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            var dtCus = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
            var strListId = "";
            foreach (DataRow item in dtCus.Rows)
            {
                strListId += item["CustomerID"] + ",";
            }
            var dtCard = GetCardByCustomerWithGroup(strListId);

            foreach (DataRow iCus in dtCus.Rows)
            {
                var cardNo = "";
                var cardNumber = "";
                var plate = "";
                var _state = "";
                var drCard = dtCard.Select(string.Format("CustomerID = '{0}'", iCus["CustomerID"].ToString()));
                if (drCard.Length > 0)
                {
                    foreach (DataRow item in drCard)
                    {
                        // cardNo
                        if (cardNo == "")
                            cardNo = item["CardNo"].ToString();
                        else
                            cardNo = cardNo + ";" + item["CardNo"].ToString();

                        // cardNo
                        if (cardNumber == "")
                            cardNumber = item["CardNumber"].ToString();
                        else
                            cardNumber = cardNumber + ";" + item["CardNumber"].ToString();

                        //plate
                        var _plate = item["Plate1"].ToString();
                        if (item["Plate2"].ToString() != "")
                            _plate = _plate + "_" + item["Plate2"].ToString();
                        if (item["Plate3"].ToString() != "")
                            _plate = _plate + "_" + item["Plate3"].ToString();

                        if (plate == "")
                            plate = _plate;
                        else
                            plate = plate + ";" + _plate;

                        _state = bool.Parse(item["IsLock"].ToString()) == true ? "Đang khóa" : "Đang hoạt động";
                        iCus["Ngày hết hạn"] = Convert.ToDateTime(item["ExpireDate"].ToString()).ToString("dd/MM/yyyy");
                        iCus["Ngày nhập thẻ"] = !string.IsNullOrEmpty(item["ImportDate"].ToString()) ? Convert.ToDateTime(item["ImportDate"].ToString()).ToString("dd/MM/yyyy") : DateTime.Now.ToString("dd/MM/yyyy");
                        iCus["Nhóm thẻ"] = item["CardGroupName"].ToString();
                    }

                    iCus["CardNo"] = cardNo;
                    iCus["Mã thẻ"] = cardNumber;
                    iCus["Biển số"] = plate;
                    iCus["Trạng thái"] = _state;
                }
                iCus["CustomerID"] = DBNull.Value;
            }

            return dtCus;
        }
        #endregion

        #region ReportVehicleEvent
        public List<ReportIn> GetReportVehicleEvent(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, bool IsFilterByTimeIn)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) AS RowNumber,");
            query.AppendLine("a.[CardNo], a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[UserIDIn], a.[Moneys]");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[UserIDIn], e.[Moneys]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (IsFilterByTimeIn)
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(") as C1");



            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));
            query.AppendLine("ORDER BY [DatetimeIn] DESC");
            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) AS totalCount, SUM(a.Moneys) AS totalMoney FROM(");
            query.AppendLine("SELECT Distinct e.Id, e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (IsFilterByTimeIn)
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            dt.Columns.Add("ViTriDo", typeof(string)).SetOrdinal(9);

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;

            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (IsFilterByTimeIn)
                        dt.Rows[i]["ViTriDo"] = "TXHN";
                    else
                        dt.Rows[i]["ViTriDo"] = "XN";
                }

                //string money = "0";

                //if(_totalmoneys > 0)
                //{
                //    money = Convert.ToInt32(_totalmoneys).ToString("###.###");
                //}


                dt.Rows.Add(0, "#", "TỔNG SỐ", "", null, "", "", "", "", "", _totalmoneys);

            }
            var lst = ExcuteSQLEvent.ConvertTo<ReportIn>(dt);

            return lst;
        }
        public DataTable GetReportVehicleEvent_Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys, bool IsFilterByTimeIn)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }


            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) AS RowNumber,");
            query.AppendLine("a.[CardNo], a.[CardNumber], a.[Plate], a.[DatetimeIn], a.[CardGroupID], a.[CustomerName], a.[LaneIDIn], a.[UserIDIn], a.[Moneys]");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT Distinct e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, (select convert(varchar(10), e.DatetimeIn, 103)) as DatetimeIn, e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[UserIDIn], e.[Moneys]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (IsFilterByTimeIn)
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(") as C1");


            var dtExcel = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            dtExcel.Columns.Add("ViTriDo", typeof(string)).SetOrdinal(9);
            int tong = 0;
            if (dtExcel.Rows.Count > 0)
            {
                foreach (DataRow item in dtExcel.Rows)
                {
                    if (IsFilterByTimeIn)
                        item["ViTriDo"] = "TXHN";
                    else
                        item["ViTriDo"] = "XN";

                    if (!string.IsNullOrEmpty(item["LaneIDIn"].ToString()))
                    {
                        var lane = _tblLaneService.GetById(Guid.Parse(item["LaneIDIn"].ToString()));

                        if (lane != null)
                        {
                            item["LaneIDIn"] = lane.LaneName;
                        }
                        else
                        {
                            item["LaneIDIn"] = "";
                        }
                    }
                    else
                    {
                        item["LaneIDIn"] = "";
                    }

                    if (!string.IsNullOrEmpty(item["CardGroupID"].ToString()))
                    {
                        var cardgr = _tblCardGroupService.GetById(Guid.Parse(item["CardGroupID"].ToString()));

                        if (cardgr != null)
                        {
                            item["CardGroupID"] = cardgr.CardGroupName;
                        }
                        else
                        {
                            item["CardGroupID"] = "";
                        }
                    }
                    else
                    {
                        item["CardGroupID"] = "";
                    }

                    if (!string.IsNullOrEmpty(item["UserIDIn"].ToString()))
                    {
                        var user = _UserService.GetById(item["UserIDIn"].ToString());

                        if (user != null)
                        {
                            item["UserIDIn"] = user.Username;
                        }
                        else
                        {
                            item["UserIDIn"] = "";
                        }
                    }
                    else
                    {
                        item["UserIDIn"] = "";
                    }

                    if (!string.IsNullOrEmpty(item["Moneys"].ToString()))
                    {
                        item["Moneys"] = item["Moneys"].ToString().FormatMoney();
                        tong += Convert.ToInt32(item["Moneys"]);
                    }

                }

                string money = "0";

                if (tong > 0)
                {
                    money = Convert.ToInt32(tong).ToString("###.###");
                }


                dtExcel.Rows.Add(0, "#", "TỔNG SỐ", "", null, "", "", "", "", "", money.FormatMoney());
            }

            return dtExcel;
        }
        #endregion

        #region ReportTotalMoneyByCardEvent
        public List<string> ReportTotalMoneyByVehicleEvent(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, bool IsFilterByTimeIn)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var lstCardGroupID = new List<string>();
            var query = new StringBuilder();
            query.AppendLine("SELECT distinct a.CardGroupID FROM(");
            query.AppendLine("SELECT e.Id, e.Moneys,e.CardGroupID");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (IsFilterByTimeIn)
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow item in dt.Rows)
                {
                    if (!string.IsNullOrEmpty(item["CardGroupID"].ToString().Trim()))
                    {
                        lstCardGroupID.Add(item["CardGroupID"].ToString());
                    }

                }
            }

            return lstCardGroupID;
        }

        public DataTable GetTotalMoneysAndVehicleByCardGroup(string _fromdate, string _todate, List<string> lstCardGroupId, string TypeCardGroup, ref long TX_totalIn, ref long NotTX_totalIn, ref long TX_totalOut, ref long NotTX_totalOut, ref long TX_totalmoneys, ref long NotTX_totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();
            dt.Columns.Add("TypeCardGroup", typeof(string));
            dt.Columns.Add("CardGroupName", typeof(string));
            dt.Columns.Add("TotalVehicleIn", typeof(string));
            dt.Columns.Add("TotalVehicleOut", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var strCates = "";
            var count1 = 0;


            foreach (var item1 in lstCardGroupId)
            {
                count1++;

                strCates += string.Format("'{0}'{1}", item1, count1 == lstCardGroupId.Count ? "" : ",");
            }

            //tổng xe vào
            var cateIn = GetReportTotalVehicle_New(strCates, _fromdate, _todate, "1", TypeCardGroup);
            if (cateIn != null && cateIn.Rows.Count > 0)
            {
                if (TypeCardGroup.Equals("TX"))
                {
                    TX_totalIn = long.Parse(cateIn.Rows[0][0].ToString());
                }
                else
                {
                    NotTX_totalIn = long.Parse(cateIn.Rows[0][0].ToString());
                }
            }

            //tổng xe ra
            var cateOut = GetReportTotalVehicle_New(strCates, _fromdate, _todate, "2", TypeCardGroup);

            if (cateOut != null && cateOut.Rows.Count > 0)
            {
                if (TypeCardGroup.Equals("TX"))
                {
                    TX_totalOut = long.Parse(cateOut.Rows[0][0].ToString());
                }
                else
                {
                    NotTX_totalOut = long.Parse(cateOut.Rows[0][0].ToString());
                }

            }

            foreach (var item in lstCardGroupId)
            {
                //số xe vào
                long _totalNumIn = 0;
                var numIn = GetReportTotalVehicleByCardGroup_New(item, _fromdate, _todate, "1", TypeCardGroup);

                if (numIn != null && numIn.Rows.Count > 0)
                {
                    if (numIn.Rows[0][0].ToString() != "")
                    {
                        _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                    }
                }

                //số xe ra
                long _totalNumOut = 0;
                var numOut = GetReportTotalVehicleByCardGroup_New(item, _fromdate, _todate, "2", TypeCardGroup);

                if (numOut != null && numOut.Rows.Count > 0)
                {
                    if (numOut.Rows[0][0].ToString() != "")
                    {
                        _totalNumOut = long.Parse(numOut.Rows[0][0].ToString());
                    }
                }

                //doanh thu
                long _moneys = 0;
                var temp = GetReportTotalMoneyByCardGroup_New(item, _fromdate, _todate, TypeCardGroup);

                if (temp != null && temp.Rows.Count > 0)
                {
                    if (temp.Rows[0][0].ToString() != "")
                    {
                        _moneys = long.Parse(temp.Rows[0][0].ToString());
                        //tổng doanh thu
                        if (TypeCardGroup.Equals("TX"))
                        {
                            TX_totalmoneys = TX_totalmoneys + _moneys;
                        }
                        else
                        {
                            NotTX_totalmoneys = NotTX_totalmoneys + _moneys;
                        }

                    }
                }

                var cardgroup = _tblCardGroupService.GetById(Guid.Parse(item));

                dt.Rows.Add(TypeCardGroup, cardgroup != null ? cardgroup.CardGroupName : "", _totalNumIn, _totalNumOut, string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneys));
            }
            return dt;
        }

        public DataTable GetReportTotalVehicle_New(string CardGroupIDs, string _fromdate, string _todate, string eventcode, string TX)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT COUNT(e.[Id]) AS TotalVehicle FROM tblCardEvent e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (TX.Equals("TX"))
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1");

            if (eventcode.Equals("1"))
            {
                query.AppendLine(string.Format("AND e.[DateTimeIn] >= '{0}' AND e.[DateTimeIn] <= '{1}'", _fromdate, _todate));
            }
            else
            {
                query.AppendLine(string.Format("AND e.[DateTimeOut] >= '{0}' AND e.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            }

            if (!string.IsNullOrEmpty(CardGroupIDs))
            {
                query.AppendLine(string.Format("AND e.[CardGroupID] IN ({0})", CardGroupIDs));
            }

            //query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        public DataTable GetReportTotalVehicleByCardGroup_New(string CardGroupID, string _fromdate, string _todate, string eventcode, string TX)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT COUNT(e.[Id]) AS TotalVehicle FROM tblCardEvent e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (TX.Equals("TX"))
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1");

            if (eventcode.Equals("1"))
            {
                query.AppendLine(string.Format("AND e.[DateTimeIn] >= '{0}' AND e.[DateTimeIn] <= '{1}'", _fromdate, _todate));
            }
            else
            {
                query.AppendLine(string.Format("AND e.[DateTimeOut] >= '{0}' AND e.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            //query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        public DataTable GetReportTotalMoneyByCardGroup_New(string CardGroupID, string _fromdate, string _todate, string TX)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT SUM(e.[Moneys]) AS TotalMoney FROM tblCardEvent e WITH (NOLOCK)");

            query.AppendLine("INNER JOIN [MPARKING].dbo.tblCardGroup cg ON cg.CardGroupID = e.CardGroupID");

            if (TX.Equals("TX"))
            {
                query.AppendLine("INNER JOIN dbo.[tblChangeEvent] ce ON ce.[EventID] = CONVERT(varchar(255), e.[Id])");
                query.AppendLine("WHERE e.[IsDelete] = 0 AND ce.[IsDelete] = 0");
            }
            else
            {
                query.AppendLine("WHERE e.[IsDelete] = 0 and  CONVERT(varchar(255), e.[Id]) NOT IN (SELECT ce.[EventID] FROM dbo.[tblChangeEvent] ce Where ce.[IsDelete] = 0)");
            }

            query.AppendLine("AND e.[IsFree] = 0 AND e.[Moneys] > 0 AND cg.[CardType] = 1 AND e.[EventCode] = '2'");

            query.AppendLine(string.Format("AND e.[DateTimeOut] >= '{0}' AND e.[DateTimeOut] <= '{1}'", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }


        #endregion

        #region ReportTotalMoneyAndVehicleByCardGroup
        public DataTable GetReportTotalMoneyAndVehicleByCardGroup(string CardGroupID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();

            var _strCardGroupId = new List<string>();


            //danh sách cardgroupid
            if (!string.IsNullOrEmpty(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                if (t.Any())
                {
                    foreach (var item in t)
                    {
                        _strCardGroupId.Add(item);
                    }

                }
            }
            else
            {
                var dtCardGroup = Data.SqlHelper.ExcuteSQL.GetDataSet("select CardGroupName, CardGroupID from tblCardGroup order by SortOrder", false).Tables[0];
                if (dtCardGroup != null && dtCardGroup.Rows.Count > 0)
                {
                    foreach (DataRow item in dtCardGroup.Rows)
                    {
                        if (!string.IsNullOrEmpty(item["CardGroupID"].ToString().Trim()))
                        {
                            _strCardGroupId.Add(item["CardGroupID"].ToString());
                        }

                    }
                }
            }

            dt.Columns.Add("CardGroupName", typeof(string));
            dt.Columns.Add("TotalVehicleIn", typeof(string));
            dt.Columns.Add("TotalVehicleOut", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var strCates = "";
            var count1 = 0;
            //long _totalmoneys = 0;
            //long _totalIn = 0;
            //long _totalOut = 0;

            foreach (var item1 in _strCardGroupId)
            {
                count1++;

                strCates += string.Format("'{0}'{1}", item1, count1 == _strCardGroupId.Count ? "" : ",");
            }

            //tổng xe vào
            var cateIn = GetReportTotalVehicle(strCates, _fromdate, _todate, "1");
            if (cateIn != null && cateIn.Rows.Count > 0)
            {
                _totalIn = long.Parse(cateIn.Rows[0][0].ToString());
            }

            //tổng xe ra
            var cateOut = GetReportTotalVehicle(strCates, _fromdate, _todate, "2");
            if (cateOut != null && cateOut.Rows.Count > 0)
            {
                _totalOut = long.Parse(cateOut.Rows[0][0].ToString());
            }

            foreach (var item in _strCardGroupId)
            {
                //số xe vào
                long _totalNumIn = 0;
                var numIn = GetReportTotalVehicleByCardGroup(item, _fromdate, _todate, "1");

                if (numIn != null && numIn.Rows.Count > 0)
                {
                    if (numIn.Rows[0][0].ToString() != "")
                    {
                        _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                    }
                }

                //số xe ra
                long _totalNumOut = 0;
                var numOut = GetReportTotalVehicleByCardGroup(item, _fromdate, _todate, "2");

                if (numOut != null && numOut.Rows.Count > 0)
                {
                    if (numOut.Rows[0][0].ToString() != "")
                    {
                        _totalNumOut = long.Parse(numOut.Rows[0][0].ToString());
                    }
                }

                //doanh thu
                long _moneys = 0;
                var temp = GetTotalMoneyByCardGroup(item, _fromdate, _todate);

                if (temp != null && temp.Rows.Count > 0)
                {
                    if (temp.Rows[0][0].ToString() != "")
                    {
                        _moneys = long.Parse(temp.Rows[0][0].ToString());
                        //tổng doanh thu
                        _totalmoneys = _totalmoneys + _moneys;
                    }
                }
                var cardgroup = _tblCardGroupService.GetById(Guid.Parse(item));

                dt.Rows.Add(cardgroup != null ? cardgroup.CardGroupName : "", _totalNumIn, _totalNumOut, string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneys));
            }

            return dt;
        }

        public DataTable GetReportTotalVehicle(string CardGroupIDs, string _fromdate, string _todate, string eventcode)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT COUNT(ce.[Id]) AS TotalVehicle FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");

            if (eventcode.Equals("1"))
            {
                query.AppendLine(string.Format("AND ce.[DateTimeIn] >= '{0}' AND ce.[DateTimeIn] <= '{1}'", _fromdate, _todate));
            }
            else
            {
                query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            }

            query.AppendLine(string.Format("AND ce.[CardGroupID] IN ({0})", CardGroupIDs));
            //query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        public DataTable GetReportTotalVehicleByCardGroup(string CardGroupID, string _fromdate, string _todate, string eventcode)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT COUNT(ce.[Id]) AS TotalVehicle FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");

            if (eventcode.Equals("1"))
            {
                query.AppendLine(string.Format("AND ce.[DateTimeIn] >= '{0}' AND ce.[DateTimeIn] <= '{1}'", _fromdate, _todate));
            }
            else
            {
                query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            }

            query.AppendLine(string.Format("AND ce.[CardGroupID] = '{0}'", CardGroupID));
            //query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        public DataTable GetTotalMoneyByCardGroup(string CardGroupID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND ce.[CardGroupID] = '{0}'", CardGroupID));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #region ReportTotalByCardGroup
        public DataTable GetReportTotalByCardGroup(string CardGroupID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("CardGroupName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            long _totalmoneys = 0;
            long _totalIn = 0;
            long _totalOut = 0;

            var query = new StringBuilder();

            query.AppendLine("select CardGroupName, CardGroupID from tblCardGroup WITH(NOLOCK) ");

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("where CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");
                }
            }

            query.AppendLine("order by SortOrder");

            var dtcardgroup = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

            if (dtcardgroup != null && dtcardgroup.Rows.Count > 0)
            {
                //Danh sách category
                var strCates = "";
                var count1 = 0;
                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    count1++;

                    strCates += string.Format("'{0}'{1}", dr["CardGroupID"].ToString(), count1 == dtcardgroup.Rows.Count ? "" : ",");
                }

                #region Xe vào
                //Xe vào
                var cateIn = GetReportTotalVehicle(strCates, _fromdate, _todate, "1");
                if (cateIn != null && cateIn.Rows.Count > 0)
                {
                    _totalIn = long.Parse(cateIn.Rows[0][0].ToString());
                }

                dt.Rows.Add("TỔNG SỐ XE VÀO", _totalIn);

                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    long _totalNumIn = 0;
                    var numIn = GetReportTotalVehicleByCardGroup(dr["CardGroupID"].ToString(), _fromdate, _todate, "1");

                    if (numIn != null && numIn.Rows.Count > 0)
                    {
                        if (numIn.Rows[0][0].ToString() != "")
                        {
                            _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                        }
                    }

                    var cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));

                    dt.Rows.Add(cardgroup != null ? cardgroup.CardGroupName : "", _totalNumIn);
                }

                dt.Rows.Add("", "");
                #endregion

                #region Xe ra
                //Xe ra
                var cateOut = GetReportTotalVehicle(strCates, _fromdate, _todate, "2");
                if (cateOut != null && cateOut.Rows.Count > 0)
                {
                    _totalOut = long.Parse(cateOut.Rows[0][0].ToString());
                }

                dt.Rows.Add("TỔNG SỐ XE RA", _totalOut);

                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    long _totalNumIn = 0;
                    var numIn = GetReportTotalVehicleByCardGroup(dr["CardGroupID"].ToString(), _fromdate, _todate, "2");

                    if (numIn != null && numIn.Rows.Count > 0)
                    {
                        if (numIn.Rows[0][0].ToString() != "")
                        {
                            _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                        }
                    }
                    var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));

                    dt.Rows.Add(_cardgroup != null ? _cardgroup.CardGroupName : "", _totalNumIn);
                }

                dt.Rows.Add("", "");
                #endregion

                #region Doanh thu
                //Doanh thu
                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    long _moneys = 0;
                    var temp = GetTotalMoneyByCardGroup(dr["CardGroupID"].ToString(), _fromdate, _todate);

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = long.Parse(temp.Rows[0][0].ToString());
                            _totalmoneys = _totalmoneys + _moneys;
                        }
                    }
                }

                if (SystemUsingLoop() == true)
                {
                    if (CardGroupID == "" || CardGroupID == "LOOP_D" || CardGroupID == "LOOP_M")
                    {
                        string[] cartypes = new string[] { "LOOP_D", "LOOP_M" };
                        for (int i = 0; i < cartypes.Length; i++)
                        {
                            if (CardGroupID != "" && CardGroupID != cartypes[i])
                                continue;
                            long _moneys = 0;
                            var sb1 = new StringBuilder();

                            sb1.AppendLine("select sum(Moneys) from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0");

                            if (!string.IsNullOrEmpty(_fromdate))
                            {
                                sb1.AppendLine(string.Format(" and DateTimeOut>='{0}'", _fromdate));
                            }
                            if (!string.IsNullOrEmpty(_todate))
                            {
                                sb1.AppendLine(string.Format(" and DateTimeOut<='{0}'", _todate));
                            }

                            sb1.AppendLine(string.Format(" and CarType LIKE '%{0}%'", cartypes[i]));

                            //Nhom the
                            if (!string.IsNullOrWhiteSpace(CardGroupID))
                            {
                                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;

                                    query.AppendLine(" and CarType IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" ) ");
                                }
                            }

                            DataTable temp = ExcuteSQLEvent.GetDataSet(sb1.ToString(), false).Tables[0];

                            //DataTable temp = StaticPool.mdbevent.FillData("select sum(Moneys) from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0" +
                            //    " and DateTimeOut>='" + _fromdate +
                            //    "' and DateTimeOut<='" + _todate +
                            //    "' and CarType LIKE '%" + cartypes[i] + "%'" +
                            //    " and CarType LIKE '%" + CardGroupID + "%'");
                            if (temp != null && temp.Rows.Count > 0)
                            {

                                if (temp.Rows[0][0].ToString() != "")
                                {
                                    _moneys = long.Parse(temp.Rows[0][0].ToString());
                                    _totalmoneys = _totalmoneys + _moneys;
                                }
                            }
                        }
                    }
                }

                dt.Rows.Add("TỔNG DOANH THU", string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _totalmoneys));

                foreach (DataRow dr in dtcardgroup.Rows)
                {
                    long _moneys = 0;
                    var temp = GetTotalMoneyByCardGroup(dr["CardGroupID"].ToString(), _fromdate, _todate);

                    if (temp != null && temp.Rows.Count > 0)
                    {
                        if (temp.Rows[0][0].ToString() != "")
                        {
                            _moneys = long.Parse(temp.Rows[0][0].ToString());
                        }
                    }

                    var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));

                    dt.Rows.Add(_cardgroup != null ? _cardgroup.CardGroupName : "", string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneys));
                }

                if (SystemUsingLoop() == true)
                {
                    if (CardGroupID == "" || CardGroupID == "LOOP_D" || CardGroupID == "LOOP_M")
                    {
                        string[] cartypes = new string[] { "LOOP_D", "LOOP_M" };
                        for (int i = 0; i < cartypes.Length; i++)
                        {
                            if (CardGroupID != "" && CardGroupID != cartypes[i])
                                continue;
                            long _moneys = 0;

                            var sb2 = new StringBuilder();

                            sb2.AppendLine("select sum(Moneys) from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0");

                            if (!string.IsNullOrEmpty(_fromdate))
                            {
                                sb2.AppendLine(string.Format(" and DateTimeOut>='{0}'", _fromdate));
                            }
                            if (!string.IsNullOrEmpty(_todate))
                            {
                                sb2.AppendLine(string.Format(" and DateTimeOut<='{0}'", _todate));
                            }

                            sb2.AppendLine(string.Format(" and CarType LIKE '%{0}%'", cartypes[i]));

                            //Nhom the
                            if (!string.IsNullOrWhiteSpace(CardGroupID))
                            {
                                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                if (t.Any())
                                {
                                    var count = 0;

                                    query.AppendLine(" and CarType IN ( ");

                                    foreach (var item in t)
                                    {
                                        count++;

                                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                                    }

                                    query.AppendLine(" ) ");
                                }
                            }

                            DataTable temp = ExcuteSQLEvent.GetDataSet(sb2.ToString(), false).Tables[0];

                            //DataTable temp = StaticPool.mdbevent.FillData("select sum(Moneys) from tblLoopEvent where EventCode='2' and IsDelete=0 and IsFree=0 and Moneys>0" +
                            //    " and DateTimeOut>='" + _fromdate +
                            //    "' and DateTimeOut<='" + _todate +
                            //    "' and CarType LIKE '%" + cartypes[i] + "%'" +
                            //    " and CarType LIKE '%" + CardGroupID + "%'");
                            if (temp != null && temp.Rows.Count > 0)
                            {

                                if (temp.Rows[0][0].ToString() != "")
                                {
                                    _moneys = long.Parse(temp.Rows[0][0].ToString());
                                }
                            }
                            var _cardgroup = new tblCardGroup();

                            if (!cartypes[i].ToString().Equals("LOOP_D") && !cartypes[i].ToString().Equals("LOOP_M"))
                            {
                                _cardgroup = _tblCardGroupService.GetById(Guid.Parse(cartypes[i]));
                            }
                            else
                            {
                                if (cartypes[i].ToString().Equals("LOOP_D"))
                                {
                                    _cardgroup.CardGroupName = "Vòng từ - Xe lượt(Loop)";
                                }
                                else
                                {
                                    _cardgroup.CardGroupName = "Vòng từ - Xe tháng(Loop)";
                                }
                            }



                            dt.Rows.Add(_cardgroup != null ? _cardgroup.CardGroupName : "", string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneys));
                        }
                    }
                }
                #endregion

            }

            return dt;
        }

        #endregion

        #region ReportCardDetailByCompartment
        public DataTable GetReportCardDetailByCompartment(string KeyWord, string UserID, string _fromdate, string _todate, string CompartmentID, bool IsFilterByTimeIn, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dt = new DataTable();
            //  dt.Columns.Add("RowNumber", typeof(string));
            dt.Columns.Add("LogID", typeof(string));
            dt.Columns.Add("CompartmentName", typeof(string));
            dt.Columns.Add("CustomerCode", typeof(string));
            dt.Columns.Add("CustomerName", typeof(string));
            dt.Columns.Add("CustomerGroup", typeof(string));
            dt.Columns.Add("CardNumber", typeof(string));
            dt.Columns.Add("CardNo", typeof(string));
            dt.Columns.Add("CardGroup", typeof(string));
            dt.Columns.Add("Plate", typeof(string));
            dt.Columns.Add("DateRegister", typeof(string));
            dt.Columns.Add("DateRelease", typeof(string));
            dt.Columns.Add("DateCanceled", typeof(string));
            dt.Columns.Add("UserID", typeof(string));

            //card
            DataTable dtevent = null;
            var query = new StringBuilder();
            if (IsFilterByTimeIn == true)
            {
                query.AppendLine(string.Format("select * from tblLogCardCustomer where (DateRegisted>='{0}' and DateRegisted<='{1}') ", _fromdate, _todate));

                if (!string.IsNullOrEmpty(KeyWord))
                    query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CustomerCode LIKE '%{0}%' or CustomerName LIKE N'%{0}%') ", KeyWord));
                //User
                if (!string.IsNullOrWhiteSpace(UserID))
                {
                    var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine(" and UserID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }
                //Compartment
                if (!string.IsNullOrWhiteSpace(CompartmentID))
                {
                    var t = CompartmentID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine(" and CompartmentID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                query.AppendLine("order by DateChanged desc");

            }
            else
            {

                query.AppendLine(string.Format("select * from tblLogCardCustomer where (DateReleased>='{0}' and DateReleased<='{1}') ", _fromdate, _todate));

                if (!string.IsNullOrEmpty(KeyWord))
                    query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CustomerCode LIKE '%{0}%' or CustomerName LIKE N'%{0}%') ", KeyWord));
                //User
                if (!string.IsNullOrWhiteSpace(UserID))
                {
                    var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine(" and UserID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }
                //Compartment
                if (!string.IsNullOrWhiteSpace(CompartmentID))
                {
                    var t = CompartmentID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine(" and CompartmentID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                query.AppendLine("order by DateChanged desc");

            }

            dtevent = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

            if (dtevent != null && dtevent.Rows.Count > 0)
            {
                int count = 0;
                foreach (DataRow dr in dtevent.Rows)
                {
                    count++;
                    string LogId = dr["ID"].ToString();

                    string _customerCode = dr["CustomerCode"].ToString();
                    string _customerName = dr["CustomerName"].ToString();

                    string _cardNumber = dr["CardNumber"].ToString();
                    string _cardNo = dr["CardNo"].ToString();

                    string _plate = dr["Plate"].ToString();

                    string _dateRegister = dr["DateRegisted"].ToString();
                    string _dateRelease = dr["DateReleased"].ToString();
                    string _dateCancele = dr["DateCanceled"].ToString();

                    var obj = _UserService.GetById(dr["UserId"].ToString());
                    var objcompartment = _tblCompartmentService.GetById(Guid.Parse(dr["CompartmentID"].ToString()));
                    var objcustomergroup = _tblCustomerGroupService.GetById(Guid.Parse(dr["CustomerGroupID"].ToString()));
                    var objcardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));

                    string _user = obj != null ? obj.Username : "";
                    string _compartmentName = objcompartment != null ? objcompartment.CompartmentName : "";
                    string _customerGroup = objcustomergroup != null ? objcustomergroup.CustomerGroupName : "";
                    string _cardGroup = objcardgroup != null ? objcardgroup.CardGroupName : "";

                    dt.Rows.Add(LogId, _compartmentName, _customerCode, _customerName, _customerGroup, _cardNumber, _cardNo, _cardGroup, _plate, _dateRegister, _dateRelease, _dateCancele, _user);
                }
            }

            return dt;
        }
        #endregion

        #region ReportCardTotalByCompartment
        public DataTable GetReportCardTotalByCompartment(string KeyWord, string UserID, string _fromdate, string _todate, string CompartmentID, bool IsFilterByTimeIn, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();
            dt.Columns.Add("RowNumber", typeof(string));
            dt.Columns.Add("CompartmentName", typeof(string));
            dt.Columns.Add("CountRegistedBicycle", typeof(string));
            dt.Columns.Add("CountLockBicycle", typeof(string));
            dt.Columns.Add("CountUseBicycle", typeof(string));
            dt.Columns.Add("CountRegistedMotorcycle", typeof(string));
            dt.Columns.Add("CountLockMotorcycle", typeof(string));
            dt.Columns.Add("CountUseMotorcycle", typeof(string));
            dt.Columns.Add("CountRegistedCar", typeof(string));
            dt.Columns.Add("CountLockCar", typeof(string));
            dt.Columns.Add("CountUseCar", typeof(string));


            //card
            DataTable dtevent = null;
            string countRegistedBicycle = "";
            string countLockBicycle = "";
            string countUseBicycle = "";
            string countRegistedMotorcycle = "";
            string countLockMotorcycle = "";
            string countUseMotorcycle = "";
            string countRegistedCar = "";
            string countLockCar = "";
            string countUseCar = "";

            if (IsFilterByTimeIn == true)
            {
                //Bicycle
                GetCommandCountByDateRegister(_fromdate, _todate, ref countRegistedBicycle, ref countLockBicycle, ref countUseBicycle, ref countRegistedMotorcycle, ref countLockMotorcycle, ref countUseMotorcycle, ref countRegistedCar, ref countLockCar, ref countUseCar);


            }
            else
            {
                GetCommandCountByDateRelease(_fromdate, _todate, ref countRegistedBicycle, ref countLockBicycle, ref countUseBicycle, ref countRegistedMotorcycle, ref countLockMotorcycle, ref countUseMotorcycle, ref countRegistedCar, ref countLockCar, ref countUseCar);
            }

            //string command = string.Format(" select distinct cm.CompartmentName, {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} from tblCompartment cm where cm.CompartmentID LIKE '%{9}%'", countRegistedBicycle, countLockBicycle, countUseBicycle, countRegistedMotorcycle, countLockMotorcycle, countUseMotorcycle, countRegistedCar, countLockCar, countUseCar, CompartmentID);

            var query = new StringBuilder();

            query.AppendLine(string.Format(" select distinct cm.CompartmentName, {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} from tblCompartment cm", countRegistedBicycle, countLockBicycle, countUseBicycle, countRegistedMotorcycle, countLockMotorcycle, countUseMotorcycle, countRegistedCar, countLockCar, countUseCar));

            if (!string.IsNullOrWhiteSpace(CompartmentID))
            {
                var t = CompartmentID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine(" where CompartmentID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            dtevent = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
            if (dtevent != null && dtevent.Rows.Count > 0)
            {
                int count = 0;
                foreach (DataRow dr in dtevent.Rows)
                {
                    count++;
                    string CompartmentName = dr["CompartmentName"].ToString();

                    string CountRegistedBicycle = dr["CountRegistedBicycle"].ToString();
                    string CountLockBicycle = dr["CountLockBicycle"].ToString();
                    string CountUseBicycle = Convert.ToString(int.Parse(dr["CountRegistedBicycle"].ToString()) - int.Parse(dr["CountLockBicycle"].ToString()));

                    string CountRegistedMotorcycle = dr["CountRegistedMotorcycle"].ToString();
                    string CountLockMotorcycle = dr["CountLockMotorcycle"].ToString();
                    string CountUseMotorcycle = Convert.ToString(int.Parse(dr["CountRegistedMotorcycle"].ToString()) - int.Parse(dr["CountLockMotorcycle"].ToString()));

                    string CountRegistedCar = dr["CountRegistedCar"].ToString();
                    string CountLockCar = dr["CountLockCar"].ToString();
                    string CountUseCar = Convert.ToString(int.Parse(dr["CountRegistedCar"].ToString()) - int.Parse(dr["CountLockCar"].ToString()));

                    dt.Rows.Add(count, CompartmentName, CountRegistedBicycle, CountLockBicycle, CountUseBicycle, CountRegistedMotorcycle, CountLockMotorcycle, CountUseMotorcycle, CountRegistedCar, CountLockCar, CountUseCar);
                }
            }
            total = dt.Rows.Count;
            return dt;
        }
        public void GetCommandCountByDateRegister(string _fromdate, string _todate, ref string registerbicycle, ref string lockbicycle, ref string usebicycle, ref string registermotor, ref string lockmotor, ref string usemotor, ref string registercar, ref string lockcar, ref string usecar)
        {
            //Bicycle
            registerbicycle = GenerateRegisterVehicleByRegisterDay("2", _fromdate, _todate, "CountRegistedBicycle");

            lockbicycle = GenerateLockVehicleByRegisterDay("2", _fromdate, _todate, "CountLockBicycle");

            usebicycle = "0";

            //Motor
            registermotor = GenerateRegisterVehicleByRegisterDay("1", _fromdate, _todate, "CountRegistedMotorcycle");

            lockmotor = GenerateLockVehicleByRegisterDay("1", _fromdate, _todate, "CountLockMotorcycle");

            usemotor = "0";

            //Car
            registercar = GenerateRegisterVehicleByRegisterDay("0", _fromdate, _todate, "CountRegistedCar");

            lockcar = GenerateLockVehicleByRegisterDay("0", _fromdate, _todate, "CountLockCar");

            usecar = "0";
        }
        public void GetCommandCountByDateRelease(string _fromdate, string _todate, ref string registerbicycle, ref string lockbicycle, ref string usebicycle, ref string registermotor, ref string lockmotor, ref string usemotor, ref string registercar, ref string lockcar, ref string usecar)
        {
            //Bicycle
            registerbicycle = GenerateRegisterVehicleByReleaseDay("2", _fromdate, _todate, "CountRegistedBicycle");

            lockbicycle = GenerateLockVehicleByReleaseDay("2", _fromdate, _todate, "CountLockBicycle");

            usebicycle = "0";

            //Motor
            registermotor = GenerateRegisterVehicleByReleaseDay("1", _fromdate, _todate, "CountRegistedMotorcycle");

            lockmotor = GenerateLockVehicleByReleaseDay("1", _fromdate, _todate, "CountLockMotorcycle");

            usemotor = "0";

            //Car
            registercar = GenerateRegisterVehicleByReleaseDay("0", _fromdate, _todate, "CountRegistedCar");

            lockcar = GenerateLockVehicleByReleaseDay("0", _fromdate, _todate, "CountLockCar");

            usecar = "0";
        }
        public string GenerateRegisterVehicleByRegisterDay(string vehicletype, string _fromdate, string _todate, string name)
        {
            var type = "";
            if (vehicletype.Equals("0"))
            {
                type = " AND (vg.VehicleType = '0')";
            }
            else if (vehicletype.Equals("1"))
            {
                type = " AND (vg.VehicleType = '1')";
            }
            else if (vehicletype.Equals("2") || vehicletype.Equals("3"))
            {
                type = " AND (vg.VehicleType = '2' OR vg.VehicleType = '3')";
            }

            string format = string.Format("(SELECT COUNT(*) FROM( SELECT lcc.CardNumber, lcc.CardIsLock, lcc.CustomerID, ROW_NUMBER() OVER( PARTITION BY lcc.CardNumber ORDER BY lcc.DateChanged DESC) AS RN FROM tblLogCardCustomer lcc INNER JOIN tblCard cd on lcc.CardNumber = cd.CardNumber INNER JOIN tblCardGroup cg on lcc.CardGroupID = CONVERT(varchar(50), cg.CardGroupID) INNER JOIN tblVehicleGroup vg on cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID) WHERE cd.IsDelete = 0 AND lcc.CompartmentID = cm.CompartmentID {0} AND lcc.DateRegisted >= '{1}' AND lcc.DateRegisted <= '{2}') AS a WHERE RN = 1 AND CustomerID <> '') AS {3}", type, _fromdate, _todate, name);

            return format;
        }
        public string GenerateLockVehicleByRegisterDay(string vehicletype, string _fromdate, string _todate, string name)
        {
            var type = "";
            if (vehicletype.Equals("0"))
            {
                type = "AND (vg.VehicleType = '0')";
            }
            else if (vehicletype.Equals("1"))
            {
                type = "AND (vg.VehicleType = '1')";
            }
            else if (vehicletype.Equals("2") || vehicletype.Equals("3"))
            {
                type = "AND (vg.VehicleType = '2' OR vg.VehicleType = '3')";
            }

            string format = string.Format("(SELECT COUNT(*) FROM( SELECT lcc.CardNumber, lcc.CardIsLock, lcc.CustomerID, ROW_NUMBER() OVER( PARTITION BY lcc.CardNumber ORDER BY lcc.DateChanged DESC) AS RN FROM tblLogCardCustomer lcc INNER JOIN tblCard cd on lcc.CardNumber = cd.CardNumber INNER JOIN tblCardGroup cg on lcc.CardGroupID = CONVERT(varchar(50), cg.CardGroupID) INNER JOIN tblVehicleGroup vg on cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID) WHERE cd.IsDelete = 0 AND lcc.CompartmentID = cm.CompartmentID {0} AND lcc.DateReleased >= '{1}' AND lcc.DateReleased <= '{2}') AS a WHERE RN = 1 AND CustomerID <> '' AND CardIsLock = 1) AS {3}", type, _fromdate, _todate, name);

            return format;
        }
        public string GenerateRegisterVehicleByReleaseDay(string vehicletype, string _fromdate, string _todate, string name)
        {
            var type = "";
            if (vehicletype.Equals("0"))
            {
                type = "AND (vg.VehicleType = '0')";
            }
            else if (vehicletype.Equals("1"))
            {
                type = "AND (vg.VehicleType = '1')";
            }
            else if (vehicletype.Equals("2") || vehicletype.Equals("3"))
            {
                type = "AND (vg.VehicleType = '2' OR vg.VehicleType = '3')";
            }

            string format = string.Format("(SELECT COUNT(*) FROM( SELECT lcc.CardNumber, lcc.CardIsLock, lcc.CustomerID, ROW_NUMBER() OVER( PARTITION BY lcc.CardNumber ORDER BY lcc.DateChanged DESC) AS RN FROM tblLogCardCustomer lcc INNER JOIN tblCard cd on lcc.CardNumber = cd.CardNumber INNER JOIN tblCardGroup cg on lcc.CardGroupID = CONVERT(varchar(50), cg.CardGroupID) INNER JOIN tblVehicleGroup vg on cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID) WHERE cd.IsDelete = 0 AND lcc.CompartmentID = cm.CompartmentID {0} AND lcc.DateReleased >= '{1}' AND lcc.DateReleased <= '{2}') AS a WHERE RN = 1 AND CustomerID <> '') AS {3}", type, _fromdate, _todate, name);

            return format;
        }

        public string GenerateLockVehicleByReleaseDay(string vehicletype, string _fromdate, string _todate, string name)
        {
            var type = "";
            if (vehicletype.Equals("0"))
            {
                type = "AND (vg.VehicleType = '0')";
            }
            else if (vehicletype.Equals("1"))
            {
                type = "AND (vg.VehicleType = '1')";
            }
            else if (vehicletype.Equals("2") || vehicletype.Equals("3"))
            {
                type = "AND (vg.VehicleType = '2' OR vg.VehicleType = '3')";
            }

            string format = string.Format("(SELECT COUNT(*) FROM( SELECT lcc.CardNumber, lcc.CardIsLock, lcc.CustomerID, ROW_NUMBER() OVER( PARTITION BY lcc.CardNumber ORDER BY lcc.DateChanged DESC) AS RN FROM tblLogCardCustomer lcc INNER JOIN tblCard cd on lcc.CardNumber = cd.CardNumber INNER JOIN tblCardGroup cg on lcc.CardGroupID = CONVERT(varchar(50), cg.CardGroupID) INNER JOIN tblVehicleGroup vg on cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID) WHERE cd.IsDelete = 0 AND lcc.CompartmentID = cm.CompartmentID {0} AND lcc.DateReleased >= '{1}' AND lcc.DateReleased <= '{2}') AS a WHERE RN = 1 AND CustomerID <> '' AND CardIsLock = 1) AS {3}", type, _fromdate, _todate, name);

            return format;
        }
        #endregion

        #region ReportPrint
        public DataTable GetReportPrint(string KeyWord, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("RowNumber", typeof(string));
            dt.Columns.Add("Date", typeof(string));
            dt.Columns.Add("UserName", typeof(string));
            //dt.Columns.Add("SubSystemCode", typeof(string));
            dt.Columns.Add("ObjectName", typeof(string));
            //dt.Columns.Add("Actions", typeof(string));
            dt.Columns.Add("Description", typeof(string));

            DataTable dtevent = null;
            dtevent = Data.SqlHelper.ExcuteSQL.GetDataSet("select * from tblLog where AppCode='Parking' and Actions='PrintReceipt' and" +
                " Date>='" + _fromdate +
                "' and Date<='" + _todate +
                "' and (UserName LIKE N'%" + KeyWord +
                //"' or SubSystemCode LIKE N'%" + KeyWord +
                "' or ObjectName LIKE N'%" + KeyWord +
                //"' or Actions LIKE N'%" + KeyWord +

                "') order by UserName, Date desc", false).Tables[0];
            if (dtevent != null && dtevent.Rows.Count > 0)
            {
                int count = 0;
                foreach (DataRow dr in dtevent.Rows)
                {
                    count++;
                    dt.Rows.Add(count, dr["Date"].ToString(),
                        dr["UserName"].ToString(),
                        //dr["SubSystemCode"].ToString(),
                        int.Parse(dr["ObjectName"].ToString()).ToString("0000000"),
                        //dr["Actions"].ToString(),
                        dr["Description"].ToString());
                }
            }

            return dt;
        }
        #endregion

        #region ReportVehicleOutByHand
        public DataTable GetReportVehicleOutByHand(string KeyWord, string UserID, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            query.AppendLine("");
            query.AppendLine("SELECT * FROM (");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[Date] desc) as RowNumber, a.*");
            query.AppendLine("FROM (");
            query.AppendLine("SELECT * FROM [dbo].[tblLog] e Where e.[SubSystemCode] = 'Parking_Report_Report1' AND e.[Actions] = N'Ghi thẻ ra'");
            query.AppendLine(string.Format("AND e.[Date] >= '{0}' AND e.[Date] <= '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("AND e.[UserName] = '{0}'", UserID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[AppCode] LIKE '%{0}%' OR e.[ObjectName] LIKE '%{0}%' OR e.[Actions] LIKE '%{0}%' OR e.[Description] LIKE '%{0}%')", KeyWord));
            query.AppendLine(") as a");
            query.AppendLine(") as Temp");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            query.AppendLine("SELECT COUNT(*) totalCount FROM (");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[Date] desc) as RowNumber, a.*");
            query.AppendLine("FROM (");
            query.AppendLine("SELECT * FROM [dbo].[tblLog] e Where e.[SubSystemCode] = 'Parking_Report_Report1' AND e.[Actions] = N'Ghi thẻ ra'");
            query.AppendLine(string.Format("AND e.[Date] >= '{0}' AND e.[Date] <= '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(UserID))
                query.AppendLine(string.Format("AND e.[UserName] = '{0}'", UserID));
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[AppCode] LIKE '%{0}%' OR e.[ObjectName] LIKE '%{0}%' OR e.[Actions] LIKE '%{0}%' OR e.[Description] LIKE '%{0}%')", KeyWord));
            query.AppendLine(") as a");
            query.AppendLine(") as Temp");

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            return Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #region ReportDetailMoneyCardDay3
        public List<ReportDetailMoneyCardDay> GetReportDetailMoneyCardDay3(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id], v.[Voucher]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[UserIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id], v.[Voucher]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[LaneIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[UserIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }


                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND (le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));
                }
            }


            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[UserIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[LaneIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[UserIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND (le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));
                }
            }

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string _dtimein = dr["DatetimeIn"].ToString();
                    string _dtimeout = dr["DatetimeOut"].ToString();

                    dr["TotalTimes"] = GetPeriodTime(DateTime.Parse(_dtimein), DateTime.Parse(_dtimeout)).ToString();

                    //string _moneys = dr["Moneys"].ToString();
                    //_totalmoneys = _totalmoneys + long.Parse(_moneys);
                }
            }

            dt.Rows.Add(0, "#", "TỔNG SỐ", "", null, null, "", "", "", "", "", "", _totalmoneys, "", null);

            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(dt);
        }

        public List<ReportDetailMoneyCardDay> PrintReportDetailMoneyCardDay3(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");
            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id], v.[Voucher]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[UserIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id], v.[Voucher]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[LaneIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[UserIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }


                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND (le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));
                }
            }


            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            //  query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[UserIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[LaneIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[UserIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND (le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));
                }
            }

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = !string.IsNullOrEmpty(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? Convert.ToInt32(list.Tables[1].Rows[0]["totalMoney"].ToString()) : 0;

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string _dtimein = dr["DatetimeIn"].ToString();
                    string _dtimeout = dr["DatetimeOut"].ToString();

                    dr["TotalTimes"] = GetPeriodTime(DateTime.Parse(_dtimein), DateTime.Parse(_dtimeout)).ToString();

                    //string _moneys = dr["Moneys"].ToString();
                    //_totalmoneys = _totalmoneys + long.Parse(_moneys);
                }
            }

            dt.Rows.Add(0, "#", "TỔNG SỐ", "", null, null, "", "", "", "", "", "", _totalmoneys, "", null);

            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(dt);
        }

        public DataTable GetReportDetailMoneyCardDay3_Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            decimal totalmoneys = 0;
            DataTable dtExcel = new DataTable();
            dtExcel.Columns.Add("STT", typeof(string));
            dtExcel.Columns.Add("Số thẻ", typeof(string));
            dtExcel.Columns.Add("Mã thẻ", typeof(string));
            dtExcel.Columns.Add("Biển số", typeof(string));
            dtExcel.Columns.Add("Thời gian vào", typeof(string));
            dtExcel.Columns.Add("Thời gian ra", typeof(string));
            dtExcel.Columns.Add("Nhóm thẻ", typeof(string));
            dtExcel.Columns.Add("Khách hàng", typeof(string));
            dtExcel.Columns.Add("Làn vào", typeof(string));
            dtExcel.Columns.Add("Làn ra", typeof(string));
            dtExcel.Columns.Add("Giám sát vào", typeof(string));
            dtExcel.Columns.Add("Giám sát ra", typeof(string));
            dtExcel.Columns.Add("Tiền", typeof(string));
            dtExcel.Columns.Add("Tổng thời gian", typeof(string));
            dtExcel.Columns.Add("Voucher", typeof(string));

            var query = new StringBuilder();
            //query.AppendLine("SELECT * FROM(");

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian', a.[Voucher], a.[IsFree]");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian', v.[Voucher], e.[IsFree]");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), e.[Id])");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.[UserIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));


            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian', v.[Voucher], le.[IsFree]");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("LEFT JOIN dbo.[tblVoucher] v ON v.[EventID] = CONVERT(nvarchar(50), le.[Id])");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[CarType] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[LaneIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.[UserIDOut] IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND (le.[Plate] LIKE '%{0}%' OR v.[Voucher] LIKE '%{0}%')", KeyWord));
                }
            }

            query.AppendLine(") as a");

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string _dtimein = dr["Thời gian vào"].ToString();
                    string _dtimeout = dr["Thời gian ra"].ToString();

                    dr["Tổng thời gian"] = GetPeriodTime(DateTime.Parse(_dtimein), DateTime.Parse(_dtimeout)).ToString();

                    string _moneys = Convert.ToBoolean(dr["IsFree"].ToString()) == false ? dr["Tiền"].ToString() : "0";
                    var _moneyValue = Convert.ToDecimal(_moneys);
                    totalmoneys = totalmoneys + _moneyValue;
                    //dr["Tiền"] = string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", int.Parse(_moneys));
                    if (!string.IsNullOrEmpty(dr["Nhóm thẻ"].ToString()))
                    {
                        var _cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["Nhóm thẻ"].ToString()));

                        dr["Nhóm thẻ"] = _cardgroup != null ? _cardgroup.CardGroupName : "";

                    }

                    if (!string.IsNullOrEmpty(dr["Làn vào"].ToString()))
                    {
                        var _lanein = _tblLaneService.GetById(Guid.Parse(dr["Làn vào"].ToString()));

                        dr["Làn vào"] = _lanein != null ? _lanein.LaneName : "";

                    }

                    if (!string.IsNullOrEmpty(dr["Làn ra"].ToString()))
                    {
                        var _laneout = _tblLaneService.GetById(Guid.Parse(dr["Làn ra"].ToString()));

                        dr["Làn ra"] = _laneout != null ? _laneout.LaneName : "";

                    }

                    if (!string.IsNullOrEmpty(dr["Giám sát vào"].ToString()))
                    {
                        var _userin = _UserService.GetById(dr["Giám sát vào"].ToString());

                        dr["Giám sát vào"] = _userin != null ? _userin.Username : "";

                    }

                    if (!string.IsNullOrEmpty(dr["Giám sát ra"].ToString()))
                    {
                        var _userout = _UserService.GetById(dr["Giám sát ra"].ToString());

                        dr["Giám sát ra"] = _userout != null ? _userout.Username : "";

                    }

                    dtExcel.Rows.Add(dr["STT"].ToString(), dr["CardNo"].ToString(), dr["Mã thẻ"].ToString(), dr["Biển số"].ToString(), dr["Thời gian vào"].ToString(), dr["Thời gian ra"].ToString(), dr["Nhóm thẻ"].ToString(), dr["Khách hàng"].ToString(), dr["Làn vào"].ToString(), dr["Làn ra"].ToString(), dr["Giám sát vào"].ToString(), dr["Giám sát ra"].ToString(), _moneyValue.ToString("##,###").Replace(".", ","), dr["Tổng thời gian"].ToString(), dr["Voucher"].ToString());
                }

                dtExcel.Rows.Add(0, "#", "TỔNG SỐ", "", "", "", "", "", "", "", "", "", totalmoneys.ToString("##,###").Replace(".", ","), "", "");
            }

            return dtExcel;
        }

        public string GetPeriodTime(DateTime dtimein, DateTime dtimeout)
        {
            try
            {
                long mdiff = DateDiff(DateInterval.Second, dtimein, dtimeout);
                string _periodtime = mdiff / 3600 + "h" + (mdiff % 3600) / 60 + "m" + (mdiff % 3600) % 60 + "s";
                return _periodtime;
            }
            catch
            { }
            return "";
        }

        public long DateDiff(DateInterval interval, DateTime date1, DateTime date2)
        {
            TimeSpan ts = date2.Subtract(date1);
            int datediff = 0;
            for (int i = 1; i < 5000; i++)
            {
                if (date1.AddDays(i).ToString("yyyy/MM/dd") == date2.ToString("yyyy/MM/dd"))
                {
                    datediff = i;
                    break;
                }
            }
            switch (interval)
            {
                case DateInterval.Year:
                    return date2.Year - date1.Year;
                case DateInterval.Month:
                    return (date2.Month - date1.Month) + (12 * (date2.Year - date1.Year));
                case DateInterval.Weekday:
                    return datediff / 7;
                case DateInterval.Day:
                    return datediff; // Fix(ts.TotalDays);
                case DateInterval.Hour:
                    return Fix(ts.TotalHours);
                case DateInterval.Minute:
                    return Fix(ts.TotalMinutes);
                default:
                    return Fix(ts.TotalSeconds);
            }
        }

        public enum DateInterval
        {
            Year,
            Month,
            Weekday,
            Day,
            Hour,
            Minute,
            Second
        }

        private long Fix(double Number)
        {
            if (Number >= 0)
            {
                return (long)Math.Floor(Number);
            }
            return (long)Math.Ceiling(Number);
        }
        #endregion

        #region ReportTotalMoneyByCardGroupCAB2VCT
        public DataTable GetReportTotalMoneyByCardGroupCAB2VCT(string CardGroupID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();

            var _strCardGroupId = new List<string>();


            //danh sách cardgroupid
            if (!string.IsNullOrEmpty(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                if (t.Any())
                {
                    foreach (var item in t)
                    {
                        _strCardGroupId.Add(item);
                    }

                }
            }
            else
            {
                var dtCardGroup = Data.SqlHelper.ExcuteSQL.GetDataSet("select CardGroupName, CardGroupID from tblCardGroup where VehicleGroupID IN ('c1b1a8df-99be-4656-b6ac-600941e32bfc','8ab7e508-b25e-44b5-b0fa-2bb0f604a48e','3ad0d239-397c-444e-95f1-e49c7913102b') order by SortOrder", false).Tables[0];//where CardGroupName Like N'%Xe máy khách%' or CardGroupName Like N'%Xe máy nhân viên%' or CardGroupName Like N'%Xe đạp khách%' or CardGroupName Like N'%Xe đạp nhân viên%'
                if (dtCardGroup != null && dtCardGroup.Rows.Count > 0)
                {
                    foreach (DataRow item in dtCardGroup.Rows)
                    {
                        if (!string.IsNullOrEmpty(item["CardGroupID"].ToString().Trim()))
                        {
                            _strCardGroupId.Add(item["CardGroupID"].ToString());
                        }

                    }
                }
            }
            dt.Columns.Add("Id", typeof(string));
            dt.Columns.Add("CardGroupName", typeof(string));
            dt.Columns.Add("TotalVehicleIn", typeof(int));
            dt.Columns.Add("TotalVehicleOut", typeof(int));
            //dt.Columns.Add("MotorcycleEmployees", typeof(string));
            //dt.Columns.Add("MotorcycleCustomer", typeof(string));
            //dt.Columns.Add("BikeEmployees", typeof(string));
            //dt.Columns.Add("BikeCustomer", typeof(string));
            // dt.Columns.Add("Total", typeof(string));

            var strCates = "";
            var count1 = 0;
            long _totalIn = 0;
            long _totalOut = 0;

            foreach (var item1 in _strCardGroupId)
            {
                count1++;

                strCates += string.Format("'{0}'{1}", item1, count1 == _strCardGroupId.Count ? "" : ",");
            }

            //tổng xe vào
            var cateIn = GetReportTotalVehicle(strCates, _fromdate, _todate, "1");
            if (cateIn != null && cateIn.Rows.Count > 0)
            {
                _totalIn = long.Parse(cateIn.Rows[0][0].ToString());
            }

            //tổng xe ra
            var cateOut = GetReportTotalVehicle(strCates, _fromdate, _todate, "2");
            if (cateOut != null && cateOut.Rows.Count > 0)
            {
                _totalOut = long.Parse(cateOut.Rows[0][0].ToString());
            }

            if (_strCardGroupId != null && _strCardGroupId.Count > 0)
            {
                foreach (var item in _strCardGroupId)
                {
                    //số xe vào
                    long _totalNumIn = 0;
                    var numIn = GetReportTotalVehicleByCardGroup(item, _fromdate, _todate, "1");

                    if (numIn != null && numIn.Rows.Count > 0)
                    {
                        if (numIn.Rows[0][0].ToString() != "")
                        {
                            _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                        }
                    }

                    //số xe ra
                    long _totalNumOut = 0;
                    var numOut = GetReportTotalVehicleByCardGroup(item, _fromdate, _todate, "2");

                    if (numOut != null && numOut.Rows.Count > 0)
                    {
                        if (numOut.Rows[0][0].ToString() != "")
                        {
                            _totalNumOut = long.Parse(numOut.Rows[0][0].ToString());
                        }
                    }

                    var id = "";

                    var cardgroup = _tblCardGroupService.GetById(Guid.Parse(item));
                    var cg_name = "";
                    if (cardgroup != null)
                    {
                        if (cardgroup.CardGroupName.Contains("the nhan vien") || cardgroup.CardGroupName.Contains("xe may mien phi"))
                        {
                            id = "1";
                            cg_name = "Xe máy nhân viên";
                        }
                        else if (cardgroup.CardGroupName.Contains("Thẻ lượt xe máy") || cardgroup.CardGroupName.Contains("Thẻ lượt xe đạp điện"))
                        {
                            id = "2";
                            cg_name = "Xe máy khách";
                        }
                        else if (cardgroup.CardGroupName.Contains("Thẻ tháng xe đạp"))
                        {
                            id = "3";
                            cg_name = "Xe đạp nhân viên";
                        }
                        else if (cardgroup.CardGroupName.Contains("Thẻ lượt xe đạp"))
                        {
                            id = "4";
                            cg_name = "Xe đạp khách";
                        }
                    }

                    dt.Rows.Add(id, cg_name, _totalNumIn, _totalNumOut);
                }

                var result = from r in dt.AsEnumerable()
                             group r by r.Field<string>("Id") into g
                             select new
                             {
                                 Id = g.Key,
                                 TotalVehicleIn = g.Sum(r => r.Field<int>("TotalVehicleIn")),
                                 TotalVehicleOut = g.Sum(r => r.Field<int>("TotalVehicleOut"))
                             };

                if (result.Any())
                {
                    dt = result.ToDataTableNullable();
                }

                dt.Rows.Add("Tổng số", _totalIn, _totalOut);
            }
            return dt;
        }
        public DataTable GetMoneyCAB2VCT(string CardGroupID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT A.*, (A.Moneys * A.TotalItem) as TotalMoney FROM (");
            query.AppendLine("SELECT CardGroupID,Moneys ,count(*) AS TotalItem ");
            query.AppendLine("FROM tblCardEvent ");
            query.AppendLine("WHERE Moneys IN ('20000','40000','60000') ");
            query.AppendLine(string.Format("AND DatetimeIn >= '{0}' AND DatetimeIn <= '{1}' ", _fromdate, _todate));
            query.AppendLine("AND (CONVERT(VARCHAR(8),DatetimeIn,108)) > '18:00:00' ");
            query.AppendLine("group by Moneys,CardGroupID");
            query.AppendLine(") as A");

            query.AppendLine("SELECT B.*, (B.Moneys * B.TotalItem) as TotalMoney FROM (");
            query.AppendLine("SELECT CardGroupID,Moneys ,count(*) AS TotalItem ");
            query.AppendLine("FROM tblCardEvent ");
            query.AppendLine("WHERE Moneys IN ('20000','40000','60000') ");
            query.AppendLine(string.Format("AND DatetimeIn >= '{0}' AND DatetimeIn <= '{1}' ", _fromdate, _todate));
            query.AppendLine("AND (CONVERT(VARCHAR(8),DatetimeIn,108)) < '18:00:00' ");
            query.AppendLine("group by Moneys,CardGroupID");
            query.AppendLine(") as B");

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            return dt;
        }

        public DataTable GetReportTotalVehicleByCardGroup_CAB2VCT20003000(string CardGroupID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();
            dt.Columns.Add("VehicleName", typeof(string));
            dt.Columns.Add("Moneys", typeof(string));

            var query = new StringBuilder();

            #region xe may 2000
            //xe may 2000
            query.AppendLine("select a.XEMAY2000, a.XEMAY2000 * 2000 as Moneys from (");
            query.AppendLine("select count(*) as 'XEMAY2000' from tblCardEvent ce");
            query.AppendLine("where CONVERT(VARCHAR(8), ce.DatetimeIn, 108) > '07:00:00'");
            query.AppendLine("and ce.DateTimeOut <= (SELECT DATEADD(HOUR,19,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and (SELECT DATEDIFF(hour, ce.DatetimeIn,ce.DateTimeOut)) <= '12'");
            query.AppendLine("and CardGroupID IN ('518588c2-9306-42fd-a37b-13c2974e5020','1f3494f9-bc5b-4145-bfdb-b15fd4a08e51')");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));
            query.AppendLine(") as a");
            #endregion

            #region xe may 3000
            //xe may 3000
            query.AppendLine("select b.XEMAY3000, b.XEMAY3000 * 3000 as Moneys from (");
            query.AppendLine("select count(*) as 'XEMAY3000' from tblCardEvent ce");
            query.AppendLine("where CONVERT(VARCHAR(8), ce.DatetimeIn, 108) > '19:00:00'");
            query.AppendLine("and ce.DateTimeOut <= (SELECT DATEADD(HOUR,7,DATEADD(DAY,1,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn)))))");
            query.AppendLine("and (SELECT DATEDIFF(hour, ce.DatetimeIn,ce.DateTimeOut)) <= '12'");
            query.AppendLine("and CardGroupID IN ('518588c2-9306-42fd-a37b-13c2974e5020','1f3494f9-bc5b-4145-bfdb-b15fd4a08e51')");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));
            query.AppendLine(") as b");
            #endregion

            #region xe dap 1000
            //xe dap 2000
            query.AppendLine("select c.XEDAP1000, c.XEDAP1000 * 1000 as Moneys from (");
            query.AppendLine("select count(*) as 'XEDAP1000' from tblCardEvent ce");
            query.AppendLine("where CONVERT(VARCHAR(8), ce.DatetimeIn, 108) > '07:00:00'");
            query.AppendLine("and ce.DateTimeOut <= (SELECT DATEADD(HOUR,19,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and (SELECT DATEDIFF(hour, ce.DatetimeIn,ce.DateTimeOut)) <= '12'");
            query.AppendLine("and CardGroupID = 'b78fd074-f937-41d6-a388-8ba2a1938ad1'");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));
            query.AppendLine(") as c");
            #endregion

            #region xe dap 2000
            //xe dap 3000
            query.AppendLine("select d.XEDAP2000, d.XEDAP2000 * 2000 as Moneys from (");
            query.AppendLine("select count(*) as 'XEDAP2000' from tblCardEvent ce");
            query.AppendLine("where CONVERT(VARCHAR(8), ce.DatetimeIn, 108) > '19:00:00'");
            query.AppendLine("and ce.DateTimeOut <= (SELECT DATEADD(HOUR,7,DATEADD(DAY,1,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn)))))");
            query.AppendLine("and (SELECT DATEDIFF(hour, ce.DatetimeIn,ce.DateTimeOut)) <= '12'");
            query.AppendLine("and CardGroupID = 'b78fd074-f937-41d6-a388-8ba2a1938ad1'");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));
            query.AppendLine(") as d");
            #endregion

            #region xe may qua gio
            //Xe may qua gio
            query.AppendLine("select count(*) as 'SOLUONG', SUM(ce.Moneys) as 'TONGTIEN' from tblCardEvent ce");
            query.AppendLine("where ce.DatetimeIn > (SELECT DATEADD(HOUR,7,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and ce.DateTimeOut > (SELECT DATEADD(HOUR,19,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and CardGroupID IN ('518588c2-9306-42fd-a37b-13c2974e5020','1f3494f9-bc5b-4145-bfdb-b15fd4a08e51')");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));

            query.AppendLine("select count(*) as 'SOLUONG', SUM(ce.Moneys) as 'TONGTIEN' from tblCardEvent ce");
            query.AppendLine("where ce.DatetimeIn > (SELECT DATEADD(HOUR,19,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and ce.DateTimeOut > (SELECT DATEADD(HOUR,7,DATEADD(DAY,1,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn)))))");
            query.AppendLine("and CardGroupID IN ('518588c2-9306-42fd-a37b-13c2974e5020','1f3494f9-bc5b-4145-bfdb-b15fd4a08e51')");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));
            #endregion

            #region xe dap qua gio
            //Xe dap qua gio
            query.AppendLine("select count(*) as 'SOLUONG', SUM(ce.Moneys) as 'TONGTIEN' from tblCardEvent ce");
            query.AppendLine("where ce.DatetimeIn > (SELECT DATEADD(HOUR,7,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and ce.DateTimeOut > (SELECT DATEADD(HOUR,19,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and CardGroupID = 'b78fd074-f937-41d6-a388-8ba2a1938ad1'");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));

            query.AppendLine("select count(*) as 'SOLUONG', SUM(ce.Moneys) as 'TONGTIEN' from tblCardEvent ce");
            query.AppendLine("where ce.DatetimeIn > (SELECT DATEADD(HOUR,19,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn))))");
            query.AppendLine("and ce.DateTimeOut > (SELECT DATEADD(HOUR,7,DATEADD(DAY,1,DATEADD(dd, 0, DATEDIFF(dd, 0, ce.DatetimeIn)))))");
            query.AppendLine("and CardGroupID = 'b78fd074-f937-41d6-a388-8ba2a1938ad1'");
            query.AppendLine(string.Format("and ce.DatetimeIn > '{0}' and ce.DateTimeOut <= '{1}'", _fromdate, _todate));
            #endregion

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            if (list != null && list.Tables.Count > 0)
            {

                //so luong
                var Count_xemay = Convert.ToInt32(list.Tables[4].Rows[0]["SOLUONG"].ToString()) + Convert.ToInt32(list.Tables[5].Rows[0]["SOLUONG"].ToString());
                var Count_xedap = Convert.ToInt32(list.Tables[6].Rows[0]["SOLUONG"].ToString()) + Convert.ToInt32(list.Tables[7].Rows[0]["SOLUONG"].ToString());

                // tinh tien
                var Money_xemay7h = !string.IsNullOrEmpty(list.Tables[4].Rows[0]["TONGTIEN"].ToString()) ? Convert.ToDecimal(list.Tables[4].Rows[0]["TONGTIEN"].ToString()) : 0;
                var Money_xemay19h = !string.IsNullOrEmpty(list.Tables[5].Rows[0]["TONGTIEN"].ToString()) ? Convert.ToDecimal(list.Tables[5].Rows[0]["TONGTIEN"].ToString()) : 0;
                var Money_xemay = Money_xemay7h + Money_xemay19h;

                var Money_xedap7h = !string.IsNullOrEmpty(list.Tables[6].Rows[0]["TONGTIEN"].ToString()) ? Convert.ToDecimal(list.Tables[6].Rows[0]["TONGTIEN"].ToString()) : 0;
                var Money_xedap19h = !string.IsNullOrEmpty(list.Tables[7].Rows[0]["TONGTIEN"].ToString()) ? Convert.ToDecimal(list.Tables[7].Rows[0]["TONGTIEN"].ToString()) : 0;
                var Money_xedap = Money_xedap7h + Money_xedap19h;

                dt.Rows.Add(list.Tables[0].Rows[0]["XEMAY2000"].ToString(), !string.IsNullOrEmpty(list.Tables[0].Rows[0]["Moneys"].ToString()) ? list.Tables[0].Rows[0]["Moneys"].ToString() : "0");
                dt.Rows.Add(list.Tables[1].Rows[0]["XEMAY3000"].ToString(), !string.IsNullOrEmpty(list.Tables[1].Rows[0]["Moneys"].ToString()) ? list.Tables[1].Rows[0]["Moneys"].ToString() : "0");
                dt.Rows.Add(list.Tables[2].Rows[0]["XEDAP1000"].ToString(), !string.IsNullOrEmpty(list.Tables[2].Rows[0]["Moneys"].ToString()) ? list.Tables[2].Rows[0]["Moneys"].ToString() : "0");
                dt.Rows.Add(list.Tables[3].Rows[0]["XEDAP2000"].ToString(), !string.IsNullOrEmpty(list.Tables[3].Rows[0]["Moneys"].ToString()) ? list.Tables[3].Rows[0]["Moneys"].ToString() : "0");
                dt.Rows.Add(Count_xemay.ToString(), Money_xemay.ToString());
                dt.Rows.Add(Count_xedap.ToString(), Money_xedap.ToString());
            }


            return dt;
        }

        #endregion

        #region ReportVehicleTooDay
        public List<ReportVehicleTooDay> GetReportVehicleTooDay(string KeyWord, string fromdate, string todate, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT CONVERT(nvarchar(50), Id) + '_CARD' as Id, PlateIn as Plate, CardNo, CardNumber, DateTimeIn,DatetimeOut, PicDirIn as PicIn1, REPLACE(PicDirIn, 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, CardGroupID, CustomerName, LaneIDIn, UserIDIn,DATEDIFF(day, DateTimeIn, DatetimeOut) as TooDay");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            //query.AppendLine("inner join MPARKING.dbo.tblCard c on e.CardNumber = c.CardNumber");
            query.AppendLine("where EventCode = '2' and DateTimeOut >= (SELECT DATEADD(HOUR,24,DATEADD(dd, 0, DATEDIFF(dd, 0, DatetimeIn))))");

            query.AppendLine(string.Format("AND [DateTimeIn] >= '{0}' AND [DateTimeIn] < '{1}'", fromdate, todate));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--Count
            query.AppendLine("select COUNT(*) as totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT Id");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            query.AppendLine("where EventCode = '2' and DateTimeOut >= (SELECT DATEADD(HOUR,24,DATEADD(dd, 0, DATEDIFF(dd, 0, DatetimeIn))))");

            query.AppendLine(string.Format("AND [DateTimeIn] >= '{0}' AND [DateTimeIn] < '{1}'", fromdate, todate));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportVehicleTooDay>(list.Tables[0]);
        }

        public DataTable GetReportVehicleTooDay_Excel(string KeyWord, string fromdate, string todate)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DateTimeIn] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");

            query.AppendLine("SELECT CardNo, CardNumber,PlateIn as Plate,(select convert(varchar(10), DateTimeIn, 103) + ' ' + left(convert(varchar(32), DateTimeIn, 108), 8)) as DateTimeIn,(select convert(varchar(10), DatetimeOut, 103) + ' ' + left(convert(varchar(32), e.DatetimeOut, 108), 8)) as DatetimeOut, CustomerName, DATEDIFF(day, DateTimeIn, DatetimeOut) as TooDay");
            query.AppendLine("FROM dbo.tblCardEvent e  WITH(NOLOCK)");
            //query.AppendLine("inner join MPARKING.dbo.tblCard c on e.CardNumber = c.CardNumber");
            query.AppendLine("where EventCode = '2' and DateTimeOut >= (SELECT DATEADD(HOUR,24,DATEADD(dd, 0, DATEDIFF(dd, 0, DatetimeIn))))");

            query.AppendLine(string.Format("AND [DateTimeIn] >= '{0}' AND [DateTimeIn] < '{1}'", fromdate, todate));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as a");
            query.AppendLine(") as C1");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }
        #endregion

        #region ReportInOutByCustomer
        public List<ReportInOutByCustomer> GetReportInOutByCustomer(string KeyWord, List<string> CustomerGroupId, string fromdate, string todate, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.CardNumber desc) as RowNumber,a.* FROM(");
            query.AppendLine("SELECT e.CardNo, e.CardNumber,e.CustomerName,e.CustomerGroupID,count(e.CardNumber) as Day");
            query.AppendLine("FROM tblCardEvent e");
            query.AppendLine("where EventCode = '2'");

            query.AppendLine(string.Format("AND e.[DateTimeIn] >= '{0}' AND e.[DateTimeIn] < '{1}'", fromdate, todate));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (e.CardNumber LIKE '%{0}%' or e.CardNo LIKE '%{0}%' or e.CustomerName LIKE '%{0}%')", KeyWord));

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine("group by e.CardNumber,e.CardNo,e.CustomerName,e.CustomerGroupID");
            query.AppendLine(") as a");
            query.AppendLine(") as C1");

            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--Count
            query.AppendLine("select COUNT(*) as totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.CardNo, e.CardNumber,e.CustomerName,e.CustomerGroupID,count(e.CardNumber) as Day");
            query.AppendLine("FROM tblCardEvent e");
            query.AppendLine("where EventCode = '2'");

            query.AppendLine(string.Format("AND e.[DateTimeIn] >= '{0}' AND e.[DateTimeIn] < '{1}'", fromdate, todate));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (e.CardNumber LIKE '%{0}%' or e.CardNo LIKE '%{0}%' or e.CustomerName LIKE '%{0}%')", KeyWord));

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine("group by e.CardNumber,e.CardNo,e.CustomerName,e.CustomerGroupID");

            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportInOutByCustomer>(list.Tables[0]);
        }

        public DataTable GetReportInOutByCustomer_Excel(string KeyWord, List<string> CustomerGroupId, string fromdate, string todate)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.CardNumber desc) as RowNumber,a.* FROM(");
            query.AppendLine("SELECT e.CardNo, e.CardNumber,e.CustomerName,e.CustomerGroupID,count(e.CardNumber) as Day");
            query.AppendLine("FROM tblCardEvent e");
            query.AppendLine("where EventCode = '2'");

            query.AppendLine(string.Format("AND e.[DateTimeIn] >= '{0}' AND e.[DateTimeIn] < '{1}'", fromdate, todate));

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (e.CardNumber LIKE '%{0}%' or e.CardNo LIKE '%{0}%' or e.CustomerName LIKE '%{0}%')", KeyWord));

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine("group by e.CardNumber,e.CardNo,e.CustomerName,e.CustomerGroupID");
            query.AppendLine(") as a");
            query.AppendLine(") as C1");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }
        #endregion

        #endregion

        #region 108

        #region ReportInternal
        public List<ReportDetailMoneyCardDay> GetReportInternal(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }
        #endregion

        #region ReportPublic
        public List<ReportDetailMoneyCardDay> GetReportPublic(List<string> lstpublic, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));


            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //public
            if (lstpublic != null && lstpublic.Count > 0)
            {
                var count = 0;

                query.AppendLine("and e.[Id] IN ( ");

                foreach (var item in lstpublic)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstpublic.Count ? "" : ","));
                }

                query.AppendLine(" )");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //public
                    if (lstpublic != null && lstpublic.Count > 0)
                    {
                        var count = 0;

                        query.AppendLine("and le.[Id] IN ( ");

                        foreach (var item in lstpublic)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == lstpublic.Count ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //public
            if (lstpublic != null && lstpublic.Count > 0)
            {
                var count = 0;

                query.AppendLine("and e.[Id] IN ( ");

                foreach (var item in lstpublic)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstpublic.Count ? "" : ","));
                }

                query.AppendLine(" )");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //public
                    if (lstpublic != null && lstpublic.Count > 0)
                    {
                        var count = 0;

                        query.AppendLine("and le.[Id] IN ( ");

                        foreach (var item in lstpublic)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == lstpublic.Count ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }

        public DataTable GetReportPublic_Excel(List<string> lstpublic, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian'");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //public
            if (lstpublic != null && lstpublic.Count > 0)
            {
                var count = 0;

                query.AppendLine("and e.[Id] IN ( ");

                foreach (var item in lstpublic)
                {
                    count++;

                    query.AppendLine(string.Format("'{0}'{1}", item, count == lstpublic.Count ? "" : ","));
                }

                query.AppendLine(" )");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian'");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //public
                    if (lstpublic != null && lstpublic.Count > 0)
                    {
                        var count = 0;

                        query.AppendLine("and le.[Id] IN ( ");

                        foreach (var item in lstpublic)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == lstpublic.Count ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }

                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }
        #endregion

        #region ReportChartInOut
        public DataTable GetReportChartInOutByCardGroup(string CardGroupID, string VehicleGroupID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();

            var _strCardGroupId = new List<string>();

            var query = new StringBuilder();
            query.AppendLine("select CardGroupID from tblCardGroup WHERE 1=1");

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND VehicleGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine("order by SortOrder");

            var dtnew = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
            if (dtnew != null && dtnew.Rows.Count > 0)
            {
                foreach (DataRow dr in dtnew.Rows)
                {
                    if (!string.IsNullOrEmpty(dr["CardGroupID"].ToString().Trim()))
                    {
                        _strCardGroupId.Add(dr["CardGroupID"].ToString());
                    }
                }
            }

            dt.Columns.Add("CardGroupName", typeof(string));
            dt.Columns.Add("TotalVehicleIn", typeof(string));
            dt.Columns.Add("TotalVehicleOut", typeof(string));


            var strCates = "";
            var count1 = 0;
            //long _totalmoneys = 0;
            //long _totalIn = 0;
            //long _totalOut = 0;

            //foreach (var item1 in _strCardGroupId)
            //{
            //    count1++;

            //    strCates += string.Format("'{0}'{1}", item1, count1 == _strCardGroupId.Count ? "" : ",");
            //}

            ////tổng xe vào
            //var cateIn = GetReportTotalVehicle(strCates, _fromdate, _todate, "1");
            //if (cateIn != null && cateIn.Rows.Count > 0)
            //{
            //    _totalIn = long.Parse(cateIn.Rows[0][0].ToString());
            //}

            ////tổng xe ra
            //var cateOut = GetReportTotalVehicle(strCates, _fromdate, _todate, "2");
            //if (cateOut != null && cateOut.Rows.Count > 0)
            //{
            //    _totalOut = long.Parse(cateOut.Rows[0][0].ToString());
            //}

            foreach (var item in _strCardGroupId)
            {
                //số xe vào
                long _totalNumIn = 0;
                var numIn = GetReportTotalVehicleByCardGroup(item, _fromdate, _todate, "1");

                if (numIn != null && numIn.Rows.Count > 0)
                {
                    if (numIn.Rows[0][0].ToString() != "")
                    {
                        _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                    }
                }

                //số xe ra
                long _totalNumOut = 0;
                var numOut = GetReportTotalVehicleByCardGroup(item, _fromdate, _todate, "2");

                if (numOut != null && numOut.Rows.Count > 0)
                {
                    if (numOut.Rows[0][0].ToString() != "")
                    {
                        _totalNumOut = long.Parse(numOut.Rows[0][0].ToString());
                    }
                }


                var cardgroup = _tblCardGroupService.GetById(Guid.Parse(item));

                if (_totalNumIn > 0 || _totalNumOut > 0)
                {
                    dt.Rows.Add(cardgroup != null ? cardgroup.CardGroupName : "", _totalNumIn, _totalNumOut);
                }

            }

            return dt;
        }

        public List<ReportChartInOutByLane> GetReportChartInOutByLane(string LaneID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var list = new List<ReportChartInOutByLane>();

            var _strLaneId = new List<string>();

            var query = new StringBuilder();
            query.AppendLine("select LaneID from tblLane WHERE 1=1");

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND LaneID IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            query.AppendLine("order by SortOrder");

            var dtnew = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
            if (dtnew != null && dtnew.Rows.Count > 0)
            {
                foreach (DataRow dr in dtnew.Rows)
                {
                    if (!string.IsNullOrEmpty(dr["LaneID"].ToString().Trim()))
                    {
                        _strLaneId.Add(dr["LaneID"].ToString());
                    }
                }
            }

            //dt.Columns.Add("CardGroupName", typeof(string));
            //dt.Columns.Add("TotalVehicleIn", typeof(string));
            //dt.Columns.Add("TotalVehicleOut", typeof(string));


            var strCates = "";
            var count1 = 0;
            //long _totalmoneys = 0;
            //long _totalIn = 0;
            //long _totalOut = 0;

            foreach (var item1 in _strLaneId)
            {
                count1++;

                strCates += string.Format("'{0}'{1}", item1, count1 == _strLaneId.Count ? "" : ",");
            }

            ////tổng xe vào
            //var cateIn = GetReportTotalVehicle(strCates, _fromdate, _todate, "1");
            //if (cateIn != null && cateIn.Rows.Count > 0)
            //{
            //    _totalIn = long.Parse(cateIn.Rows[0][0].ToString());
            //}

            ////tổng xe ra
            //var cateOut = GetReportTotalVehicle(strCates, _fromdate, _todate, "2");
            //if (cateOut != null && cateOut.Rows.Count > 0)
            //{
            //    _totalOut = long.Parse(cateOut.Rows[0][0].ToString());
            //}

            foreach (var item in _strLaneId)
            {
                //số xe vào
                long _totalNumIn = 0;
                var numIn = GetReportTotalVehicleByLane("", item, _fromdate, _todate, "1");

                if (numIn != null && numIn.Rows.Count > 0)
                {
                    if (numIn.Rows[0][0].ToString() != "")
                    {
                        _totalNumIn = long.Parse(numIn.Rows[0][0].ToString());
                    }
                }

                //số xe ra
                long _totalNumOut = 0;
                var numOut = GetReportTotalVehicleByLane("", item, _fromdate, _todate, "2");

                if (numOut != null && numOut.Rows.Count > 0)
                {
                    if (numOut.Rows[0][0].ToString() != "")
                    {
                        _totalNumOut = long.Parse(numOut.Rows[0][0].ToString());
                    }
                }


                var lane = _tblLaneService.GetById(Guid.Parse(item));

                if (_totalNumIn > 0 || _totalNumOut > 0)
                {
                    var newobj = new ReportChartInOutByLane
                    {
                        LaneName = lane != null ? lane.LaneName : "",
                        TotalVehicleIn = _totalNumIn.ToString(),
                        TotalVehicleOut = _totalNumOut.ToString()
                    };

                    list.Add(newobj);
                }

            }

            return list;
        }

        public DataTable GetReportTotalVehicleByLane(string VehicleGroupID, string LaneID, string _fromdate, string _todate, string eventcode)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT COUNT(ce.[Id]) AS TotalVehicle FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");

            if (eventcode == "2")
            {
                query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            }


            if (eventcode.Equals("1"))
            {
                query.AppendLine(string.Format("AND ce.[DateTimeIn] >= '{0}' AND ce.[DateTimeIn] <= '{1}'", _fromdate, _todate));
            }
            else
            {
                query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            }

            if (eventcode.Equals("1"))
            {
                query.AppendLine(string.Format("AND ce.[LaneIDIn] = '{0}'", LaneID));
            }
            else
            {

                //query.AppendLine(string.Format("AND (ce.[LaneIDIn] = '{0}' OR ce.[LaneIDOut] = '{0}')", LaneID));
                query.AppendLine(string.Format("AND ce.[LaneIDOut] = '{0}'", LaneID));
            }

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            //query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #region ReportMoneyByLane
        public List<ReportChartMoneyByLane> GetReportChartMoneyByLane(string LaneID, string VehicleGroupID, string _fromdate, string _todate, ref long _totalIn, ref long _totalOut)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var list = new List<ReportChartMoneyByLane>();

            var _strLaneId = new List<string>();

            var query = new StringBuilder();
            query.AppendLine("select LaneID from tblLane WHERE 1=1");

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND LaneID IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            query.AppendLine("order by SortOrder");

            var dtnew = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
            if (dtnew != null && dtnew.Rows.Count > 0)
            {
                foreach (DataRow dr in dtnew.Rows)
                {
                    if (!string.IsNullOrEmpty(dr["LaneID"].ToString().Trim()))
                    {
                        _strLaneId.Add(dr["LaneID"].ToString());
                    }
                }
            }

            var strCates = "";
            var count1 = 0;

            foreach (var item1 in _strLaneId)
            {
                count1++;

                strCates += string.Format("'{0}'{1}", item1, count1 == _strLaneId.Count ? "" : ",");
            }


            foreach (var item in _strLaneId)
            {
                //doanh thu
                long _moneys = 0;
                var temp = GetTotalMoneyByLaneID(VehicleGroupID, item, _fromdate, _todate);

                if (temp != null && temp.Rows.Count > 0)
                {
                    if (temp.Rows[0][0].ToString() != "")
                    {
                        _moneys = long.Parse(temp.Rows[0][0].ToString());

                    }
                }

                var lane = _tblLaneService.GetById(Guid.Parse(item));

                if (_moneys > 0)
                {
                    var newobj = new ReportChartMoneyByLane
                    {
                        LaneName = lane != null ? lane.LaneName : "",
                        Money = string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", _moneys)
                    };

                    list.Add(newobj);
                }

            }

            return list;
        }

        public DataTable GetTotalMoneyByLaneID(string VehicleGroupID, string LaneID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            query.AppendLine(string.Format("AND ce.[LaneIDOut] = '{0}'", LaneID));

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        #endregion

        #region ReportChartOutByLane    
        public DataTable GetReportChartOutByLane(string VehicleGroupID, string CardgroupID, string LaneID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var listid = new List<string>();
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT * FROM (");
            query.AppendLine("SELECT COUNT(ce.[Id]) AS TotalVehicle,CardGroupID,LaneIDOut FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0 AND ce.[EventCode] = '2'");

            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));


            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }

            }
            if (!string.IsNullOrWhiteSpace(CardgroupID))
            {
                var t = CardgroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[CardGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine("Group by CardGroupID,LaneIDOut");
            query.AppendLine(") as s");
            query.AppendLine("PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(TotalVehicle)");

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("FOR LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("[{0}]{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            else
            {
                var listlane = _tblLaneService.GetAllActive().ToList();


                var count2 = 0;

                query.AppendLine("FOR LaneIDOut IN ( ");

                foreach (var item in listlane)
                {
                    long _totalNumOut = 0;
                    var numOut = GetReportTotalVehicleByLane("", item.LaneID.ToString(), _fromdate, _todate, "2");

                    if (numOut != null && numOut.Rows.Count > 0)
                    {
                        if (numOut.Rows[0][0].ToString() != "")
                        {
                            _totalNumOut = long.Parse(numOut.Rows[0][0].ToString());
                        }
                    }

                    if (_totalNumOut == 0)
                    {
                        listid.Add(item.LaneID.ToString());
                    }

                    count2++;

                    query.AppendLine(string.Format("[{0}]{1}", item.LaneID, count2 == listlane.Count ? "" : ","));


                }

                query.AppendLine(" )");
            }

            query.AppendLine(")AS pvt");

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
            if (dt != null && dt.Rows.Count > 0)
            {
                if (listid != null && listid.Count > 0)
                {
                    foreach (var item in listid)
                    {
                        dt.Columns.Remove(item);
                    }
                }

                foreach (DataRow dr in dt.Rows)
                {
                    var cardgroup = _tblCardGroupService.GetById(Guid.Parse(dr["CardGroupID"].ToString()));
                    dr["CardGroupID"] = cardgroup != null ? cardgroup.CardGroupName : "";
                }

                foreach (DataColumn dc in dt.Columns)
                {
                    if (!dc.ColumnName.Equals("CardGroupID"))
                    {
                        var lane = _tblLaneService.GetById(Guid.Parse(dc.ColumnName.ToString()));
                        dc.ColumnName = lane != null ? lane.LaneName : "";
                    }

                }
            }


            return dt;
        }

        #endregion

        #region ReportMoneyByLevel
        public List<ReportChartMoneyByLevel> GetReportMoneyByLevel(string VehicleGroupID, string LaneID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT SUM(ce.[Moneys]) AS TotalMoney,ce.Moneys as LevelMoney FROM tblCardEvent ce WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine("Group By [Moneys]");
            query.AppendLine("order by LevelMoney desc");

            var dt = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            var list = ExcuteSQLEvent.ConvertTo<ReportChartMoneyByLevel>(dt);

            if (list != null && list.Count > 0)
            {
                foreach (var item in list)
                {
                    item.LevelMoney = string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", Convert.ToDecimal(item.LevelMoney));
                    item.TotalMoney = string.Format(new System.Globalization.CultureInfo("en-US"), "{0:0,0}", Convert.ToDecimal(item.TotalMoney));
                }
            }

            return list;
        }

        #endregion

        #region ReportChartOutByLevel
        public DataTable GetReportChartOutByLevel(string VehicleGroupID, string LaneID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var listid = new List<string>();
            var dt = new DataTable();
            var query = new StringBuilder();

            query.AppendLine("DECLARE @cols AS NVARCHAR(MAX),");
            query.AppendLine("@query  AS NVARCHAR(MAX)");
            query.AppendLine("SELECT @cols =");
            query.AppendLine("COALESCE(@cols + ', ','') + QUOTENAME(LevelMoney)");
            query.AppendLine("FROM (SELECT ce.Moneys as LevelMoney");
            query.AppendLine("FROM tblCardEvent ce ");
            query.AppendLine("WITH (NOLOCK) where ce.[EventCode] = '2' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");

            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            query.AppendLine("Group By [Moneys]");
            query.AppendLine("   ) AS B");
            query.AppendLine("   Order by LevelMoney desc");
            query.AppendLine("set @query = 'SELECT * FROM (");
            query.AppendLine("SELECT Count(Id) as Totalcount,ce.Moneys as LevelMoney,LaneIDOut");
            query.AppendLine("FROM tblCardEvent ce ");
            query.AppendLine("WITH (NOLOCK) where ce.[EventCode] = ' + '2' + ' and ce.[IsDelete] = 0 and ce.[IsFree] = 0 and ce.[Moneys] > 0");

            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= ''' + cast('{0}' as VARCHAR(50)) + '''AND ce.[DateTimeOut] <= ''' + cast('{1}' as VARCHAR(50)) + '''", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            query.AppendLine("Group By [Moneys],LaneIDOut");
            query.AppendLine(") as s PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(Totalcount)");
            query.AppendLine("FOR LevelMoney IN (' + @cols + ')");
            query.AppendLine(")AS pvt'");
            query.AppendLine("execute(@query)");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            if (list.Tables.Count > 0)
            {
                dt = list.Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (listid != null && listid.Count > 0)
                    {
                        foreach (var item in listid)
                        {
                            dt.Columns.Remove(item);
                        }
                    }

                    foreach (DataRow dr in dt.Rows)
                    {
                        var lane = _tblLaneService.GetById(Guid.Parse(dr["LaneIDOut"].ToString()));
                        dr["LaneIDOut"] = lane != null ? lane.LaneName : "";
                    }

                    foreach (DataColumn dc in dt.Columns)
                    {
                        if (!dc.ColumnName.Equals("LaneIDOut"))
                        {
                            dc.ColumnName = Convert.ToDecimal(dc.ColumnName).ToString("###,###");
                        }

                    }
                }

            }

            return dt;
        }
        #endregion

        #region ReportChartOutByTime
        public DataTable GetReportChartOutByTime(string VehicleGroupID, string CardgroupID, string LaneID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var listid = new List<string>();
            var dt = new DataTable();
            var query = new StringBuilder();
            query.AppendLine("DECLARE @list AS NVARCHAR(MAX),@query  AS NVARCHAR(MAX)");
            query.AppendLine("SELECT @list =");
            query.AppendLine("COALESCE(@list + ', ','') + QUOTENAME(date)");
            query.AppendLine("FROM (");
            query.AppendLine("Select (CONVERT(nvarchar(50), mon) + '/' + CONVERT(nvarchar(50), yea)) as date");
            query.AppendLine("FROM (");
            query.AppendLine("Select distinct MONTH(DateTimeOut) as mon,Year(DateTimeOut) as yea FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");
            query.AppendLine("AND EventCode=2");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(CardgroupID))
            {
                var t = CardgroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[CardGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            query.AppendLine("Order by yea asc,mon asc OFFSET 0 ROWS");
            query.AppendLine(") AS C ");
            query.AppendLine(") as k");


            query.AppendLine("set @query ='select * from(");
            query.AppendLine("Select TotalCount,(CONVERT(nvarchar(50), mon) + ''' + '/' + ''' + CONVERT(nvarchar(50), yea)) as date,");
            query.AppendLine("(CASE when LaneIDOut='''' then ''' + '1' + ''' else LaneIDOut END) as LaneIDOut FROM (");
            query.AppendLine("Select Count(Id) as TotalCount,mon,yea,LaneIDOut FROM (");
            query.AppendLine("Select Id,LaneIDOut,MONTH(DateTimeOut) as mon,Year(DateTimeOut) as yea FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");
            query.AppendLine("AND EventCode=2");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= ''' + cast('{0}' as VARCHAR(50)) + '''AND ce.[DateTimeOut] <= ''' + cast('{1}' as VARCHAR(50)) + '''", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count2++;


                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(CardgroupID))
            {
                var t = CardgroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[CardGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            query.AppendLine("Order by DateTimeOut desc OFFSET 0 ROWS");
            query.AppendLine(") as A");
            query.AppendLine("Group by mon,yea,LaneIDOut");
            query.AppendLine("Order by yea asc,mon asc OFFSET 0 ROWS");
            query.AppendLine(") AS C ");
            query.AppendLine(") as s PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(TotalCount)");
            query.AppendLine("  FOR date IN ('+@list+')");
            query.AppendLine(")AS pvt'");

            query.AppendLine("execute(@query)");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            if (list.Tables.Count > 0)
            {
                dt = list.Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (listid != null && listid.Count > 0)
                    {
                        foreach (var item in listid)
                        {
                            dt.Columns.Remove(item);
                        }
                    }

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr["LaneIDOut"].ToString() != "1")
                        {
                            var lane = _tblLaneService.GetById(Guid.Parse(dr["LaneIDOut"].ToString()));
                            dr["LaneIDOut"] = lane != null ? lane.LaneName : "Không nhóm";
                        }
                        else
                        {
                            dr["LaneIDOut"] = "Không nhóm";
                        }
                    }
                }

            }

            return dt;
        }
        #endregion

        #region ReportChartMoneyByTime
        public DataTable GetReportChartMoneyByTime(string VehicleGroupID, string LaneID, string _fromdate, string _todate)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var listid = new List<string>();
            var dt = new DataTable();
            var query = new StringBuilder();
            query.AppendLine("DECLARE @list AS NVARCHAR(MAX),@query  AS NVARCHAR(MAX)");
            query.AppendLine("SELECT @list =");
            query.AppendLine("COALESCE(@list + ', ','') + QUOTENAME(date)");
            query.AppendLine("FROM (");
            query.AppendLine("Select (CONVERT(nvarchar(50), mon) + '/' + CONVERT(nvarchar(50), yea)) as date");
            query.AppendLine("FROM (");
            query.AppendLine("Select distinct MONTH(DateTimeOut) as mon,Year(DateTimeOut) as yea FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");
            query.AppendLine("AND EventCode=2 AND Moneys > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine("Order by yea asc,mon asc OFFSET 0 ROWS");
            query.AppendLine(") AS C ");
            query.AppendLine(") as k");


            query.AppendLine("set @query ='select * from(");
            query.AppendLine("Select TotalMoney,(CONVERT(nvarchar(50), mon) + ''' + '/' + ''' + CONVERT(nvarchar(50), yea)) as date,");
            query.AppendLine("(CASE when VehicleGroupID='''' then ''' + '1' + ''' else VehicleGroupID END) as VehicleGroupID FROM (");
            query.AppendLine("Select SUM(Moneys) as TotalMoney,mon,yea,VehicleGroupID FROM (");
            query.AppendLine("Select Moneys,VehicleGroupID,MONTH(DateTimeOut) as mon,Year(DateTimeOut) as yea FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");
            query.AppendLine("AND EventCode=2 AND Moneys > 0");
            query.AppendLine(string.Format("AND ce.[DateTimeOut] >= ''' + cast('{0}' as VARCHAR(50)) + '''AND ce.[DateTimeOut] <= ''' + cast('{1}' as VARCHAR(50)) + '''", _fromdate, _todate));

            if (!string.IsNullOrWhiteSpace(VehicleGroupID))
            {
                var t = VehicleGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[VehicleGroupID] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count2 = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count2++;

                        query.AppendLine(string.Format("''' + cast('{0}' as VARCHAR(50)) + '''{1}", item, count2 == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }


            }

            query.AppendLine("Order by DateTimeOut desc OFFSET 0 ROWS");
            query.AppendLine(") as A");
            query.AppendLine("Group by mon,yea,VehicleGroupID");
            query.AppendLine("Order by yea asc,mon asc OFFSET 0 ROWS");
            query.AppendLine(") AS C ");
            query.AppendLine(") as s PIVOT");
            query.AppendLine("(");
            query.AppendLine("SUM(TotalMoney)");
            query.AppendLine("  FOR date IN ('+@list+')");
            query.AppendLine(")AS pvt'");

            query.AppendLine("execute(@query)");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            if (list.Tables.Count > 0)
            {
                dt = list.Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (listid != null && listid.Count > 0)
                    {
                        foreach (var item in listid)
                        {
                            dt.Columns.Remove(item);
                        }
                    }

                    foreach (DataRow dr in dt.Rows)
                    {

                        if (dr["VehicleGroupID"].ToString() != "1")
                        {
                            var vehicle = _tblVehicleGroupRepository.GetById(Guid.Parse(dr["VehicleGroupID"].ToString()));
                            dr["VehicleGroupID"] = vehicle != null ? vehicle.VehicleGroupName : "Không nhóm";
                        }
                        else
                        {
                            dr["VehicleGroupID"] = "Không nhóm";
                        }

                        //dr[1] = !string.IsNullOrEmpty(dr[1].ToString()) ? Convert.ToDecimal(dr[1].ToString()).ToString("###,###") : "0";
                        //dr[2] = !string.IsNullOrEmpty(dr[1].ToString()) ? Convert.ToDecimal(dr[2].ToString()).ToString("###,###") :  "0";
                    }
                }

            }

            return dt;
        }
        #endregion

        #region ReportChartInOutByTime
        public List<ReportChartInOutByLane> GetReportChartInOutByTime(string LaneID, string _fromdate, string _todate)
        {

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var fdate = Convert.ToDateTime(_fromdate);
            var tdate = Convert.ToDateTime(_todate);
            string type = "hh";
            string typedate = "dd/MM/yyyy HH:mm:ss";
            if (fdate.Year != tdate.Year)
            {
                type = "mm";
                typedate = "MM/yyyy";
            }
            else
            {
                if (fdate.Month != tdate.Month)
                {
                    type = "mm";
                    typedate = "MM/yyyy";
                }
                else
                {
                    if (fdate.Day != tdate.Day)
                    {
                        type = "dd";
                        typedate = "dd/MM/yyyy";
                    }
                }
            }

            // var dtTime = GetTimeByFromDateToDate(_fromdate, _todate, type);
            var dtTime = GetTimeByFromDateToDate_v2(_fromdate, _todate, type);

            var list = new List<ReportChartInOutByLane>();

            foreach (DataRow item in dtTime.Rows)
            {
                //số xe vào
                long _totalNumIn = 0;
                long _totalNumOut = 0;
                //var num = GetReportTotalVehicleInOut(LaneID, _fromdate, item["Dates"].ToString(), type);

                //if (num != null && num.Rows.Count > 0)
                //{
                //    if (num.Rows[0][0].ToString() != "")
                //    {
                //        _totalNumIn = long.Parse(num.Rows[0][0].ToString());
                //        _totalNumOut = long.Parse(num.Rows[0][1].ToString());
                //    }
                //}
                _totalNumIn = long.Parse(item["NumberIn"].ToString());
                _totalNumOut = long.Parse(item["NumberOut"].ToString());

                if (_totalNumIn > 0 || _totalNumOut > 0)
                {
                    var newobj = new ReportChartInOutByLane
                    {
                        LaneName = Convert.ToDateTime(item["Dates"].ToString()).ToString(typedate),
                        TotalVehicleIn = _totalNumIn.ToString(),
                        TotalVehicleOut = _totalNumOut.ToString()
                    };

                    list.Add(newobj);
                }

            }

            return list;
        }

        public DataTable GetTimeByFromDateToDate(string _fromdate, string _todate, string type)
        {
            var query = new StringBuilder();
            query.AppendLine("DECLARE @minDateTime AS DATETIME;");
            query.AppendLine("DECLARE @maxDateTime AS DATETIME;");
            query.AppendLine(string.Format("SET @minDateTime = '{0}';", _fromdate));
            query.AppendLine(string.Format("SET @maxDateTime = '{0}';", _todate));
            query.AppendLine("WITH Dates_CTE");
            query.AppendLine("AS (SELECT @minDateTime AS Dates");
            query.AppendLine("UNION ALL");
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) < @maxDateTime then Dateadd({0}, 1, Dates) else @maxDateTime END)", type));
                    break;
                case "dd":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) <= @maxDateTime then Dateadd({0}, 1, Dates) END)", type));
                    break;
                case "mm":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) <= @maxDateTime then Dateadd({0}, 1, Dates) END)", type));
                    break;
                case "yy":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) <= @maxDateTime then Dateadd({0}, 1, Dates) END)", type));
                    break;
            }

            query.AppendLine("FROM   Dates_CTE");
            query.AppendLine("WHERE  Dates < @maxDateTime)");
            query.AppendLine("SELECT *");
            query.AppendLine("FROM   Dates_CTE WHERE Dates IS NOT NULL");
            query.AppendLine("OPTION (MAXRECURSION 0)");

            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        public DataTable GetTimeByFromDateToDate_v2(string _fromdate, string _todate, string type)
        {
            var query = new StringBuilder();
            query.AppendLine("DECLARE @minDateTime AS DATETIME;");
            query.AppendLine("DECLARE @maxDateTime AS DATETIME;");
            query.AppendLine(string.Format("SET @minDateTime = '{0}';", _fromdate));
            query.AppendLine(string.Format("SET @maxDateTime = '{0}';", _todate));
            query.AppendLine("WITH Dates_CTE");
            query.AppendLine("AS (SELECT @minDateTime AS Dates");
            query.AppendLine("UNION ALL");
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) < @maxDateTime then Dateadd({0}, 1, Dates) else @maxDateTime END)", type));
                    break;
                case "dd":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) <= @maxDateTime then Dateadd({0}, 1, Dates) END)", type));
                    break;
                case "mm":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) <= @maxDateTime then Dateadd({0}, 1, Dates) END)", type));
                    break;
                case "yy":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) <= @maxDateTime then Dateadd({0}, 1, Dates) END)", type));
                    break;
            }

            query.AppendLine("FROM   Dates_CTE");
            query.AppendLine("WHERE  Dates < @maxDateTime)");
            query.AppendLine("SELECT *");
            query.AppendLine(",(SELECT COUNT(ce.[Id]) AS TotalVehicleIn FROM tblCardEvent ce WITH(NOLOCK) where ce.[IsDelete] = 0");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= '{0}' AND ce.[DateTimeIn] <= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121)", _fromdate));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND FORMAT(ce.[DateTimeIn], 'yyyy-MM-dd') = CONVERT(VARCHAR(10), CONVERT(datetime,Dates), 121)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND CONVERT(VARCHAR(7), ce.[DateTimeIn], 126) = CONVERT(VARCHAR(7), CONVERT(datetime,Dates), 121)"));
                    break;
                    //case "yy":
                    //    query.AppendLine(string.Format("AND YEAR(ce.[DateTimeIn]) = YEAR('{0}')", _todate));
                    //    break;
            }
            query.AppendLine(") AS NumberIn,");
            query.AppendLine("(SELECT COUNT(ce.[Id]) AS TotalVehicleOut FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0 AND ce.[EventCode] = '2'");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121)", _fromdate));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND FORMAT(ce.[DateTimeOut], 'yyyy-MM-dd') = CONVERT(VARCHAR(10), CONVERT(datetime,Dates), 121)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND CONVERT(VARCHAR(7), ce.[DateTimeOut], 126) = CONVERT(VARCHAR(7), CONVERT(datetime,Dates), 121)"));
                    break;
                    //case "yy":
                    //    query.AppendLine(string.Format("AND YEAR(ce.[DateTimeIn]) = YEAR('{0}')", _todate));
                    //    break;
            }
            query.AppendLine(") AS NumberOut");
            query.AppendLine("FROM   Dates_CTE WHERE Dates IS NOT NULL");
            query.AppendLine("OPTION (MAXRECURSION 0)");

            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        public DataTable GetReportTotalVehicleInOut(string LaneID, string _fromdate, string _todate, string type)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM");
            query.AppendLine("(SELECT COUNT(ce.[Id]) AS TotalVehicleIn FROM tblCardEvent ce WITH(NOLOCK) where ce.[IsDelete] = 0");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= '{0}' AND ce.[DateTimeIn] <= '{1}'", _fromdate, _todate));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND FORMAT(ce.[DateTimeIn], 'yyyy-MM-dd') = CONVERT(VARCHAR(10), '{0}', 112)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND CONVERT(VARCHAR(7), ce.[DateTimeIn], 126) = CONVERT(VARCHAR(7), '{0}', 126)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    break;
                    //case "yy":
                    //    query.AppendLine(string.Format("AND YEAR(ce.[DateTimeIn]) = YEAR('{0}')", _todate));
                    //    break;
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[LaneIDIn] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }

            }

            query.AppendLine(") AS A,");
            query.AppendLine("(SELECT COUNT(ce.[Id]) AS TotalVehicleOut FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0 AND ce.[EventCode] = '2'");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND FORMAT(ce.[DateTimeOut], 'yyyy-MM-dd') = CONVERT(VARCHAR(10), '{0}', 112)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND CONVERT(VARCHAR(7), ce.[DateTimeOut], 126) = CONVERT(VARCHAR(7), '{0}', 126)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    break;
                    //case "yy":
                    //    query.AppendLine(string.Format("AND YEAR(ce.[DateTimeOut]) = YEAR('{0}')", _todate));
                    //    break;
            }

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ce.[LaneIDOut] IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }

            }

            query.AppendLine(") AS B");

            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        public DataTable GetReportTotalVehicleByTime(string LaneID, string _fromdate, string _todate, string eventcode, string type)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            //tblCardEvent
            query.AppendLine("SELECT COUNT(ce.[Id]) AS TotalVehicle FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (eventcode == "2")
            {
                query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            }

            switch (type)
            {
                case "hh":
                    if (eventcode.Equals("1"))
                    {
                        query.AppendLine(string.Format("AND ce.[DateTimeIn] >= '{0}' AND ce.[DateTimeIn] <= '{1}'", _fromdate, _todate));
                    }
                    else
                    {
                        query.AppendLine(string.Format("AND ce.[DateTimeOut] >= '{0}' AND ce.[DateTimeOut] <= '{1}'", _fromdate, _todate));
                    }
                    break;
                case "dd":
                    if (eventcode.Equals("1"))
                    {
                        query.AppendLine(string.Format("AND FORMAT(ce.[DateTimeIn], 'yyyy-MM-dd') = CONVERT(VARCHAR(10), '{0}', 112)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    }
                    else
                    {
                        query.AppendLine(string.Format("AND FORMAT(ce.[DateTimeOut], 'yyyy-MM-dd') = CONVERT(VARCHAR(10), '{0}', 112)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    }
                    break;
                case "mm":

                    if (eventcode.Equals("1"))
                    {
                        query.AppendLine(string.Format("AND CONVERT(VARCHAR(7), ce.[DateTimeIn], 126) = CONVERT(VARCHAR(7), '{0}', 126)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    }
                    else
                    {
                        query.AppendLine(string.Format("AND CONVERT(VARCHAR(7), ce.[DateTimeOut], 126) = CONVERT(VARCHAR(7), '{0}', 126)", Convert.ToDateTime(_todate).ToString("yyyy-MM-dd HH:mm:ss")));
                    }
                    break;
                case "yy":

                    if (eventcode.Equals("1"))
                    {
                        query.AppendLine(string.Format("AND YEAR(ce.[DateTimeIn]) = YEAR('{0}')", _todate));
                    }
                    else
                    {
                        query.AppendLine(string.Format("AND YEAR(ce.[DateTimeOut]) = YEAR('{0}')", _todate));
                    }
                    break;

            }

            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    if (eventcode.Equals("1"))
                    {
                        query.AppendLine("AND ce.[LaneIDIn] IN ( ");
                    }
                    else
                    {
                        query.AppendLine("AND ce.[LaneIDOut] IN ( ");
                    }

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }

            }

            //query.AppendLine(string.Format("AND ce.[EventCode] = '{0}'", eventcode));
            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #endregion

        #region BVDK_THANHPHO_VINH

        #region BVDK_ReportTotalMoneyByCardGroup
        public DataTable GetBVDK_ReportTotalMoneyByCardGroup(string CardGroupID, string _fromdate, string _todate, ref long _totalmoneys)
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var dt = new DataTable();

            var _strCardGroupId = new List<string>();


            //danh sách cardgroupid
            if (!string.IsNullOrEmpty(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                if (t.Any())
                {
                    foreach (var item in t)
                    {
                        _strCardGroupId.Add(item);
                    }

                }
            }
            else
            {
                var dtCardGroup = Data.SqlHelper.ExcuteSQL.GetDataSet("select CardGroupName, CardGroupID from tblCardGroup where CardType = '1' order by SortOrder", false).Tables[0];
                if (dtCardGroup != null && dtCardGroup.Rows.Count > 0)
                {
                    foreach (DataRow item in dtCardGroup.Rows)
                    {
                        if (!string.IsNullOrEmpty(item["CardGroupID"].ToString().Trim()))
                        {
                            _strCardGroupId.Add(item["CardGroupID"].ToString());
                        }

                    }
                }
            }

            dt.Columns.Add("CardGroupName", typeof(string));

            dt.Columns.Add("Moneys", typeof(string));

            var strCates = "";
            var count1 = 0;


            foreach (var item1 in _strCardGroupId)
            {
                count1++;

                strCates += string.Format("'{0}'{1}", item1, count1 == _strCardGroupId.Count ? "" : ",");
            }

            foreach (var item in _strCardGroupId)
            {
                //doanh thu
                long _moneys = 0;
                var temp = GetTotalMoneyByCardGroup(item, _fromdate, _todate);

                if (temp != null && temp.Rows.Count > 0)
                {
                    if (temp.Rows[0][0].ToString() != "")
                    {
                        _moneys = long.Parse(temp.Rows[0][0].ToString());
                        //tổng doanh thu
                        _totalmoneys = _totalmoneys + _moneys;
                    }
                }
                var cardgroup = _tblCardGroupService.GetById(Guid.Parse(item));

                dt.Rows.Add(cardgroup != null ? cardgroup.CardGroupName : "", _moneys > 0 ? _moneys.ToString("###,###") : "0");
            }

            return dt;
        }
        #endregion

        #endregion

        #region ReportEvent_Access
        public List<ReportEvent_Access> GetReportEvent(string KeyWord, string Status, string ControllerID, string _fromdate, string _todate, int pageIndex, int pageSize, ref int total, string CardGroupID = "")
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                _fromdate = DateTime.Now.ToString("yyyy/MM/dd 00:00:00");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                _todate = DateTime.Now.ToString("yyyy/MM/dd 23:59:59");
            }


            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY ace.[Date] desc) AS RowNumber, ace.[Date], ace.[CardNumber],ace.CardNo, ace.[ControllerID], ace.[EventStatus], ace.CardGroupID, ace.ReaderIndex");
            query.AppendLine("FROM tblAccessCardEvent ace WITH (NOLOCK) WHERE 1=1");
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ace.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendFormat("AND ace.[Date] >= '{0}' AND ace.[Date] <= '{1}'", _fromdate, _todate);
            if (!string.IsNullOrWhiteSpace(KeyWord))
            {
                query.AppendFormat("AND (ace.[CardNumber] LIKE '%{0}%'", KeyWord);
                query.AppendFormat("OR ace.[CardNo] LIKE '%{0}%')", KeyWord);
            }


            if (!string.IsNullOrWhiteSpace(ControllerID))
            {
                var t = ControllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ace.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrEmpty(Status) && !Status.Equals("0"))
            {
                query.AppendFormat("AND ace.[EventStatus] = '{0}'", Status);
            }

            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL 
            query.AppendLine("SELECT COUNT(ace.ID) totalCount");
            query.AppendLine("FROM tblAccessCardEvent ace WITH (NOLOCK) WHERE 1=1");

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ace.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendFormat("AND ace.[Date] >= '{0}' AND ace.[Date] <= '{1}'", _fromdate, _todate);
            if (!string.IsNullOrWhiteSpace(KeyWord))
            {
                query.AppendFormat("AND (ace.[CardNumber] LIKE '%{0}%'", KeyWord);
                query.AppendFormat("OR ace.[CardNo] LIKE '%{0}%')", KeyWord);
            }
            if (!string.IsNullOrWhiteSpace(ControllerID))
            {
                var t = ControllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ace.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrEmpty(Status) && !Status.Equals("0"))
            {
                query.AppendFormat("AND ace.[EventStatus] = '{0}'", Status);
            }
            var list = Kztek.Data.AccessEvent.SqlHelper.ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            return Kztek.Data.AccessEvent.SqlHelper.ExcuteSQLEvent.ConvertTo<ReportEvent_Access>(list.Tables[0]);
        }

        public DataTable GetReportEventExcel(string KeyWord, string Status, string ControllerID, string _fromdate, string _todate, string CardGroupID = "")
        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                _fromdate = DateTime.Now.ToString("yyyy/MM/dd 00:00:00");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                _todate = DateTime.Now.ToString("yyyy/MM/dd 23:59:59");
            }

            var query = new StringBuilder();

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY ace.[Date] desc) AS RowNumber, (select convert(varchar(10), ace.[Date], 103)) as Date ,ace.CardNo, ace.[CardNumber],'' as CardGroupName,'' as ControllerName,'' AS DoorName ,ace.[ControllerID],'' as CustomerName,'' as Address, ace.[EventStatus], ace.CardGroupID, ace.ReaderIndex");
            query.AppendLine("FROM tblAccessCardEvent ace WITH (NOLOCK) WHERE 1=1");
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ace.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendFormat("AND ace.[Date] >= '{0}' AND ace.[Date] <= '{1}'", _fromdate, _todate);
            if (!string.IsNullOrWhiteSpace(KeyWord))
            {
                query.AppendFormat("AND (ace.[CardNumber] LIKE '%{0}%'", KeyWord);
                query.AppendFormat("OR ace.[CardNo] LIKE '%{0}%')", KeyWord);
            }

            if (!string.IsNullOrWhiteSpace(ControllerID))
            {
                var t = ControllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ace.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrEmpty(Status) && !Status.Equals("0"))
            {
                query.AppendFormat("AND ace.[EventStatus] = '{0}'", Status);
            }
            query.AppendLine(") as a");

            return Kztek.Data.AccessEvent.SqlHelper.ExcuteSQLEvent.GetDataSet(query.ToString()).Tables[0];
        }
        #endregion

        #region ReportCardExpire_Access
        public List<ReportCardExpire_Access> GetReportCardExpire_Access(string KeyWord, string CardGroupID, string CustomerID, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total, string currentUser, string date, bool filterTimeAlmost = true)
        {
            if (!string.IsNullOrWhiteSpace(date))
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                date = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }

            CardGroupID = ToListGUID(CardGroupID);
            //CustomerGroupID = ToListGUID(CustomerGroupID);

            var strCardGroup = "";
            //var objUser = GetCardGroupsByUserId(currentUser, ref strCardGroup);

            var query = new StringBuilder();
            //query.AppendLine("");
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER (ORDER BY ca.SortOrder DESC ) AS RowNumber");
            query.AppendLine(",ca.CardID");
            query.AppendLine(",ca.CardNo");
            query.AppendLine(",ca.CardNumber");
            query.AppendLine(",ca.CardGroupID");
            query.AppendLine(",ca.Plate1");
            query.AppendLine(",ca.[AccessExpireDate]");
            query.AppendLine(",ca.IsLock");
            query.AppendLine(",c.CustomerName");
            query.AppendLine(",c.[Address]");
            query.AppendLine(",cg.CustomerGroupName");
            query.AppendLine(",cag.CardGroupName");
            query.AppendLine(",ca.ImportDate");
            //query.AppendLine("INTO #Results");
            query.AppendLine("FROM tblCard ca  WITH (NOLOCK)");
            query.AppendLine("left join tblCustomer c on ca.CustomerID = CONVERT(varchar(50),c.CustomerID)");
            query.AppendLine("left join tblCustomerGroup cg on CONVERT(varchar(50),cg.CustomerGroupID) = c.CustomerGroupID");
            query.AppendLine("left join tblCardGroup cag on CONVERT(varchar(50),cag.CardGroupID) = ca.CardGroupID");
            query.AppendLine("where ca.IsDelete=0 ");

            //Check theo nhóm card group
            if (!string.IsNullOrWhiteSpace(strCardGroup))
            {
                query.AppendLine(string.Format("and ca.CardGroupID IN ({0}) ", strCardGroup));
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
            {
                query.AppendLine(string.Format("and (ca.CardNo LIKE N'%{0}%'", KeyWord));
                query.AppendLine(string.Format("or ca.CardNumber LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate1 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate2 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate3 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.CustomerCode LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.Address LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.CustomerName LIKE N'%{0}%'", KeyWord));
                query.AppendLine(") ");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("and ca.CardGroupID IN ({0}) ", CardGroupID));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("and ca.CustomerID = '{0}' ", CustomerID));

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!filterTimeAlmost)
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:00");
                var dt = Convert.ToDateTime(date).AddDays(15).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and ca.AccessExpireDate >= '{0}' and ca.AccessExpireDate <= '{1}' ", date, dt));
            }
            else
            {
                var dt = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and ca.AccessExpireDate <= '{0}' ", dt));
            }

            //if (!string.IsNullOrWhiteSpace(CardState))
            //    query.AppendLine(string.Format("and ca.IsLock LIKE '%{0}%' ", CardState));
            query.AppendLine(") as a");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL
            query.AppendLine("SELECT COUNT(ca.CardID) totalCount");
            query.AppendLine("FROM tblCard ca  WITH (NOLOCK)");
            query.AppendLine("left join tblCustomer c on ca.CustomerID = CONVERT(varchar(50),c.CustomerID)");
            query.AppendLine("where ca.IsDelete=0 ");

            //Check theo nhóm card group
            if (!string.IsNullOrWhiteSpace(strCardGroup))
            {
                query.AppendLine(string.Format("and ca.CardGroupID IN ({0}) ", strCardGroup));
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
            {
                query.AppendLine(string.Format("and (ca.CardNo LIKE N'%{0}%'", KeyWord));
                query.AppendLine(string.Format("or ca.CardNumber LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate1 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate2 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate3 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.CustomerCode LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.Address LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.CustomerName LIKE N'%{0}%'", KeyWord));
                query.AppendLine(") ");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("and ca.CardGroupID IN ({0}) ", CardGroupID));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("and ca.CustomerID = '{0}' ", CustomerID));

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!filterTimeAlmost)
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:00");
                var dt = Convert.ToDateTime(date).AddDays(15).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and ca.AccessExpireDate >= '{0}' and ca.AccessExpireDate <= '{1}' ", date, dt));
            }
            else
            {
                var dt = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and ca.AccessExpireDate <= '{0}' ", dt));
            }

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);

            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportCardExpire_Access>(list.Tables[0]);
        }

        public DataTable GetReportCardExpireExcel_Access(string KeyWord, string CardGroupID, string CustomerID, List<string> CustomerGroupId, string currentUser = "", string date = "", bool filterTimeAlmost = true)
        {
            if (!string.IsNullOrWhiteSpace(date))
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                date = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }

            CardGroupID = ToListGUID(CardGroupID);
            //CustomerGroupID = ToListGUID(CustomerGroupID);

            var strCardGroup = "";
            // var objUser = GetCardGroupsByUserId(currentUser, ref strCardGroup);

            var query = new StringBuilder();
            query.AppendLine("SELECT ROW_NUMBER() OVER (ORDER BY ca.SortOrder DESC ) AS 'STT'");
            query.AppendLine(",ca.CardNo AS 'Số thẻ'");
            query.AppendLine(",ca.CardNumber AS 'Mã thẻ'");
            query.AppendLine(",cag.CardGroupName AS 'Nhóm thẻ'");
            query.AppendLine(",ca.Plate1 AS 'Biển số'");
            query.AppendLine(",(select convert(varchar(10), ca.[AccessExpireDate], 103))  AS 'Ngày hết hạn'");
            query.AppendLine(",c.CustomerName AS 'Khách hàng'");
            query.AppendLine(",c.[Address] AS 'Địa chỉ'");
            query.AppendLine(",cg.CustomerGroupName AS 'Nhóm khách hàng'");
            query.AppendLine(",ca.IsLock, '' AS 'Trạng thái'");

            query.AppendLine("FROM tblCard ca  WITH (NOLOCK)");

            query.AppendLine("left join tblCustomer c on ca.CustomerID = CONVERT(varchar(50),c.CustomerID)");
            query.AppendLine("left join tblCustomerGroup cg on CONVERT(varchar(50),cg.CustomerGroupID) = c.CustomerGroupID");
            query.AppendLine("left join tblCardGroup cag on CONVERT(varchar(50),cag.CardGroupID) = ca.CardGroupID");

            query.AppendLine("where ca.IsDelete=0 ");

            //Check theo nhóm card group
            if (!string.IsNullOrWhiteSpace(strCardGroup))
            {
                query.AppendLine(string.Format("and ca.CardGroupID IN ({0}) ", strCardGroup));
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
            {
                query.AppendLine(string.Format("and (ca.CardNo LIKE N'%{0}%'", KeyWord));
                query.AppendLine(string.Format("or ca.CardNumber LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate1 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate2 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or ca.Plate3 LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.CustomerCode LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.Address LIKE N'%{0}%' ", KeyWord));
                query.AppendLine(string.Format("or c.CustomerName LIKE N'%{0}%'", KeyWord));
                query.AppendLine(") ");
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
                query.AppendLine(string.Format("and ca.CardGroupID IN ({0}) ", CardGroupID));

            if (!string.IsNullOrWhiteSpace(CustomerID))
                query.AppendLine(string.Format("and ca.CustomerID = '{0}' ", CustomerID));

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!filterTimeAlmost)
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:00");
                var dt = Convert.ToDateTime(date).AddDays(15).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and ca.AccessExpireDate >= '{0}' and ca.AccessExpireDate <= '{1}' ", date, dt));
            }
            else
            {
                var dt = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and ca.AccessExpireDate <= '{0}' ", dt));
            }

            return Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString()).Tables[0];
        }
        #endregion

        #region ReportCustomerExpire_Access
        public List<ReportCustomerExpire_Access> GetReportCustomerExpire_Access(string KeyWord, List<string> CustomerGroupId, int pageIndex, int pageSize, ref int total, string currentUser = "", string date = "", bool filterTimeAlmost = true)
        {
            if (!string.IsNullOrWhiteSpace(date))
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                date = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }

            // CustomerGroupID = ToListGUID(CustomerGroupID);

            var strCustomerGroup = "";
            //var objUser = GetCustomerGroupsByUserId(currentUser, ref strCustomerGroup);

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY c.SortOrder desc) AS RowNumber, c.[CustomerID],g.CustomerGroupName, '' as CardNo, '' as CardNumber, '' as Plate, c.[CustomerCode], c.[CustomerName], c.[Address], c.[IDNumber], c.[Mobile], c.[CustomerGroupID], c.[Description], c.[EnableAccount], c.[Account], c.[Password], c.[Avatar], c.[Inactive], c.[SortOrder], c.[UserIDofFinger], c.[AccessExpireDate], '' AS AccessExpireDateHtml");
            query.AppendLine("FROM tblCustomer c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCustomerGroup g On c.CustomerGroupID = CONVERT(varchar(255),g.CustomerGroupID)");
            //query.AppendLine("LEFT JOIN tblCompartment p On c.CompartmentID = CONVERT(varchar(255),p.CompartmentID)");
            query.AppendLine("where 1 = 1");

            //Check theo nhóm customer group
            if (!string.IsNullOrWhiteSpace(strCustomerGroup))
            {
                query.AppendLine(string.Format("and c.CustomerGroupID IN ({0}) ", strCustomerGroup));
            }

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (c.CustomerName LIKE N'%{0}%' or c.CustomerCode LIKE '%{0}%' or c.Mobile LIKE N'%{0}%' or c.UserIDofFinger LIKE N'%{0}%')", KeyWord));

            if (!filterTimeAlmost)
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:00");
                var dt = Convert.ToDateTime(date).AddDays(15).ToString("yyyy/MM/dd HH:mm:59");

                query.AppendLine(string.Format("and c.AccessExpireDate >= '{0}' and c.AccessExpireDate <= '{1}' ", date, dt));
            }
            else
            {
                var dt = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and c.AccessExpireDate <= '{0}' ", dt));
            }

            query.AppendLine(") as e");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //COUNT- TOTAL
            query.AppendLine("SELECT COUNT(c.CustomerID) totalCount");
            query.AppendLine("FROM tblCustomer c WITH (NOLOCK)");
            //query.AppendLine("LEFT JOIN tblCustomerGroup g On c.CustomerGroupID = CONVERT(varchar(255),g.CustomerGroupID)");
            //query.AppendLine("LEFT JOIN tblCompartment p On c.CompartmentID = CONVERT(varchar(255),p.CompartmentID)");
            query.AppendLine("where 1 = 1");

            //Check theo nhóm customer group
            if (!string.IsNullOrWhiteSpace(strCustomerGroup))
            {
                query.AppendLine(string.Format("and c.CustomerGroupID IN ({0}) ", strCustomerGroup));
            }

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (c.CustomerName LIKE N'%{0}%' or c.CustomerCode LIKE '%{0}%' or c.Mobile LIKE N'%{0}%')", KeyWord));

            if (!filterTimeAlmost)
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:00");
                var dt = Convert.ToDateTime(date).AddDays(15).ToString("yyyy/MM/dd HH:mm:59");

                query.AppendLine(string.Format("and c.AccessExpireDate >= '{0}' and c.AccessExpireDate <= '{1}' ", date, dt));
            }
            else
            {
                var dt = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and c.AccessExpireDate <= '{0}' ", dt));
            }

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);

            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            var dtCustomer = list.Tables[0];

            if (dtCustomer != null && dtCustomer.Rows.Count > 0)
            {
                var strListId = "";
                foreach (DataRow item in dtCustomer.Rows)
                {
                    strListId += item["CustomerID"] + ",";
                }

                var dtCard = GetCardByCustomer(strListId);

                foreach (DataRow iCus in dtCustomer.Rows)
                {
                    var cardNo = "";
                    var cardNumber = "";
                    var plate = "";
                    foreach (DataRow iCard in dtCard.Rows)
                    {
                        if (iCard["CustomerID"].ToString() == iCus["CustomerID"].ToString())
                        {
                            // cardNo
                            if (cardNo == "")
                                cardNo = iCard["CardNo"].ToString();
                            else
                                cardNo = cardNo + ";" + iCard["CardNo"].ToString();


                            // cardNo
                            if (cardNumber == "")
                                cardNumber = iCard["CardNumber"].ToString();
                            else
                                cardNumber = cardNumber + ";" + iCard["CardNumber"].ToString();

                            //plate
                            var _plate = iCard["Plate1"].ToString();
                            if (iCard["Plate2"].ToString() != "")
                                _plate = _plate + "_" + iCard["Plate2"].ToString();
                            if (iCard["Plate3"].ToString() != "")
                                _plate = _plate + "_" + iCard["Plate3"].ToString();

                            if (plate == "")
                                plate = _plate;
                            else
                                plate = plate + ";" + _plate;
                        }

                    }

                    iCus["CardNo"] = cardNo;
                    iCus["CardNumber"] = cardNumber;
                    iCus["Plate"] = plate;

                }
            }

            return Data.SqlHelper.ExcuteSQL.ConvertTo<ReportCustomerExpire_Access>(dtCustomer);

        }

        public DataTable GetReportCustomerExpireExcel_Access(string KeyWord, List<string> CustomerGroupId, string currentUser = "", string date = "", bool filterTimeAlmost = true)
        {
            if (!string.IsNullOrWhiteSpace(date))
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                date = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }

            //  CustomerGroupID = ToListGUID(CustomerGroupID);

            var strCustomerGroup = "";
            // var objUser = GetCustomerGroupsByUserId(currentUser, ref strCustomerGroup);

            var query = new StringBuilder();

            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY c.SortOrder desc) AS 'STT', c.[CustomerCode] AS 'Mã khách hàng', c.[CustomerName] AS 'Tên khách hàng', g.CustomerGroupName AS 'Nhóm khách hàng', c.[Inactive],'' AS 'Trạng thái', c.[CustomerID], '' As 'Số thẻ', '' AS 'Mã thẻ', '' AS 'Biển số', (select convert(varchar(10), c.[AccessExpireDate], 103)) AS 'Ngày hết hạn',c.[UserIDofFinger]");

            query.AppendLine("FROM tblCustomer c WITH (NOLOCK)");
            query.AppendLine("LEFT JOIN tblCustomerGroup g On c.CustomerGroupID = CONVERT(varchar(255),g.CustomerGroupID)");

            query.AppendLine("where 1 = 1");

            //Check theo nhóm customer group
            if (!string.IsNullOrWhiteSpace(strCustomerGroup))
            {
                query.AppendLine(string.Format("and c.CustomerGroupID IN ({0}) ", strCustomerGroup));
            }

            //Nhom KH
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND c.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("and (c.CustomerName LIKE N'%{0}%' or c.CustomerCode LIKE '%{0}%' or c.Mobile LIKE N'%{0}%' or c.UserIDofFinger LIKE N'%{0}%')", KeyWord));

            if (!filterTimeAlmost)
            {
                date = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:00");
                var dt = Convert.ToDateTime(date).AddDays(15).ToString("yyyy/MM/dd HH:mm:59");

                query.AppendLine(string.Format("and c.AccessExpireDate >= '{0}' and c.AccessExpireDate <= '{1}' ", date, dt));
            }
            else
            {
                var dt = Convert.ToDateTime(date).ToString("yyyy/MM/dd HH:mm:59");
                query.AppendLine(string.Format("and c.AccessExpireDate <= '{0}' ", dt));
            }


            var dtCustomer = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];

            if (dtCustomer != null && dtCustomer.Rows.Count > 0)
            {
                var strListId = "";
                foreach (DataRow item in dtCustomer.Rows)
                {
                    strListId += item["CustomerID"] + ",";

                    if (item["Inactive"].ToString().Contains("True"))
                    {
                        item["Trạng thái"] = "Dừng hoạt động";

                    }
                    else
                    {
                        item["Trạng thái"] = "Hoạt động";
                    }
                }

                var dtCard = GetCardByCustomer(strListId);

                foreach (DataRow iCus in dtCustomer.Rows)
                {
                    var cardNo = "";
                    var cardNumber = "";
                    var plate = "";
                    foreach (DataRow iCard in dtCard.Rows)
                    {
                        if (iCard["CustomerID"].ToString() == iCus["CustomerID"].ToString())
                        {
                            // cardNo
                            if (cardNo == "")
                                cardNo = iCard["CardNo"].ToString();
                            else
                                cardNo = cardNo + ";" + iCard["CardNo"].ToString();


                            // cardNo
                            if (cardNumber == "")
                                cardNumber = iCard["CardNumber"].ToString();
                            else
                                cardNumber = cardNumber + ";" + iCard["CardNumber"].ToString();

                            //plate
                            var _plate = iCard["Plate1"].ToString();
                            if (iCard["Plate2"].ToString() != "")
                                _plate = _plate + "_" + iCard["Plate2"].ToString();
                            if (iCard["Plate3"].ToString() != "")
                                _plate = _plate + "_" + iCard["Plate3"].ToString();

                            if (plate == "")
                                plate = _plate;
                            else
                                plate = plate + ";" + _plate;
                        }

                    }

                    iCus["Số thẻ"] = cardNo;
                    iCus["Mã thẻ"] = cardNumber;
                    iCus["Biển số"] = plate;

                }
            }

            return dtCustomer;

        }

        public DataTable GetCardByCustomer(string customerIdList)
        {
            var str = "";
            if (!string.IsNullOrWhiteSpace(customerIdList))
            {
                var arr = customerIdList.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                var count = 0;
                foreach (var item in arr)
                {
                    count++;
                    str += string.Format("'{0}'{1}", item, count != arr.Length ? "," : "");
                }
            }


            var query = new StringBuilder();
            query.AppendLine(string.Format("select CustomerID, CardNo, CardNumber, Plate1, Plate2, Plate3 from tblCard where CustomerID IN ({0})", str));

            return Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #region ReportLockerEvent
        public List<tblLockerEvent_Report> GetReportLockerEvent(string KeyWord, string controllerID, string Type, string CardGroupID, string fromdate, string todate, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            //danh sách
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.DateCreated desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT * from tblLockerEvent");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {
                var t = Type.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND EventType IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //if (!string.IsNullOrWhiteSpace(Type))
            //{
            //    query.AppendLine(string.Format("AND EventType = '{0}'", Type));
            //}


            query.AppendLine(") AS a");
            query.AppendLine(") AS b");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //tổng
            query.AppendLine("SELECT COUNT(*) AS totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT Id from tblLockerEvent");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {
                var t = Type.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND EventType IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") AS a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            var listdata = ExcuteSQLEvent.ConvertTo<tblLockerEvent_Report>(list.Tables[0]);

            if (listdata != null && listdata.Count > 0)
            {
                var listcardgroup = _tblCardGroupService.GetAllActive();
                var listController = _tblLockerControllerService.GetAll();
                foreach (var item in listdata)
                {
                    if (!string.IsNullOrEmpty(item.CardGroupID))
                    {
                        var objcardgr = listcardgroup.FirstOrDefault(n => n.CardGroupID == Guid.Parse(item.CardGroupID));
                        item.CardGroupID = objcardgr != null ? objcardgr.CardGroupName : "";
                    }
                    if (!string.IsNullOrEmpty(item.ControllerID))
                    {
                        var objcontroller = listController.FirstOrDefault(n => n.Id == item.ControllerID);
                        item.ControllerID = objcontroller != null ? objcontroller.ControllerName : "";
                    }
                }
            }


            return listdata;
        }

        public DataTable GetReportLockerEvent_Excel(string KeyWord, string controllerID, string Type, string CardGroupID, string fromdate, string todate, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            //danh sách
            query.AppendLine("SELECT RowNumber,CardNo,CardNumber,CardGroupID,LockerIndex,ControllerID,EventType,EventCode,'' AS EventCodeValue,DateCreated,'' as DateCreatedValue FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.DateCreated desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT * from tblLockerEvent");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {
                var t = Type.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND EventType IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") AS a");
            query.AppendLine(") AS b");

            //tổng
            query.AppendLine("SELECT COUNT(*) AS totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT Id from tblLockerEvent");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {
                var t = Type.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND EventType IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            query.AppendLine(") AS a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            var dt = list.Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                var listcardgroup = _tblCardGroupService.GetAllActive();
                var listController = _tblLockerControllerService.GetAll();
                foreach (DataRow dr in dt.Rows)
                {
                    if (!string.IsNullOrEmpty(dr["CardGroupID"].ToString()))
                    {
                        var objcardgr = listcardgroup.FirstOrDefault(n => n.CardGroupID == Guid.Parse(dr["CardGroupID"].ToString()));
                        dr["CardGroupID"] = objcardgr != null ? objcardgr.CardGroupName : "";
                    }
                    if (!string.IsNullOrEmpty(dr["ControllerID"].ToString()))
                    {
                        var conid = dr["ControllerID"].ToString();
                        var objcontroller = listController.FirstOrDefault(n => n.Id == conid);
                        dr["ControllerID"] = objcontroller != null ? objcontroller.ControllerName : "";
                    }

                    switch (dr["EventType"].ToString())
                    {
                        case "1":
                            dr["EventType"] = " Nạp cố định";
                            break;
                        case "2":
                            dr["EventType"] = "Thẻ tức thời";
                            break;
                        case "3":
                            dr["EventType"] = "Nhận dạng khuôn mặt";
                            break;
                    }
                    switch (dr["EventCode"].ToString())
                    {
                        case "1":
                            dr["EventCodeValue"] = "Gửi đồ";
                            break;
                        case "2":
                            dr["EventCodeValue"] = "Lấy đồ";
                            break;
                    }

                    dr["DateCreatedValue"] = Convert.ToDateTime(dr["DateCreated"]).ToString("dd/MM/yyyy HH:mm:ss");
                }

                dt.Columns.Remove("DateCreated");
                dt.Columns.Remove("EventCode");
            }


            return dt;
        }
        #endregion

        #region FPT
        public List<AlarmTurnFPT> GetAlarmExceededTurn_FPT(string KeyWord, string fromdate, string todate, string CardGroupID, string turn, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var database = "MPARKING";

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[turn] desc) as RowNumber,a.*,c.CardGroupName");
            query.AppendLine("FROM(");

            query.AppendLine("select e.CardGroupID,e.PlateOut,count(e.Id) as  turn from (");

            query.AppendLine("select CAST(CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as PlateOut,CardGroupID, Id from tblCardEvent e");
            query.AppendLine("where e.IsDelete = 'False' and e.EventCode = '2'");

            //query.AppendLine("and e.PlateOut != '' and e.PlateOut is not null");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateIn] LIKE '%{0}%' )", KeyWord));

            query.AppendLine(") as e");
            query.AppendLine("where e.PlateOut != '' and e.PlateOut is not null");
            query.AppendLine("group by e.PlateOut,e.CardGroupID");
            query.AppendLine(") as a");
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on a.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));

            if (!string.IsNullOrEmpty(turn))
            {
                query.AppendLine(string.Format("where turn > {0}", turn));
            }


            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //tổng

            query.AppendLine("select count(a.PlateOut) as totalCount");
            query.AppendLine("FROM(");

            query.AppendLine("select e.CardGroupID,e.PlateOut,count(e.Id) as  turn from (");

            query.AppendLine("select CAST(CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as PlateOut,CardGroupID, Id from tblCardEvent e");
            query.AppendLine("where e.IsDelete = 'False' and e.EventCode = '2'");

            //query.AppendLine("and e.PlateOut != '' and e.PlateOut is not null");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }


            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateIn] LIKE '%{0}%' )", KeyWord));

            query.AppendLine(") as e");
            query.AppendLine("where e.PlateOut != '' and e.PlateOut is not null");
            query.AppendLine("group by e.PlateOut,e.CardGroupID");
            query.AppendLine(") as a");
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on a.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));

            if (!string.IsNullOrEmpty(turn))
            {
                query.AppendLine(string.Format("where turn > {0}", turn));
            }

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<AlarmTurnFPT>(list.Tables[0]);
        }

        public DataTable GetAlarmExceededTurn_FPTExcel(string KeyWord, string fromdate, string todate, string CardGroupID, string turn, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var database = "MPARKING";

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT RowNumber as 'STT',PlateOut as 'Biển số',CardGroupName as 'Nhóm thẻ',turn as 'Số lượt' FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[turn] desc) as RowNumber,a.*,c.CardGroupName");
            query.AppendLine("FROM(");

            query.AppendLine("select e.CardGroupID,e.PlateOut,count(e.Id) as  turn from (");

            query.AppendLine("select CAST(CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as PlateOut,CardGroupID, Id from tblCardEvent e");
            query.AppendLine("where e.IsDelete = 'False' and e.EventCode = '2'");

            //query.AppendLine("and e.PlateOut != '' and e.PlateOut is not null");

            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate));

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateIn] LIKE '%{0}%' )", KeyWord));

            query.AppendLine(") as e");
            query.AppendLine("where e.PlateOut != '' and e.PlateOut is not null");
            query.AppendLine("group by e.PlateOut,e.CardGroupID");
            query.AppendLine(") as a");
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on a.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));

            if (!string.IsNullOrEmpty(turn))
            {
                query.AppendLine(string.Format("where turn > {0}", turn));
            }


            query.AppendLine(") as C1");

            //tổng           

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return list.Tables[0];
        }

        public List<AlarmNotUseFPT> GetAlarmNotUse_FPT(string KeyWord, List<string> CustomerGroupID, string active, string fromdate, string todate, string CardGroupID, string number, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var database = "MPARKING";

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DateTimeOut] asc) as RowNumber,a.* from (");
            query.AppendLine("Select top 1 with ties ca.CardNumber,ca.CardNo,c.CardGroupName,(ca.Plate1 + ';' + ISNULL(ca.Plate2,'') + ';' + ISNULL(ca.Plate3,'')) as PlateOut,cus.CustomerName,e.DateTimeOut,(");

            query.AppendLine("DATEDIFF(day,e.DateTimeOut,GETDATE())) as Number,cg.CustomerGroupName,ca.IsLock From tblCardEvent e");
            query.AppendLine(string.Format("left join {0}.dbo.tblCard ca on e.CardNumber = ca.CardNumber", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on e.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomer cus on ca.CustomerID = CONVERT(nvarchar(50),cus.CustomerID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomerGroup cg on cus.CustomerGroupID = CONVERT(nvarchar(50),cg.CustomerGroupID)", database));
            query.AppendLine("where e.IsDelete = 'False' and ca.IsDelete = 'False'  and e.EventCode = '2' and c.CardType IN ('0','2')");


            //query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND cg.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }


            if (!string.IsNullOrWhiteSpace(active))
            {
                query.AppendLine(string.Format("AND ca.IsLock = {0}", active));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ca.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR  ca.[CardNumber] LIKE '%{0}%' OR  ca.[CardNo] LIKE '%{0}%' OR  cus.[CustomerName] LIKE N'%{0}%' OR  ca.[Plate1] LIKE '%{0}%' OR  ca.[Plate2] LIKE '%{0}%' OR  ca.[Plate3] LIKE '%{0}%' )", KeyWord));

            query.AppendLine("Order By Row_Number() over (Partition By e.CardNumber Order By e.DateTimeOut Desc)");
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(number))
            {
                query.AppendLine(string.Format("where a.Number > {0}", number));
            }

            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //tổng

            query.AppendLine("select count(a.[DateTimeOut]) as totalCount from (");
            query.AppendLine("Select top 1 with ties ca.CardNumber,ca.CardNo,c.CardGroupName,(ca.Plate1 + ';' + ISNULL(ca.Plate2,'') + ';' + ISNULL(ca.Plate3,'')) as PlateOut,cus.CustomerName,e.DateTimeOut,(");

            query.AppendLine("DATEDIFF(day,e.DateTimeOut,GETDATE())) as Number,cg.CustomerGroupName,ca.IsLock From tblCardEvent e");
            query.AppendLine(string.Format("left join {0}.dbo.tblCard ca on e.CardNumber = ca.CardNumber", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on e.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomer cus on ca.CustomerID = CONVERT(nvarchar(50),cus.CustomerID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomerGroup cg on cus.CustomerGroupID = CONVERT(nvarchar(50),cg.CustomerGroupID)", database));
            query.AppendLine("where e.IsDelete = 'False' and ca.IsDelete = 'False'  and e.EventCode = '2' and c.CardType IN ('0','2')");


            //query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND cg.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }


            if (!string.IsNullOrWhiteSpace(active))
            {
                query.AppendLine(string.Format("AND ca.IsLock = {0}", active));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ca.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR  ca.[CardNumber] LIKE '%{0}%' OR  ca.[CardNo] LIKE '%{0}%' OR  cus.[CustomerName] LIKE N'%{0}%' OR  ca.[Plate1] LIKE '%{0}%' OR  ca.[Plate2] LIKE '%{0}%' OR  ca.[Plate3] LIKE '%{0}%' )", KeyWord));

            query.AppendLine("Order By Row_Number() over (Partition By e.CardNumber Order By e.DateTimeOut Desc)");
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(number))
            {
                query.AppendLine(string.Format("where a.Number > {0}", number));
            }


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<AlarmNotUseFPT>(list.Tables[0]);
        }

        public DataTable GetAlarmNotUse_FPTExcel(string KeyWord, List<string> CustomerGroupID, string active, string fromdate, string todate, string CardGroupID, string number, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var database = "MPARKING";

            var query = new StringBuilder();
            //query.AppendLine("");

            query.AppendLine("SELECT RowNumber as 'STT',CardNo as 'Số thẻ',CardNumber as 'Mã thẻ',CardGroupName as 'Nhóm thẻ',PlateOut as 'Biển số',CustomerName as 'Khách hàng',CustomerGroupName as 'Nhóm KH',(CASE WHEN IsLock = 'False' THEN N'Hoạt động' ELSE N'Khóa' END) as 'Trạng thái thẻ',(select convert(varchar(10), DateTimeOut, 103) + ' ' + left(convert(varchar(32), DateTimeOut, 108), 8)) as 'Thời điểm cuối',Number as 'Số ngày không sử dụng' FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DateTimeOut] asc) as RowNumber,a.* from (");
            query.AppendLine("Select top 1 with ties ca.CardNumber,ca.CardNo,c.CardGroupName,(ca.Plate1 + ';' + ISNULL(ca.Plate2,'') + ';' + ISNULL(ca.Plate3,'')) as PlateOut,cus.CustomerName,e.DateTimeOut,(");

            query.AppendLine("DATEDIFF(day,e.DateTimeOut,GETDATE())) as Number,cg.CustomerGroupName,ca.IsLock From tblCardEvent e");
            query.AppendLine(string.Format("left join {0}.dbo.tblCard ca on e.CardNumber = ca.CardNumber", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on e.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomer cus on ca.CustomerID = CONVERT(nvarchar(50),cus.CustomerID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomerGroup cg on cus.CustomerGroupID = CONVERT(nvarchar(50),cg.CustomerGroupID)", database));
            query.AppendLine("where e.IsDelete = 'False' and ca.IsDelete = 'False'  and e.EventCode = '2' and c.CardType IN ('0','2')");


            //query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND cg.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }


            if (!string.IsNullOrWhiteSpace(active))
            {
                query.AppendLine(string.Format("AND ca.IsLock = {0}", active));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ca.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR  ca.[CardNumber] LIKE '%{0}%' OR  ca.[CardNo] LIKE '%{0}%' OR  cus.[CustomerName] LIKE N'%{0}%' OR  ca.[Plate1] LIKE '%{0}%' OR  ca.[Plate2] LIKE '%{0}%' OR  ca.[Plate3] LIKE '%{0}%' )", KeyWord));

            query.AppendLine("Order By Row_Number() over (Partition By e.CardNumber Order By e.DateTimeOut Desc)");
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(number))
            {
                query.AppendLine(string.Format("where a.Number > {0}", number));
            }

            query.AppendLine(") as C1");


            //tổng

            query.AppendLine("select count(a.[DateTimeOut]) as totalCount from (");
            query.AppendLine("Select top 1 with ties ca.CardNumber,ca.CardNo,c.CardGroupName,e.PlateOut,cus.CustomerName,e.DateTimeOut,(");

            query.AppendLine("DATEDIFF(day,e.DateTimeOut,GETDATE())) as Number From tblCardEvent e");
            query.AppendLine(string.Format("left join {0}.dbo.tblCard ca on e.CardNumber = ca.CardNumber", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCardGroup c on e.CardGroupID = CONVERT(nvarchar(50),c.CardGroupID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomer cus on ca.CustomerID = CONVERT(nvarchar(50),cus.CustomerID)", database));
            query.AppendLine(string.Format("left join {0}.dbo.tblCustomerGroup cg on cus.CustomerGroupID = CONVERT(nvarchar(50),cg.CustomerGroupID)", database));
            query.AppendLine("where e.IsDelete = 'False' and ca.IsDelete = 'False'  and e.EventCode = '2' and c.CardType IN ('0','2')");


            //query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate));

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND cg.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }


            if (!string.IsNullOrWhiteSpace(active))
            {
                query.AppendLine(string.Format("AND ca.IsLock = {0}", active));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ca.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%' OR  e.[PlateOut] LIKE '%{0}%' OR  ca.[CardNumber] LIKE '%{0}%' OR  ca.[CardNo] LIKE '%{0}%' OR  cus.[CustomerName] LIKE N'%{0}%' OR  ca.[Plate1] LIKE '%{0}%' OR  ca.[Plate2] LIKE '%{0}%' OR  ca.[Plate3] LIKE '%{0}%' )", KeyWord));

            query.AppendLine("Order By Row_Number() over (Partition By e.CardNumber Order By e.DateTimeOut Desc)");
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(number))
            {
                query.AppendLine(string.Format("where a.Number > {0}", number));
            }


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return list.Tables[0];
        }

        public List<ReportChartInOutByLane> FPT_GetChartInOutByTime(string LaneID, string _fromdate, string _todate)
        {

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var fdate = Convert.ToDateTime(_fromdate);
            var tdate = Convert.ToDateTime(_todate);
            string type = "hh";
            if (fdate.Year != tdate.Year)
            {
                type = "yy";
            }
            else
            {
                if (fdate.Month != tdate.Month)
                {
                    type = "mm";
                }
                else
                {
                    if (fdate.Day != tdate.Day)
                    {
                        type = "dd";
                    }
                }
            }

            var dtTime = FPT_GetTimeByFromDateToDate_v2(_fromdate, _todate, type);
            string format = "";
            switch (type)
            {
                case "hh":
                    format = "HH:mm:ss";
                    break;
                case "dd":
                    format = "dd";
                    break;
                case "mm":
                    format = "MM";
                    break;
                case "yy":
                    format = "yyyy";
                    break;
            }

            var list = new List<ReportChartInOutByLane>();
            int count = 0;
            foreach (DataRow item in dtTime.Rows)
            {
                count++;
                //số xe vào
                long _totalNumIn = 0;
                long _totalNumOut = 0;
                var name = "";

                _totalNumIn = long.Parse(item["NumberIn"].ToString());
                _totalNumOut = long.Parse(item["NumberOut"].ToString());

                switch (type)
                {
                    case "hh":
                        name = Convert.ToDateTime(item["Fdate"].ToString()).ToString(format) + " - " + Convert.ToDateTime(item["Dates"].ToString()).ToString(format);
                        break;
                    case "dd":
                        name = "Ngày " + Convert.ToDateTime(item["Dates"].ToString()).ToString(format);
                        break;
                    case "mm":
                        name = "Tháng " + Convert.ToDateTime(item["Dates"].ToString()).ToString(format);
                        break;
                    case "yy":
                        name = "Năm " + Convert.ToDateTime(item["Dates"].ToString()).ToString(format);
                        break;
                }
                //if (type.Equals("hh"))
                //{

                //}
                //else
                //{
                //    name = Convert.ToDateTime(item["Dates"].ToString()).ToString(format) + string.Format("{0}", count == dtTime.Rows.Count ? "" : " - " + Convert.ToDateTime(item["Fdate"].ToString()).ToString(format));
                //}
                //if (_totalNumIn > 0 || _totalNumOut > 0)
                //{
                var newobj = new ReportChartInOutByLane
                {
                    LaneName = name,
                    TotalVehicleIn = _totalNumIn.ToString(),
                    TotalVehicleOut = _totalNumOut.ToString()
                };

                list.Add(newobj);
                //}

            }

            return list;
        }

        public DataTable FPT_GetTimeByFromDateToDate(string _fromdate, string _todate, string type)
        {
            var query = new StringBuilder();
            query.AppendLine("DECLARE @minDateTime AS DATETIME;");
            query.AppendLine("DECLARE @maxDateTime AS DATETIME;");
            query.AppendLine(string.Format("SET @minDateTime = '{0}';", _fromdate));
            query.AppendLine(string.Format("SET @maxDateTime = '{0}';", _todate));
            query.AppendLine("WITH Dates_CTE");
            query.AppendLine("AS (SELECT ");

            switch (type)
            {
                case "hh":
                    query.AppendLine("(Case when CONVERT(datetime,FORMAT(Dateadd(hh, 1, @minDateTime),'yyyy-MM-dd HH:00:00.000')) < @maxDateTime ");
                    query.AppendLine("then CONVERT(datetime,FORMAT(Dateadd(hh, 1, @minDateTime),'yyyy-MM-dd HH:00:00.000')) else @maxDateTime END) AS Dates");
                    query.AppendLine(", @minDateTime as Fdate");
                    break;
                case "dd":
                    query.AppendLine("@minDateTime AS Dates, CONVERT(datetime,FORMAT(Dateadd(dd, 1, @minDateTime),'yyyy-MM-dd 00:00:00.000')) AS Fdate");
                    break;
                case "mm":
                    query.AppendLine("@minDateTime AS Dates, CONVERT(datetime, FORMAT(Dateadd(mm, 1, @minDateTime), 'yyyy-MM-01 00:00:00.000')) AS Fdate");
                    break;
                case "yy":
                    query.AppendLine("@minDateTime AS Dates, CONVERT(datetime,FORMAT(Dateadd(YEAR, 1, @minDateTime),'yyyy-01-01 00:00:00.000')) AS Fdate");
                    break;
            }

            query.AppendLine("UNION ALL");
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) < @maxDateTime then Dateadd({0}, 1, Dates) else @maxDateTime END),Dates", type));
                    break;
                case "dd":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd(dd, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-dd 00:00:00.000'))) <= "));
                    query.AppendLine(string.Format("@maxDateTime then Dateadd(dd, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-dd 00:00:00.000'))) END)"));
                    query.AppendLine(string.Format(",(CASE When DATEPART(dd,Dateadd(dd, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-dd 00:00:00.000')))) = DATEPART(dd,@maxDateTime) "));
                    query.AppendLine(string.Format("and @maxDateTime > Dateadd(dd, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-dd 00:00:00.000'))) then @maxDateTime"));
                    query.AppendLine(string.Format("else  Dateadd(dd, 2, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-dd 00:00:00.000'))) END)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd(mm, 1,CONVERT(datetime,FORMAT(Dates,'yyyy-MM-01 00:00:00.000'))) "));
                    query.AppendLine(string.Format("<= @maxDateTime then Dateadd(mm, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-01 00:00:00.000'))) END),"));
                    query.AppendLine(string.Format("(CASE When DATEPART(MONTH,Dateadd(mm, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-01 00:00:00.000')))) = DATEPART(MONTH,@maxDateTime) "));
                    query.AppendLine(string.Format("and @maxDateTime > Dateadd(mm, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-01 00:00:00.000'))) then @maxDateTime"));
                    query.AppendLine(string.Format("else  Dateadd(mm, 2, CONVERT(datetime,FORMAT(Dates,'yyyy-MM-01 00:00:00.000'))) END)"));
                    break;
                case "yy":
                    query.AppendLine("SELECT (Case when Dateadd(yy, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-01-01 00:00:00.000'))) <= ");
                    query.AppendLine("@maxDateTime then Dateadd(yy, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-01-01 00:00:00.000'))) END)");
                    query.AppendLine(",(CASE When DATEPART(yy,Dateadd(yy, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-01-01 00:00:00.000')))) = DATEPART(yy,@maxDateTime) ");
                    query.AppendLine("and @maxDateTime > Dateadd(yy, 1, CONVERT(datetime,FORMAT(Dates,'yyyy-01-01 00:00:00.000'))) then @maxDateTime");
                    query.AppendLine("else  Dateadd(yy, 2, CONVERT(datetime,FORMAT(Dates,'yyyy-01-01 00:00:00.000'))) END)");
                    break;
            }

            query.AppendLine("FROM   Dates_CTE");
            query.AppendLine("WHERE  Dates < @maxDateTime)");
            query.AppendLine("SELECT *");

            query.AppendLine(",(SELECT COUNT(ce.[Id]) AS TotalVehicleIn FROM tblCardEvent ce WITH(NOLOCK) where ce.[IsDelete] = 0");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Dates), 121)"));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "yy":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
            }
            query.AppendLine(") AS NumberIn,");
            query.AppendLine("(SELECT COUNT(ce.[Id]) AS TotalVehicleOut FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0 AND ce.[EventCode] = '2'");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Dates), 121)"));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "yy":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
            }
            query.AppendLine(") AS NumberOut");
            query.AppendLine("FROM   Dates_CTE WHERE Dates IS NOT NULL");

            switch (type)
            {
                case "hh":
                    query.AppendLine("and Dates > @minDateTime");
                    break;
                case "dd":
                    query.AppendLine("and Fdate != Dateadd(dd, 1, @maxDateTime)");
                    break;
                case "mm":
                    query.AppendLine("and Fdate != Dateadd(mm, 1, @maxDateTime)");
                    break;
                case "yy":
                    query.AppendLine("and Fdate != Dateadd(yy, 1, @maxDateTime)");
                    break;
            }

            query.AppendLine("OPTION (MAXRECURSION 0)");

            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }

        public DataTable FPT_GetTimeByFromDateToDate_v2(string _fromdate, string _todate, string type)
        {
            var query = new StringBuilder();
            query.AppendLine("DECLARE @minDateTime AS DATETIME;");
            query.AppendLine("DECLARE @maxDateTime AS DATETIME;");
            query.AppendLine(string.Format("SET @minDateTime = '{0}';", _fromdate));
            query.AppendLine(string.Format("SET @maxDateTime = '{0}';", _todate));
            query.AppendLine("WITH Dates_CTE");
            query.AppendLine("AS (SELECT ");

            switch (type)
            {
                case "hh":
                    query.AppendLine("(Case when CONVERT(datetime,(CONVERT(char(13), Dateadd(hh, 1, @minDateTime),121) + ':00:00.000')) < @maxDateTime ");
                    query.AppendLine("then CONVERT(datetime,(CONVERT(char(13), Dateadd(hh, 1, @minDateTime),121) + ':00:00.000')) else @maxDateTime END) AS Dates");
                    query.AppendLine(", @minDateTime as Fdate");
                    break;
                case "dd":
                    query.AppendLine("@minDateTime AS Dates, CONVERT(datetime,(CONVERT(char(10), Dateadd(dd, 1, @minDateTime),121))) AS Fdate");
                    break;
                case "mm":
                    query.AppendLine("@minDateTime AS Dates, CONVERT(datetime,(CONVERT(char(8), Dateadd(mm, 1, @minDateTime),121) + '01 00:00:00.000')) AS Fdate");
                    break;
                case "yy":
                    query.AppendLine("@minDateTime AS Dates, CONVERT(datetime,(CONVERT(char(5), Dateadd(YEAR, 1, @minDateTime),121) + '01-01 00:00:00.000')) AS Fdate");
                    break;
            }

            query.AppendLine("UNION ALL");
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd({0}, 1, Dates) < @maxDateTime then Dateadd({0}, 1, Dates) else @maxDateTime END),Dates", type));
                    break;
                case "dd":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd(dd, 1, CONVERT(datetime,(CONVERT(char(10), Dates,121)))) <= "));
                    query.AppendLine(string.Format("@maxDateTime then Dateadd(dd, 1, CONVERT(datetime,(CONVERT(char(10), Dates,121)))) END)"));
                    query.AppendLine(string.Format(",(CASE When DATEPART(dd,Dateadd(dd, 1, CONVERT(datetime,(CONVERT(char(10), Dates,121))))) = DATEPART(dd,@maxDateTime) "));
                    query.AppendLine(string.Format("and @maxDateTime > Dateadd(dd, 1, CONVERT(datetime,(CONVERT(char(10), Dates,121)))) then @maxDateTime"));
                    query.AppendLine(string.Format("else  Dateadd(dd, 2, CONVERT(datetime,(CONVERT(char(10), Dates,121)))) END)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("SELECT (Case when Dateadd(mm, 1,CONVERT(datetime,(CONVERT(char(8), Dates,121) + '01 00:00:00.000'))) "));
                    query.AppendLine(string.Format("<= @maxDateTime then Dateadd(mm, 1, CONVERT(datetime,(CONVERT(char(8), Dates,121) + '01 00:00:00.000'))) END),"));
                    query.AppendLine(string.Format("(CASE When DATEPART(MONTH,Dateadd(mm, 1, CONVERT(datetime,(CONVERT(char(8), Dates,121) + '01 00:00:00.000')))) = DATEPART(MONTH,@maxDateTime) "));
                    query.AppendLine(string.Format("and @maxDateTime > Dateadd(mm, 1, CONVERT(datetime,(CONVERT(char(8), Dates,121) + '01 00:00:00.000'))) then @maxDateTime"));
                    query.AppendLine(string.Format("else  Dateadd(mm, 2, CONVERT(datetime,(CONVERT(char(8), Dates,121) + '01 00:00:00.000'))) END)"));
                    break;
                case "yy":
                    query.AppendLine("SELECT (Case when Dateadd(yy, 1, CONVERT(datetime,(CONVERT(char(5), Dates,121) + '01-01 00:00:00.000'))) <= ");
                    query.AppendLine("@maxDateTime then Dateadd(yy, 1, CONVERT(datetime,(CONVERT(char(5), Dates,121) + '01-01 00:00:00.000'))) END)");
                    query.AppendLine(",(CASE When DATEPART(yy,Dateadd(yy, 1, CONVERT(datetime,(CONVERT(char(5), Dates,121) + '01-01 00:00:00.000')))) = DATEPART(yy,@maxDateTime) ");
                    query.AppendLine("and @maxDateTime > Dateadd(yy, 1, CONVERT(datetime,(CONVERT(char(5), Dates,121) + '01-01 00:00:00.000'))) then @maxDateTime");
                    query.AppendLine("else  Dateadd(yy, 2, CONVERT(datetime,(CONVERT(char(5),  Dates,121) + '01-01 00:00:00.000'))) END)");
                    break;
            }

            query.AppendLine("FROM   Dates_CTE");
            query.AppendLine("WHERE  Dates < @maxDateTime)");
            query.AppendLine("SELECT *");

            query.AppendLine(",(SELECT COUNT(ce.[Id]) AS TotalVehicleIn FROM tblCardEvent ce WITH(NOLOCK) where ce.[IsDelete] = 0");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Dates), 121)"));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "yy":
                    query.AppendLine(string.Format("AND ce.[DateTimeIn] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeIn] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
            }
            query.AppendLine(") AS NumberIn,");
            query.AppendLine("(SELECT COUNT(ce.[Id]) AS TotalVehicleOut FROM tblCardEvent ce WITH (NOLOCK) where ce.[IsDelete] = 0 AND ce.[EventCode] = '2'");

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and ce.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            switch (type)
            {
                case "hh":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Dates), 121)"));
                    break;
                case "dd":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "mm":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
                case "yy":
                    query.AppendLine(string.Format("AND ce.[DateTimeOut] >= CONVERT(VARCHAR, CONVERT(datetime,Dates), 121) AND ce.[DateTimeOut] < CONVERT(VARCHAR, CONVERT(datetime,Fdate), 121)"));
                    break;
            }
            query.AppendLine(") AS NumberOut");
            query.AppendLine("FROM   Dates_CTE WHERE Dates IS NOT NULL");

            switch (type)
            {
                case "hh":
                    query.AppendLine("and Dates > @minDateTime");
                    break;
                case "dd":
                    query.AppendLine("and Fdate != Dateadd(dd, 1, @maxDateTime)");
                    break;
                case "mm":
                    query.AppendLine("and Fdate != Dateadd(mm, 1, @maxDateTime)");
                    break;
                case "yy":
                    query.AppendLine("and Fdate != Dateadd(yy, 1, @maxDateTime)");
                    break;
            }

            query.AppendLine("OPTION (MAXRECURSION 0)");

            return ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];
        }
        #endregion

        #region Bạch Mai

        #region Sổ 2(Báo cáo thuế)

        public string GetStringEventIDs(string num, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref double _totalmoneys)

        {
            int number = 100;

            bool isNumeric = int.TryParse(num, out number);

            if (isNumeric)
            {
                number = Convert.ToInt32(num);
            }
            else
            {
                number = 100;
            }

            var database = "MPARKING";

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("DECLARE @abc nvarchar(max)");
            query.AppendLine("with userData(CardNo,CardNumber,Plate,DatetimeIn,DateTimeOut,CardGroupID,");
            query.AppendLine("CustomerName,LaneIDIn,LaneIDOut,UserIDIn,UserIDOut,Moneys,TotalTimes,Id)");
            query.AppendLine("as(");

            //tblCardEvent
            query.AppendLine(string.Format("SELECT TOP {0} percent e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]", number));
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            query.AppendLine(string.Format("AND e.CardGroupID NOT IN (select CardGroupID from {0}.dbo.[tblCardGroup] c left join {0}.dbo.tblVehicleGroup v on c.VehicleGroupID = CONVERT(nvarchar(50), v.VehicleGroupID) where v.VehicleType IN ('2','3','0'))", database));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));


            query.AppendLine(" )");

            query.AppendLine("SELECT top 1 @abc = STUFF((");
            query.AppendLine("   SELECT ',' + ''''+ Convert(nvarchar(50),Id) + ''''");
            query.AppendLine(" 		FROM userData FOR XML PATH('')), 1, 1, '') FROM userData select @abc as EventIds");


            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]).FirstOrDefault().EventIds;

        }

        public void InsertEventBachMai(string num, string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref double _totalmoneys)

        {
            int number = 100;

            bool isNumeric = int.TryParse(num, out number);

            if (isNumeric)
            {
                number = Convert.ToInt32(num);
            }
            else
            {
                number = 100;
            }

            var database = "MPARKING";

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();


            //tblCardEvent
            query.AppendLine("truncate table NoteFreeTRANSERCO");
            query.AppendLine("BEGIN INSERT INTO NoteFreeTRANSERCO(Id,Note)");
            query.AppendLine(string.Format("SELECT TOP {0} percent NEWID(),e.[Id]", number));
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            query.AppendLine(string.Format("AND e.CardGroupID NOT IN (select CardGroupID from {0}.dbo.[tblCardGroup] c left join {0}.dbo.tblVehicleGroup v on c.VehicleGroupID = CONVERT(nvarchar(50), v.VehicleGroupID) where v.VehicleType IN ('2','3','0'))", database));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));
            query.AppendLine("END");


            ExcuteSQLEvent.Execute(query.ToString());
        }

        public List<ReportDetailMoneyCardDay> GetReportSoHaiNEW(int pageIndex, int pageSize, ref int total, ref double _totalmoneys)

        {
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE Id IN (select Note from NoteFreeTRANSERCO)");

            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE Id IN (select Note from NoteFreeTRANSERCO)");

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }
        public DataTable GetReportSoHaiNEWExcel()

        {
            var query = new StringBuilder();

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian'");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE Id IN (select Note from NoteFreeTRANSERCO)");

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }

        #endregion

        #region Số 3 (chỉ có nhóm xe đạp)
        public List<ReportDetailMoneyCardDay> GetReportS3(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            var database = "MPARKING";

            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine("AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));

            query.AppendLine(string.Format("AND e.CardGroupID IN (select CardGroupID from {0}.dbo.[tblCardGroup] c left join {0}.dbo.tblVehicleGroup v on c.VehicleGroupID = CONVERT(nvarchar(50), v.VehicleGroupID) where v.VehicleType IN ('2','3'))", database));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND e.[LaneIDOut] = '{0}'", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND e.[UserIDOut] = '{0}'", UserID));

            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));

                    //// nhóm thẻ theo User
                    //if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    //{
                    //    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    //    if (t.Any())
                    //    {
                    //        var count = 0;

                    //        query.AppendLine("and e.CardGroupID IN ( ");

                    //        foreach (var item in t)
                    //        {
                    //            count++;

                    //            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    //        }

                    //        query.AppendLine(" )");
                    //    }
                    //}
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");
            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.Moneys) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            query.AppendLine(string.Format("AND e.CardGroupID IN (select CardGroupID from {0}.dbo.[tblCardGroup] c left join {0}.dbo.tblVehicleGroup v on c.VehicleGroupID = CONVERT(nvarchar(50), v.VehicleGroupID) where v.VehicleType IN ('2','3'))", database));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay>(list.Tables[0]);

        }
        public DataTable GetReportS3Excel(string KeyWord, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        {
            var database = "MPARKING";
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền', '' AS 'Tổng thời gian'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian'");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2' AND e.[IsFree] = 0 AND e.[Moneys] > 0");
            query.AppendLine(string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
            query.AppendLine(string.Format("AND e.CardGroupID IN (select CardGroupID from {0}.dbo.[tblCardGroup] c left join {0}.dbo.tblVehicleGroup v on c.VehicleGroupID = CONVERT(nvarchar(50), v.VehicleGroupID) where v.VehicleType IN ('2','3'))", database));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDOut IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian'");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }
        #endregion
        #endregion

        #region Ba Vì
        public List<ReportInvoiceBAVI> GetReportInvoiceBavi(string key, string fromdate, string todate, bool IsFilterByTimeIn, string IsSync, int pageIndex, int pageSize, ref int total)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT CONVERT(nvarchar(50), e.[Id]) as Id, e.[CardNo], e.[CardNumber], CAST(CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut]");
            query.AppendLine(",iv.DateCreated as DateCreatedInvoice, iv.IsSync as IsSync");

            query.AppendLine("FROM dbo.[tblCardEvent] e WITH(NOLOCK)");
            query.AppendLine("INNER JOIN InvoiceBAVI as iv on e.Id = iv.EventId");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

            if (!string.IsNullOrWhiteSpace(key))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", key));

            query.AppendLine(") as a");
            query.AppendLine(") as TEMP");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //Count
            query.AppendLine("SELECT COUNT(a.Id) as totalCount");
            query.AppendLine("FROM ( SELECT e.Id FROM dbo.[tblCardEvent]");
            query.AppendLine("e WITH(NOLOCK)");
            query.AppendLine("INNER JOIN InvoiceBAVI as iv on e.Id = iv.EventId");
            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));
            if (!string.IsNullOrWhiteSpace(key))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", key));
            query.AppendLine(") as a");
            //query.AppendLine(") as TEMP");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportInvoiceBAVI>(list.Tables[0]);
        }

        public bool UpdateInvoiceStatus(string eventId, int isSync)
        {
            var cmd = $"UPDATE InvoiceBAVI SET IsSync = {isSync} WHERE EventId = '{eventId}'";

            return ExcuteSQLEvent.Execute(cmd);
        }
        #endregion

        #region Lào Cai
        public List<ReportDetailMoneyCardDay_LAOCAI> GetReportDetailMoneyCardDay_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id],ISNULL(p.Moneys,0) as MoneyIn,ISNULL(p.PayState,0) as PayState,ISNULL(p.ID,'') as PayInID");
            query.AppendLine("FROM dbo.[tblCardEvent] e");
            query.AppendLine("LEFT JOIN dbo.[PayIn] p ON p.EventID = CONVERT(nvarchar(50), e.Id)");
            query.AppendLine("WHERE e.[IsDelete] = 0 AND e.[IsFree] = 0 AND p.Moneys > 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));

            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));

                    //// nhóm thẻ theo User
                    //if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    //{
                    //    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    //    if (t.Any())
                    //    {
                    //        var count = 0;

                    //        query.AppendLine("and e.CardGroupID IN ( ");

                    //        foreach (var item in t)
                    //        {
                    //            count++;

                    //            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    //        }

                    //        query.AppendLine(" )");
                    //    }
                    //}
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(paystate))
            {
                query.AppendLine(string.Format("WHERE a.PayState = {0}", paystate));
            }


            query.AppendLine(") as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.MoneyIn) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys,ISNULL(p.PayState,0) as PayState, (CASE WHEN p.PayState = 0 THEN 0 ELSE p.Moneys END) as MoneyIn");
            query.AppendLine("FROM dbo.[tblCardEvent] e");
            query.AppendLine("LEFT JOIN dbo.[PayIn] p ON p.EventID = CONVERT(nvarchar(50), e.Id)");
            query.AppendLine("WHERE e.[IsDelete] = 0 AND e.[IsFree] = 0 AND p.Moneys > 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(paystate))
            {
                query.AppendLine(string.Format("WHERE a.PayState = {0}", paystate));
            }

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay_LAOCAI>(list.Tables[0]);

        }

        public List<ReportDetailMoneyCardDay_LAOCAI> Print_GetReportDetailMoneyCardDay_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize, ref int total, ref long _totalmoneys)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.[DatetimeIn] desc) AS RowNumber, a.*");
            query.AppendLine("FROM(");

            //tblCardEvent
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS TotalTimes, e.[Id],ISNULL(p.Moneys,0) as MoneyIn,ISNULL(p.PayState,0) as PayState,ISNULL(p.ID,'') as PayInID");
            query.AppendLine("FROM dbo.[tblCardEvent] e");
            query.AppendLine("LEFT JOIN dbo.[PayIn] p ON p.EventID = CONVERT(nvarchar(50), e.Id)");
            query.AppendLine("WHERE e.[IsDelete] = 0 AND e.[IsFree] = 0 AND p.Moneys > 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));

            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS TotalTimes, le.[Id]");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //if (!string.IsNullOrWhiteSpace(CardGroupID))
                    //    query.AppendLine(string.Format("AND le.[CarType] = '{0}'", CardGroupID));
                    //if (!string.IsNullOrWhiteSpace(LaneID))
                    //    query.AppendLine(string.Format("AND le.[LaneIDOut] = '{0}'", LaneID));
                    //if (!string.IsNullOrWhiteSpace(UserID))
                    //    query.AppendLine(string.Format("AND le.[UserIDOut] = '{0}'", UserID));

                    //// nhóm thẻ theo User
                    //if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    //{
                    //    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    //    if (t.Any())
                    //    {
                    //        var count = 0;

                    //        query.AppendLine("and e.CardGroupID IN ( ");

                    //        foreach (var item in t)
                    //        {
                    //            count++;

                    //            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    //        }

                    //        query.AppendLine(" )");
                    //    }
                    //}
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(paystate))
            {
                query.AppendLine(string.Format("WHERE a.PayState = {0}", paystate));
            }

            query.AppendLine(") as C1");


            //--COUNT TOTAL RECORD
            query.AppendLine("SELECT COUNT(*) totalCount, SUM(a.MoneyIn) AS totalMoney FROM (");
            query.AppendLine("SELECT e.[Id], e.Moneys,ISNULL(p.PayState,0) as PayState, (CASE WHEN p.PayState = 0 THEN 0 ELSE p.Moneys END) as MoneyIn");
            query.AppendLine("FROM dbo.[tblCardEvent] e");
            query.AppendLine("LEFT JOIN dbo.[PayIn] p ON p.EventID = CONVERT(nvarchar(50), e.Id)");
            query.AppendLine("WHERE e.[IsDelete] = 0 AND e.[IsFree] = 0 AND p.Moneys > 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT le.[Id], le.Moneys");
                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");
                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(paystate))
            {
                query.AppendLine(string.Format("WHERE a.PayState = {0}", paystate));
            }

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            _totalmoneys = long.Parse(!string.IsNullOrWhiteSpace(list.Tables[1].Rows[0]["totalMoney"].ToString()) ? list.Tables[1].Rows[0]["totalMoney"].ToString() : "0");
            return ExcuteSQLEvent.ConvertTo<ReportDetailMoneyCardDay_LAOCAI>(list.Tables[0]);

        }
        public DataTable GetReportDetailMoneyCardDayExcel_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        {
            if (!string.IsNullOrEmpty(_fromdate))
            {
                _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(_todate))
            {
                _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();

            query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeIn desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[UserIDIn] AS 'Giám sát vào',a.[MoneyIn] as 'Tiền vào',(CASE WHEN a.PayState = 0 THEN N'Chưa thanh toán' ELSE 'Đã thanh toán' END) as 'Trạng thái tiền vào','' AS 'Tổng thời gian'");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian',ISNULL(p.Moneys,0) as MoneyIn,ISNULL(p.PayState,0) as PayState");
            query.AppendLine("FROM dbo.[tblCardEvent] e");
            query.AppendLine("LEFT JOIN dbo.[PayIn] p ON p.EventID = CONVERT(nvarchar(50), e.Id)");
            query.AppendLine("WHERE e.[IsDelete] = 0 AND e.[IsFree] = 0 AND p.Moneys > 0");
            query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
            // nhóm thẻ theo User
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

            var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
            if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
            {
                if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
                {
                    query.AppendLine("UNION");
                    query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian'");

                    query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

                    query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
                    query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
                    //Nhom the
                    if (!string.IsNullOrWhiteSpace(CardGroupID))
                    {
                        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                    {
                        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.CarType IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //Lan
                    if (!string.IsNullOrWhiteSpace(LaneID))
                    {
                        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.LaneIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }

                    //User
                    if (!string.IsNullOrWhiteSpace(UserID))
                    {
                        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        if (t.Any())
                        {
                            var count = 0;

                            query.AppendLine("and le.UserIDOut IN ( ");

                            foreach (var item in t)
                            {
                                count++;

                                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                            }

                            query.AppendLine(" )");
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(KeyWord))
                        query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
                }
            }
            query.AppendLine(") as a");

            if (!string.IsNullOrEmpty(paystate))
            {
                query.AppendLine(string.Format("WHERE a.PayState = {0}", paystate));
            }

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

            return list.Tables[0];
        }

        //public DataTable GetReportDetailMoneyCardDayExcel_LAOCAI(string KeyWord, string paystate, string UserID, string _fromdate, string _todate, string CardGroupID, string LaneID, int pageIndex, int pageSize)

        //{
        //    if (!string.IsNullOrEmpty(_fromdate))
        //    {
        //        _fromdate = Convert.ToDateTime(_fromdate).ToString("yyyy/MM/dd HH:mm:ss");
        //    }
        //    if (!string.IsNullOrEmpty(_todate))
        //    {
        //        _todate = Convert.ToDateTime(_todate).ToString("yyyy/MM/dd HH:mm:ss");
        //    }
        //    var query = new StringBuilder();

        //    query.AppendLine("select ROW_NUMBER() OVER(ORDER BY a.DatetimeOut desc) AS STT, a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DatetimeIn, 103) + ' ' + left(convert(varchar(32), a.DatetimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra', a.[Moneys] AS 'Tiền ra',a.[MoneyIn] as 'Tiền vào',(CASE WHEN a.PayState = 0 THEN N'Chưa thanh toán' ELSE 'Đã thanh toán' END) as 'Trạng thái tiền vào',(CASE WHEN a.PayState = 0 THEN a.[Moneys] ELSE (a.[Moneys] + a.[MoneyIn]) END) as 'Tổng đã thanh toán' ,'' AS 'Tổng thời gian'");
        //    query.AppendLine("FROM(");
        //    query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateIn] <> '' THEN e.[PlateIn] ELSE e.[PlateOut] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys], '' AS 'Tổng thời gian',ISNULL(p.Moneys,0) as MoneyIn,ISNULL(p.PayState,0) as PayState");
        //    query.AppendLine("FROM dbo.[tblCardEvent] e");
        //    query.AppendLine("LEFT JOIN dbo.[PayIn] p ON p.EventID = CONVERT(nvarchar(50), e.Id)");
        //    query.AppendLine("WHERE e.[IsDelete] = 0 AND e.[IsFree] = 0");
        //    query.AppendLine(string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", _fromdate, _todate));
        //    // nhóm thẻ theo User
        //    if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
        //    {
        //        var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
        //        if (t.Any())
        //        {
        //            var count = 0;

        //            query.AppendLine("and e.CardGroupID IN ( ");

        //            foreach (var item in t)
        //            {
        //                count++;

        //                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //            }

        //            query.AppendLine(" )");
        //        }
        //    }
        //    //Nhom the
        //    if (!string.IsNullOrWhiteSpace(CardGroupID))
        //    {
        //        var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        //        if (t.Any())
        //        {
        //            var count = 0;

        //            query.AppendLine("and e.CardGroupID IN ( ");

        //            foreach (var item in t)
        //            {
        //                count++;

        //                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //            }

        //            query.AppendLine(" )");
        //        }
        //    }

        //    //Lan
        //    if (!string.IsNullOrWhiteSpace(LaneID))
        //    {
        //        var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        //        if (t.Any())
        //        {
        //            var count = 0;

        //            query.AppendLine("and e.LaneIDOut IN ( ");

        //            foreach (var item in t)
        //            {
        //                count++;

        //                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //            }

        //            query.AppendLine(" )");
        //        }
        //    }

        //    //User
        //    if (!string.IsNullOrWhiteSpace(UserID))
        //    {
        //        var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        //        if (t.Any())
        //        {
        //            var count = 0;

        //            query.AppendLine("and e.UserIDOut IN ( ");

        //            foreach (var item in t)
        //            {
        //                count++;

        //                query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //            }

        //            query.AppendLine(" )");
        //        }
        //    }
        //    if (!string.IsNullOrWhiteSpace(KeyWord))
        //        query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR e.[PlateIn] LIKE '%{0}%' OR e.[PlateOut] LIKE '%{0}%')", KeyWord));

        //    var isLoopEvent = ExcuteSQLEvent.GetDataSet("SELECT COUNT(Id) as TotalRow FROM tblLoopEvent", false).Tables[0];
        //    if (isLoopEvent != null && isLoopEvent.Rows.Count > 0)
        //    {
        //        if (isLoopEvent != null && Convert.ToInt32(isLoopEvent.Rows[0]["TotalRow"]) > 0)
        //        {
        //            query.AppendLine("UNION");
        //            query.AppendLine("SELECT '' AS CardNo, '' AS CardNumber, le.[Plate], le.[DatetimeIn], le.[DatetimeOut], le.[CarType], le.[CustomerName], le.[LaneIDIn], le.[LaneIDOut], le.[UserIDIn], le.[UserIDOut], le.[Moneys], '' AS 'Tổng thời gian'");

        //            query.AppendLine("FROM dbo.[tblLoopEvent] le WITH (NOLOCK)");

        //            query.AppendLine("WHERE le.[IsDelete] = 0 and le.[EventCode] = '2' AND le.[IsFree] = 0 AND le.[Moneys] > 0");
        //            query.AppendLine(string.Format("AND le.[DatetimeOut] >= '{0}' AND le.[DatetimeOut] <= '{1}' ", _fromdate, _todate));
        //            //Nhom the
        //            if (!string.IsNullOrWhiteSpace(CardGroupID))
        //            {
        //                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        //                if (t.Any())
        //                {
        //                    var count = 0;

        //                    query.AppendLine("and le.CarType IN ( ");

        //                    foreach (var item in t)
        //                    {
        //                        count++;

        //                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //                    }

        //                    query.AppendLine(" )");
        //                }
        //            }
        //            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
        //            {
        //                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
        //                if (t.Any())
        //                {
        //                    var count = 0;

        //                    query.AppendLine("and le.CarType IN ( ");

        //                    foreach (var item in t)
        //                    {
        //                        count++;

        //                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //                    }

        //                    query.AppendLine(" )");
        //                }
        //            }

        //            //Lan
        //            if (!string.IsNullOrWhiteSpace(LaneID))
        //            {
        //                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        //                if (t.Any())
        //                {
        //                    var count = 0;

        //                    query.AppendLine("and le.LaneIDOut IN ( ");

        //                    foreach (var item in t)
        //                    {
        //                        count++;

        //                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //                    }

        //                    query.AppendLine(" )");
        //                }
        //            }

        //            //User
        //            if (!string.IsNullOrWhiteSpace(UserID))
        //            {
        //                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        //                if (t.Any())
        //                {
        //                    var count = 0;

        //                    query.AppendLine("and le.UserIDOut IN ( ");

        //                    foreach (var item in t)
        //                    {
        //                        count++;

        //                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
        //                    }

        //                    query.AppendLine(" )");
        //                }
        //            }
        //            if (!string.IsNullOrWhiteSpace(KeyWord))
        //                query.AppendLine(string.Format("AND le.[Plate] LIKE '%{0}%'", KeyWord));
        //        }
        //    }
        //    query.AppendLine(") as a");

        //    if (!string.IsNullOrEmpty(paystate))
        //    {
        //        query.AppendLine(string.Format("WHERE a.PayState = {0}", paystate));
        //    }

        //    var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);

        //    return list.Tables[0];
        //}

        #endregion

        private DataTable GetCardGroupsByUserId(string id, ref string cardgroups)
        {
            DataTable dtUser = Data.SqlHelper.ExcuteSQL.GetDataSet("select * from dbo.[User] where Id = '" + id + "'").Tables[0];

            if (dtUser != null && dtUser.Rows.Count > 0)
            {
                var isSystem = Convert.ToBoolean(dtUser.Rows[0]["IsSystem"]);
                if (isSystem)
                {
                    cardgroups = "";
                }
                else
                {
                    var userCardGroups = dtUser.Rows[0]["CardGroupIds"] != null ? dtUser.Rows[0]["CardGroupIds"].ToString() : "";

                    if (!string.IsNullOrWhiteSpace(userCardGroups))
                    {
                        var userCardGroup = userCardGroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                        var str = "";
                        var i = 0;
                        foreach (var item in userCardGroup)
                        {
                            i++;
                            str += string.Format("'{0}'{1}", item, i == userCardGroup.Length ? "" : ",");
                        }

                        cardgroups = str;
                    }
                }

                return dtUser;
            }

            cardgroups = "";

            return null;
        }

        private DataTable GetCustomerGroupsByUserId(string id, ref string customergroups)
        {
            DataTable dtUser = Data.SqlHelper.ExcuteSQL.GetDataSet("select * from dbo.[User] where Id = '" + id + "'").Tables[0];
            if (dtUser != null && dtUser.Rows.Count > 0)
            {
                var isSystem = Convert.ToBoolean(dtUser.Rows[0]["IsSystem"]);
                if (isSystem)
                {
                    customergroups = "";
                }
                else
                {
                    var userCustomerGroups = dtUser.Rows[0]["CustomerGroupIds"] != null ? dtUser.Rows[0]["CustomerGroupIds"].ToString() : "";

                    if (!string.IsNullOrWhiteSpace(userCustomerGroups))
                    {
                        var userCustomerGroup = userCustomerGroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                        var str = "";
                        var i = 0;
                        foreach (var item in userCustomerGroup)
                        {
                            i++;
                            str += string.Format("'{0}'{1}", item, i == userCustomerGroup.Length ? "" : ",");
                        }

                        customergroups = str;
                    }
                }

                return dtUser;
            }


            return null;
        }

        private string ToListGUID(string guid)
        {
            string result = "";

            if (!string.IsNullOrWhiteSpace(guid))
            {
                var temp = guid.Split(',');

                for (int i = 0; i < temp.Count(); i++)
                {
                    if (string.IsNullOrWhiteSpace(temp[i])) continue;

                    result += $"'{temp[i]}',";
                }
            }
            else
            {
                return result;
            }

            if (!string.IsNullOrWhiteSpace(result))
            {
                result = result.Substring(0, result.Length - 1);
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="KeyWord"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="total"></param>
        /// <returns></returns>
        public List<ReportLockerProcess> ReportActionHistoryLoker(string KeyWord, string objcontrol, string fromdate, string todate, string actionLooker, string type, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            //danh sách
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.DateCreated desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT LP.*,U.Name AS UserName, LC.ControllerName from tblLockerProcess LP");
            query.AppendLine("inner join [User] U on U.Id = LP.UserId ");
            query.AppendLine("left join [tblLockerController] LC on LC.Id = LP.ControllerID ");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (LP.CardNo LIKE '%{0}%' OR LP.CardNumber LIKE '%{0}%' OR U.Name LIKE '%{0}%' OR LC.ControllerName LIKE '%{0}%')", KeyWord));

            //search toDate - fromdate
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}' AND LP.DateCreated <= '{1}'", fromdate, todate));
            }
            else if (!string.IsNullOrEmpty(fromdate) && string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}'", fromdate));
            }
            else if (string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated <= '{0}'", todate));
            }

            // tìm kiếm contronler
            if (!string.IsNullOrWhiteSpace(objcontrol))
            {
                var t = objcontrol.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND LP.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // tìm kiếm thao tác tủ đồ
            if (!String.IsNullOrEmpty(actionLooker))
            {
                switch (actionLooker)
                {
                    case "0":
                        query.AppendLine("AND (LP.ActionLocker = 'DELETE')");
                        break;
                    case "1":
                        query.AppendLine("AND (LP.ActionLocker = 'UPLOAD')");
                        break;
                    case "2":
                        query.AppendLine("AND (LP.ActionLocker = 'OPEN')");
                        break;
                }
            }
            // tìm kiếm type tủ đồ
            if (!String.IsNullOrEmpty(type))
            {
                var typeVal = type == "1" ? "1" : type == "2" ? "2" : type == "3" ? "3" : type == "4" ? "4" : String.Empty;
                if (!String.IsNullOrEmpty(typeVal))
                    query.AppendLine(string.Format("AND LP.Type = ('{0}') AND LP.Type is not null", typeVal));
            }

            query.AppendLine(") AS a");
            query.AppendLine(") AS b");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //tổng
            query.AppendLine("SELECT COUNT(*) AS totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT LP.*,U.Name AS UserName, LC.ControllerName from tblLockerProcess LP");
            query.AppendLine("inner join [User] U on U.Id = LP.UserId ");
            query.AppendLine("left join [tblLockerController] LC on LC.Id = LP.ControllerID ");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND(LP.CardNo LIKE '%{0}%' OR LP.CardNumber LIKE '%{0}%' OR U.Name LIKE '%{0}%' OR LC.ControllerName LIKE '%{0}%')", KeyWord));

            //search toDate - fromdate
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}' AND LP.DateCreated <= '{1}'", fromdate, todate));
            }
            else if (!string.IsNullOrEmpty(fromdate) && string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}'", fromdate));
            }
            else if (string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated <= '{0}'", todate));
            }

            // tìm kiếm contronler
            if (!string.IsNullOrWhiteSpace(objcontrol))
            {
                var t = objcontrol.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND LP.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // tìm kiếm thao tác tủ đồ
            if (!String.IsNullOrEmpty(actionLooker))
            {
                switch (actionLooker)
                {
                    case "0":
                        query.AppendLine("AND (LP.ActionLocker = 'DELETE')");
                        break;
                    case "1":
                        query.AppendLine("AND (LP.ActionLocker = 'UPLOAD')");
                        break;
                    case "2":
                        query.AppendLine("AND (LP.ActionLocker = 'OPEN')");
                        break;
                }
            }

            // tìm kiếm type tủ đồ
            if (!String.IsNullOrEmpty(type))
            {
                var typeVal = type == "1" ? "1" : type == "2" ? "2" : type == "3" ? "3" : type == "4" ? "4" : String.Empty;
                if (!String.IsNullOrEmpty(typeVal))
                    query.AppendLine(string.Format("AND LP.Type = ('{0}') AND LP.Type is not null", typeVal));
            }

            query.AppendLine(") AS a");

            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            var listdata = ExcuteSQLEvent.ConvertTo<ReportLockerProcess>(list.Tables[0]);

            if (listdata != null && listdata.Count > 0)
            {
                var listController = _tblControllerService.GetAll();
                foreach (var item in listdata)
                {
                    if (!string.IsNullOrEmpty(item.ControllerID))
                    {
                        var objcontroller = listController.FirstOrDefault(n => n.ControllerID == Guid.Parse(item.ControllerID));
                        item.ControllerID = objcontroller != null ? objcontroller.ControllerName : "";
                    }
                }
            }


            return listdata;
        }


        public DataTable GetReportActionHistoryLoker_Excel(string KeyWord, string controllerID, string fromdate, string todate, string actionLooker, string type, ref int total)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            //danh sách
            query.AppendLine("SELECT RowNumber, CardNo, CardNumber, LockerName, UserName, ControllerName, ActionLocker,'' AS LookerAction, DateCreated,'' AS DateCreatedValue FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.DateCreated desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT LP.*,U.Name AS UserName, LC.ControllerName from tblLockerProcess LP");
            query.AppendLine("inner join [User] U on U.Id = LP.UserId ");
            query.AppendLine("left join [tblLockerController] LC on LC.Id = LP.ControllerID ");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (LP.CardNo LIKE '%{0}%' OR LP.CardNumber LIKE '%{0}%' OR U.Name LIKE '%{0}%' OR LC.ControllerName LIKE '%{0}%')", KeyWord));

            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}' AND LP.DateCreated <= '{1}'", fromdate, todate));
            }
            else if (!string.IsNullOrEmpty(fromdate) && string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}'", fromdate));
            }
            else if (string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated <= '{0}'", todate));
            }

            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND LP.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!String.IsNullOrEmpty(actionLooker))
            {
                if (actionLooker == "0")
                {
                    query.AppendLine("AND (LP.ActionLocker = 'DELETE')");
                }
                else if (actionLooker == "1")
                {
                    query.AppendLine("AND (LP.ActionLocker = 'UPLOAD')");
                }
            }

            // tìm kiếm type tủ đồ
            if (!String.IsNullOrEmpty(type))
            {
                var typeVal = type == "1" ? "1" : type == "2" ? "2" : type == "3" ? "3" : type == "4" ? "4" : String.Empty;
                if (!String.IsNullOrEmpty(typeVal))
                    query.AppendLine(string.Format("AND LP.Type = ('{0}') AND LP.Type is not null", typeVal));
            }

            query.AppendLine(") AS a");
            query.AppendLine(") AS b");

            //tổng
            query.AppendLine("SELECT COUNT(*) AS totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT LP.*,U.Name AS UserName, LC.ControllerName from tblLockerProcess LP");
            query.AppendLine("inner join [User] U on U.Id = LP.UserId ");
            query.AppendLine("left join [tblLockerController] LC on LC.Id = LP.ControllerID ");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND(LP.CardNo LIKE '%{0}%' OR LP.CardNumber LIKE '%{0}%' OR U.Name LIKE '%{0}%' OR LC.ControllerName LIKE '%{0}%')", KeyWord));

            //search toDate - fromdate
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}' AND LP.DateCreated <= '{1}'", fromdate, todate));
            }
            else if (!string.IsNullOrEmpty(fromdate) && string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated >= '{0}'", fromdate));
            }
            else if (string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND LP.DateCreated <= '{0}'", todate));
            }

            //search controller
            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND LP.ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //search action loocker
            if (!String.IsNullOrEmpty(actionLooker))
            {
                switch (actionLooker)
                {
                    case "0":
                        query.AppendLine("AND (LP.ActionLocker = 'DELETE')");
                        break;
                    case "1":
                        query.AppendLine("AND (LP.ActionLocker = 'UPLOAD')");
                        break;
                    case "2":
                        query.AppendLine("AND (LP.ActionLocker = 'OPEN')");
                        break;
                }
            }


            // tìm kiếm type tủ đồ
            if (!String.IsNullOrEmpty(type))
            {
                var typeVal = type == "1" ? "1" : type == "2" ? "2" : type == "3" ? "3" : type == "4" ? "4" : String.Empty;
                if (!String.IsNullOrEmpty(typeVal))
                    query.AppendLine(string.Format("AND LP.Type = ('{0}') AND LP.Type is not null", typeVal));
            }

            query.AppendLine(") AS a");




            var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            var dt = list.Tables[0];

            if (dt != null && dt.Rows.Count > 0)
            {
                var listController = _tblLockerControllerService.GetAll();
                foreach (DataRow dr in dt.Rows)
                {
                    dr["DateCreatedValue"] = Convert.ToDateTime(dr["DateCreated"]).ToString("dd/MM/yyyy HH:mm:ss");

                    switch (dr["ActionLocker"].ToString())
                    {
                        case "DELETE":
                            dr["LookerAction"] = "Hủy";
                            break;
                        case "UPLOAD":
                            dr["LookerAction"] = "Nạp";
                            break;
                        case "OPEN":
                            dr["LookerAction"] = "Mở tủ thủ công";
                            break;
                        default:
                            dr["LookerAction"] = "";
                            break;
                    }
                }
                dt.Columns.Remove("ActionLocker");
                dt.Columns.Remove("DateCreated");
            }


            return dt;
        }

        #region Report Locker Alarm

        /// <summary>
        /// view report loocker Alarm
        /// </summary>
        /// <param name="KeyWord"></param>
        /// <param name="controllerID"></param>
        /// <param name="Type"></param>
        /// <param name="CardGroupID"></param>
        /// <param name="lockerAlarmCode"></param>
        /// <param name="lockerEventCode"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="total"></param>
        /// <returns></returns>
        public List<tblLockerAlarmReport> ReportLokerAlarm(string KeyWord, string controllerID, string Type, string CardGroupID, string lockerAlarmCode, string lockerEventCode, string fromdate, string todate, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();

            //danh sách
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.DateCreated desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT * from tblLockerAlarm");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {


                query.AppendLine(string.Format("AND EventType = {0}", Type));

            }
            if (!string.IsNullOrWhiteSpace(lockerAlarmCode))
            {
                query.AppendLine(string.Format("AND AlarmCode = {0}", lockerAlarmCode));

                //var t = Type.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                //if (t.Any())
                //{
                //    var count = 0;

                //    query.AppendLine("AND AlarmCode IN ( ");

                //    foreach (var item in t)
                //    {
                //        count++;

                //        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                //    }

                //    query.AppendLine(" )");
                //}
            }

            if (!string.IsNullOrWhiteSpace(lockerEventCode))
            {
                query.AppendLine(string.Format("AND EventCode = {0} ", lockerEventCode));
            }

            query.AppendLine(") AS a");
            query.AppendLine(") AS b");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //tổng
            query.AppendLine("SELECT COUNT(*) AS totalCount");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT Id from tblLockerAlarm");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {


                query.AppendLine(string.Format("AND EventType = {0}", Type));

            }
            if (!string.IsNullOrWhiteSpace(lockerAlarmCode))
            {
                query.AppendLine(string.Format("AND AlarmCode = {0}", lockerAlarmCode));
            }

            if (!string.IsNullOrWhiteSpace(lockerEventCode))
            {
                query.AppendLine(string.Format("AND EventCode = {0} ", lockerEventCode));
            }

            query.AppendLine(") AS a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            var listdata = ExcuteSQLEvent.ConvertTo<tblLockerAlarmReport>(list.Tables[0]);

            if (listdata != null && listdata.Count > 0)
            {
                var listcardgroup = _tblCardGroupService.GetAllActive();
                var listController = _tblLockerControllerService.GetAll();
                foreach (var item in listdata)
                {
                    if (!string.IsNullOrEmpty(item.CardGroupID))
                    {
                        var objcardgr = listcardgroup.FirstOrDefault(n => n.CardGroupID == Guid.Parse(item.CardGroupID));
                        item.CardGruopName = objcardgr != null ? objcardgr.CardGroupName : "";
                    }
                    if (!string.IsNullOrEmpty(item.ControllerID))
                    {
                        var objcontroller = listController.FirstOrDefault(n => n.Id == item.ControllerID);
                        item.ControllerName = objcontroller != null ? objcontroller.ControllerName : "";
                    }
                }
            }
            return listdata;
        }

        /// <summary>
        /// Export excel 
        /// </summary>
        /// <param name="KeyWord"></param>
        /// <param name="controllerID"></param>
        /// <param name="Type"></param>
        /// <param name="CardGroupID"></param>
        /// <param name="lockerAlarmCode"></param>
        /// <param name="lockerEventCode"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="total"></param>
        /// <returns></returns>
        public DataTable GetReportLokerAlarm_Excel(string KeyWord, string controllerID, string Type, string CardGroupID, string lockerAlarmCode, string lockerEventCode, string fromdate, string todate, int pageIndex, int pageSize, ref int total)
        {

            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }


            //danh sách
            var query = new StringBuilder();

            //danh sách
            query.AppendLine("SELECT RowNumber ,CardNo,CardNumber, CardGroupID,ControllerID,LockerIndex,EventCode,'' AS EventCodeName, EventType, AlarmCode,DateCreated,'' AS DateCreatedValue  FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.DateCreated desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT * from tblLockerAlarm");
            query.AppendLine("where 1=1");

            if (!string.IsNullOrEmpty(KeyWord))
                query.AppendLine(string.Format("AND (CardNo LIKE '%{0}%' OR CardNumber LIKE '%{0}%')", KeyWord));
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                query.AppendLine(string.Format("AND DateCreated >= '{0}' AND DateCreated <= '{1}'", fromdate, todate));
            }

            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(controllerID))
            {
                var t = controllerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("AND ControllerID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(Type))
            {


                query.AppendLine(string.Format("AND EventType = {0}", Type));

            }
            if (!string.IsNullOrWhiteSpace(lockerAlarmCode))
            {
                query.AppendLine(string.Format("AND AlarmCode = {0}", lockerAlarmCode));
            }

            if (!string.IsNullOrWhiteSpace(lockerEventCode))
            {
                query.AppendLine(string.Format("AND EventCode = {0} ", lockerEventCode));
            }

            query.AppendLine(") AS a");
            query.AppendLine(") AS b");



            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            //var list = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            var dt = list.Tables[0];
            var listdata = ExcuteSQLEvent.ConvertTo<tblLockerAlarmReport>(list.Tables[0]);
            if (dt != null && dt.Rows.Count > 0)
            {
                var listcardgroup = _tblCardGroupService.GetAllActive();
                var listController = _tblLockerControllerService.GetAll();
                foreach (DataRow dr in dt.Rows)
                {
                    if (!string.IsNullOrEmpty(dr["CardGroupID"].ToString()))
                    {
                        var objcardgr = listcardgroup.FirstOrDefault(n => n.CardGroupID == Guid.Parse(dr["CardGroupID"].ToString()));
                        dr["CardGroupID"] = objcardgr != null ? objcardgr.CardGroupName : "";
                    }
                    if (!string.IsNullOrEmpty(dr["ControllerID"].ToString()))
                    {
                        var conid = dr["ControllerID"].ToString();
                        var objcontroller = listController.FirstOrDefault(n => n.Id == conid);
                        dr["ControllerID"] = objcontroller != null ? objcontroller.ControllerName : "";
                    }

                    dr["DateCreatedValue"] = Convert.ToDateTime(dr["DateCreated"]).ToString("dd/MM/yyyy HH:mm:ss");

                    switch (Convert.ToInt32(dr["EventCode"]))
                    {
                        case 1:
                            dr["EventCodeName"] = "Check in";
                            break;
                        case 2:
                            dr["EventCodeName"] = "Check out";
                            break;
                        default:
                            dr["LookerAction"] = "";
                            break;
                    };

                    switch (dr["EventType"].ToString())
                    {
                        case "1":
                            dr["EventType"] = "Nạp cố định";
                            break;
                        case "2":
                            dr["EventType"] = "Nạp tức thời";
                            break;
                        case "3":
                            dr["EventType"] = "Nhận dạng khuôn mặt ";
                            break;
                        default:
                            dr["EventType"] = "";
                            break;
                    };

                    switch (dr["AlarmCode"].ToString())
                    {
                        case "1":
                            dr["AlarmCode"] = "Thẻ không tồn tại";
                            break;
                        case "2":
                            dr["AlarmCode"] = "Thẻ chưa đăng ký";
                            break;
                        case "3":
                            dr["AlarmCode"] = "Chưa gửi đồ";
                            break;
                        default:
                            dr["AlarmCode"] = "";
                            break;
                    }
                }
                dt.Columns.Remove("EventCode");
                dt.Columns.Remove("DateCreated");
            }


            return dt;
        }

        #endregion

        #region Báo cáo thẻ theo căn hộ

        #region Chi tiết
        public List<tblCardCustomViewModel> GetReportDetailCardCompartment(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, bool desc, string columnQuery, ref int total, string ischeckbytime = "0", int pageNumber = 1, int pageSize = 20, string accesslevelids = "", string active = "", bool isfindautocapture = false)
        {
            var sb = new StringBuilder();
            sb.AppendLine("SELECT * FROM (");
            sb.AppendLine(string.Format("Select ROW_NUMBER() OVER(ORDER BY cu.{0} {1}) AS RowNumber,", columnQuery, desc ? "desc" : "asc"));
            sb.AppendLine("CONVERT(varchar(50), c.CardID) AS 'CardID',");
            sb.AppendLine("c.CardNo,");
            sb.AppendLine("c.CardNumber,");
            sb.AppendLine("c.CardGroupID,");
            sb.AppendLine("c.CustomerID,");
            sb.AppendLine("c.ImportDate,");
            sb.AppendLine("c.ExpireDate,");
            sb.AppendLine("c.DateRelease,");
            sb.AppendLine("c.DateRegister,");
            sb.AppendLine("c.AccessExpireDate,");
            sb.AppendLine("c.AccessLevelID,");
            sb.AppendLine("c.Plate1,");
            sb.AppendLine("c.Plate2,");
            sb.AppendLine("c.Plate3,");
            sb.AppendLine("c.VehicleName1,");
            sb.AppendLine("c.VehicleName2,");
            sb.AppendLine("c.VehicleName3,");
            sb.AppendLine("c.IsLock,");
            sb.AppendLine("c.Description as DescriptionCard,");
            sb.AppendLine("cu.Description,");
            sb.AppendLine("cg.CardGroupName,");
            sb.AppendLine("cu.CustomerName,");
            sb.AppendLine("cu.CustomerCode,");
            sb.AppendLine("cu.Mobile AS 'CustomerMobile',");
            sb.AppendLine("cu.Address AS 'CustomerAddress',");
            sb.AppendLine("cu.IDNumber AS 'CustomerIDNumber',");
            sb.AppendLine("cu.CustomerGroupID,");
            sb.AppendLine("cu.CompartmentId,");
            sb.AppendLine("cug.CustomerGroupName");

            sb.AppendLine("FROM tblCard c WITH(NOLOCK)");

            sb.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(varchar(50), cg.CardGroupID)");
            sb.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(varchar(50), cu.CustomerID)");
            sb.AppendLine("LEFT JOIN tblCustomerGroup cug ON cu.CustomerGroupID = CONVERT(varchar(50), cug.CustomerGroupID)");

            sb.AppendLine("WHERE 1=1 AND c.IsDelete = 0");

            if (isfindautocapture)
            {
                sb.AppendLine(" AND c.isAutoCapture = 1");
            }

            //Điều kiện chính

            if (!string.IsNullOrWhiteSpace(key))
            {
                sb.AppendLine(string.Format("AND (c.CardNo LIKE '%{0}%' OR c.CardNumber LIKE '%{0}%' OR c.Plate1 LIKE '%{0}%' OR c.Plate2 LIKE '%{0}%' OR c.Plate3 LIKE '%{0}%' OR c.VehicleName1 LIKE N'%{0}%' OR c.VehicleName2 LIKE N'%{0}%' OR c.VehicleName3 LIKE N'%{0}%' OR cu.CustomerName LIKE N'%{0}%' OR cu.CustomerCode LIKE N'%{0}%' OR cu.Mobile LIKE '%{0}%' OR cu.Address LIKE N'%{0}%' OR cu.CompartmentId LIKE N'%{0}%')", key));
            }


            if (!string.IsNullOrWhiteSpace(cardgroups))
            {
                var t = cardgroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN (");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }


            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                sb.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(customerid))
            {
                sb.AppendLine(string.Format("AND c.CustomerID = '{0}'", customerid));
            }

            if (!string.IsNullOrWhiteSpace(accesslevelids))
            {
                var arrAcLevel = accesslevelids.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                var attAL = string.Join(",", arrAcLevel);

                sb.AppendLine("AND c.AccessLevelID IN (");

                sb.AppendLine(attAL);

                sb.AppendLine(")");
            }

            switch (ischeckbytime)
            {
                case "1"://Ngày nhập thẻ
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        sb.AppendLine(string.Format("AND c.ImportDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ImportDate < tdate);
                        sb.AppendLine(string.Format("AND c.ImportDate < '{0}'", tdate));
                    }
                    break;
                case "2"://Ngày hết hạn
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate >= fdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate < tdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate < '{0}'", tdate));
                    }
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrWhiteSpace(active))
            {
                switch (active)
                {
                    case "0":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "0"));

                        break;
                    case "1":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "1"));

                        break;
                    default:
                        break;
                }
            }

            sb.AppendLine(") as a");
            sb.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageNumber, pageSize));

            var listData = Data.SqlHelper.SqlExQuery<tblCardCustomViewModel>.ExcuteQuery(sb.ToString());

            //Tính tổng
            sb.Clear();
            sb.AppendLine("SELECT COUNT(*) TotalCount");

            sb.AppendLine("FROM tblCard c WITH(NOLOCK)");

            sb.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(varchar(50), cg.CardGroupID)");
            sb.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(varchar(50), cu.CustomerID)");
            sb.AppendLine("LEFT JOIN tblCustomerGroup cug ON cu.CustomerGroupID = CONVERT(varchar(50), cug.CustomerGroupID)");

            sb.AppendLine("WHERE 1=1 AND c.IsDelete = 0");

            if (isfindautocapture)
            {
                sb.AppendLine(" AND c.isAutoCapture = 1");
            }

            //Điều kiện chính

            if (!string.IsNullOrWhiteSpace(key))
            {
                sb.AppendLine(string.Format("AND (c.CardNo LIKE '%{0}%' OR c.CardNumber LIKE '%{0}%' OR c.Plate1 LIKE '%{0}%' OR c.Plate2 LIKE '%{0}%' OR c.Plate3 LIKE '%{0}%' OR c.VehicleName1 LIKE N'%{0}%' OR c.VehicleName2 LIKE N'%{0}%' OR c.VehicleName3 LIKE N'%{0}%' OR cu.CustomerName LIKE N'%{0}%' OR cu.CustomerCode LIKE N'%{0}%' OR cu.Mobile LIKE '%{0}%' OR cu.Address LIKE N'%{0}%' OR cu.CompartmentId LIKE N'%{0}%')", key));
            }

            if (!string.IsNullOrWhiteSpace(cardgroups))
            {
                var t = cardgroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN (");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                sb.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(customerid))
            {
                sb.AppendLine(string.Format("AND c.CustomerID = '{0}'", customerid));
            }

            if (!string.IsNullOrWhiteSpace(accesslevelids))
            {
                var arrAcLevel = accesslevelids.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                var attAL = string.Join(",", arrAcLevel);

                sb.AppendLine("AND c.AccessLevelID IN (");

                sb.AppendLine(attAL);

                sb.AppendLine(")");
            }

            switch (ischeckbytime)
            {
                case "1"://Ngày nhập thẻ
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        sb.AppendLine(string.Format("AND c.ImportDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ImportDate < tdate);
                        sb.AppendLine(string.Format("AND c.ImportDate < '{0}'", tdate));
                    }
                    break;
                case "2"://Ngày hết hạn
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate >= fdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate < tdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate < '{0}'", tdate));
                    }
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrWhiteSpace(active))
            {
                switch (active)
                {
                    case "0":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "0"));

                        break;
                    case "1":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "1"));

                        break;
                    default:
                        break;
                }
            }

            var _total = Data.SqlHelper.SqlExQuery<TotalPaging>.ExcuteQueryFirst(sb.ToString());
            total = _total != null ? _total.TotalCount : 0;

            return listData;
        }

        public List<DetailCardDepartmentExcel> GetDetailCardCompartment_Excel(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, bool desc, string columnQuery, string ischeckbytime = "0", string accesslevelids = "", string active = "", bool isfindautocapture = false)
        {
            var sb = new StringBuilder();
            sb.AppendLine("SELECT * FROM (");
            sb.AppendLine(string.Format("Select ROW_NUMBER() OVER(ORDER BY cu.{0} {1}) AS RowNumber,", columnQuery, desc ? "desc" : "asc"));
            sb.AppendLine("CONVERT(varchar(50), c.CardID) AS 'CardID',");
            sb.AppendLine("c.CardNo,");
            sb.AppendLine("c.CardNumber,");
            sb.AppendLine("c.CardGroupID,");
            sb.AppendLine("c.CustomerID,");
            sb.AppendLine("c.ImportDate,");
            sb.AppendLine("c.ExpireDate,");
            sb.AppendLine("c.DateRelease,");
            sb.AppendLine("c.DateRegister,");
            sb.AppendLine("c.AccessExpireDate,");
            sb.AppendLine("c.AccessLevelID,");
            sb.AppendLine("c.Plate1,");
            sb.AppendLine("c.Plate2,");
            sb.AppendLine("c.Plate3,");
            sb.AppendLine("c.VehicleName1,");
            sb.AppendLine("c.VehicleName2,");
            sb.AppendLine("c.VehicleName3,");
            sb.AppendLine("c.IsLock,");
            sb.AppendLine("cu.Description,");
            sb.AppendLine("cg.CardGroupName,");
            sb.AppendLine("cu.CustomerName,");
            sb.AppendLine("cu.CustomerCode,");
            sb.AppendLine("cu.Mobile AS 'CustomerMobile',");
            sb.AppendLine("cu.Address AS 'CustomerAddress',");
            sb.AppendLine("cu.IDNumber AS 'CustomerIDNumber',");
            sb.AppendLine("cu.CustomerGroupID,");
            sb.AppendLine("cu.CompartmentId,");
            sb.AppendLine("cug.CustomerGroupName");

            sb.AppendLine("FROM tblCard c WITH(NOLOCK)");

            sb.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(varchar(50), cg.CardGroupID)");
            sb.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(varchar(50), cu.CustomerID)");
            sb.AppendLine("LEFT JOIN tblCustomerGroup cug ON cu.CustomerGroupID = CONVERT(varchar(50), cug.CustomerGroupID)");

            sb.AppendLine("WHERE 1=1 AND c.IsDelete = 0");

            if (isfindautocapture)
            {
                sb.AppendLine(" AND c.isAutoCapture = 1");
            }

            //Điều kiện chính

            if (!string.IsNullOrWhiteSpace(key))
            {
                sb.AppendLine(string.Format("AND (c.CardNo LIKE '%{0}%' OR c.CardNumber LIKE '%{0}%' OR c.Plate1 LIKE '%{0}%' OR c.Plate2 LIKE '%{0}%' OR c.Plate3 LIKE '%{0}%' OR c.VehicleName1 LIKE N'%{0}%' OR c.VehicleName2 LIKE N'%{0}%' OR c.VehicleName3 LIKE N'%{0}%' OR cu.CustomerName LIKE N'%{0}%' OR cu.CustomerCode LIKE N'%{0}%' OR cu.Mobile LIKE '%{0}%' OR cu.Address LIKE N'%{0}%' OR cu.CompartmentId LIKE N'%{0}%')", key));
            }

            if (!string.IsNullOrWhiteSpace(cardgroups))
            {
                var t = cardgroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN (");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                sb.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(customerid))
            {
                sb.AppendLine(string.Format("AND c.CustomerID = '{0}'", customerid));
            }

            if (!string.IsNullOrWhiteSpace(accesslevelids))
            {
                var arrAcLevel = accesslevelids.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                var attAL = string.Join(",", arrAcLevel);

                sb.AppendLine("AND c.AccessLevelID IN (");

                sb.AppendLine(attAL);

                sb.AppendLine(")");
            }

            switch (ischeckbytime)
            {
                case "1"://Ngày nhập thẻ
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        sb.AppendLine(string.Format("AND c.ImportDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ImportDate < tdate);
                        sb.AppendLine(string.Format("AND c.ImportDate < '{0}'", tdate));
                    }
                    break;
                case "2"://Ngày hết hạn
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate >= fdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate < tdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate < '{0}'", tdate));
                    }
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrWhiteSpace(active))
            {
                switch (active)
                {
                    case "0":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "0"));

                        break;
                    case "1":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "1"));

                        break;
                    default:
                        break;
                }
            }

            sb.AppendLine(") as a");

            var listData = Data.SqlHelper.SqlExQuery<tblCardCustomViewModel>.ExcuteQuery(sb.ToString());

            var list = new List<DetailCardDepartmentExcel>();

            if (listData.Any())
            {
                var count = 0;
                foreach (var item in listData)
                {
                    count++;
                    var o = new DetailCardDepartmentExcel()
                    {
                        CompartmentId = item.CompartmentId,
                        CardGroupName = item.CardGroupName,
                        CardNo = item.CardNo,
                        CardNumber = item.CardNumber,
                        CustomerCode = item.CustomerCode,
                        CustomerGroupName = item.CustomerGroupName,
                        CustomerName = item.CustomerName,
                        DateCreated = item.ImportDate != null ? Convert.ToDateTime(item.ImportDate).ToString("dd/MM/yyyy") : "",
                        DateExpire = item.ExpireDate != null ? Convert.ToDateTime(item.ExpireDate).ToString("dd/MM/yyyy") : "",
                        DateRegister = item.DateRegister != null ? Convert.ToDateTime(item.DateRegister).ToString("dd/MM/yyyy") : "",
                        DateRelease = item.DateRelease != null ? Convert.ToDateTime(item.DateRelease).ToString("dd/MM/yyyy") : "",
                        NumberRow = count,
                        Plates = "",
                    };

                    if (!string.IsNullOrWhiteSpace(item.Plate1))
                    {
                        o.Plates += item.Plate1;
                    }

                    if (!string.IsNullOrWhiteSpace(item.Plate2))
                    {
                        o.Plates += ";" + item.Plate2;
                    }

                    if (!string.IsNullOrWhiteSpace(item.Plate3))
                    {
                        o.Plates += ";" + item.Plate3;
                    }



                    list.Add(o);
                }
            }

            return list;
        }
        #endregion

        #region Tổng hợp
        public List<TotalCardDepartment> GetReportTotalCardCompartment(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, ref int total, string ischeckbytime = "0", int pageNumber = 1, int pageSize = 20, string active = "")
        {
            var sb = new StringBuilder();
            sb.AppendLine("SELECT * FROM (");
            sb.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY CompartmentId asc) AS RowNumber, CompartmentId,");
            sb.AppendLine("(ISNULL(CAR_NOTUSE,'0') + ISNULL(CAR_USE,'0')) as CAR_REG,");
            sb.AppendLine("ISNULL(CAR_NOTUSE,'0') as CAR_NOTUSE,");
            sb.AppendLine("ISNULL(CAR_USE,'0') as CAR_USE,");
            sb.AppendLine("(ISNULL(CYCLE_NOTUSE,'0') + ISNULL(CYCLE_USE,'0')) as CYCLE_REG,");
            sb.AppendLine("ISNULL(CYCLE_NOTUSE,'0') as CYCLE_NOTUSE,");
            sb.AppendLine("ISNULL(CYCLE_USE,'0') as CYCLE_USE,");
            sb.AppendLine("(ISNULL(BIKE_NOTUSE,'0') + ISNULL(BIKE_USE,'0')) as BIKE_REG,");
            sb.AppendLine("ISNULL(BIKE_NOTUSE,'0') as BIKE_NOTUSE,");
            sb.AppendLine("ISNULL(BIKE_USE,'0') as BIKE_USE");
            sb.AppendLine("FROM (");
            sb.AppendLine("SELECT B.CompartmentId,B.Type,Count(B.CardID) as number FROM (");
            sb.AppendLine("SELECT A.CompartmentId, A.CardID,");
            sb.AppendLine("(CASE");
            sb.AppendLine(" WHEN A.VehicleType = '0' and A.Type = 'NOTUSE' THEN 'CAR_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '0' and A.Type = 'USE' THEN 'CAR_USE'");
            sb.AppendLine("	WHEN A.VehicleType = '1' and A.Type = 'NOTUSE' THEN 'CYCLE_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '1' and A.Type = 'USE' THEN 'CYCLE_USE'");
            sb.AppendLine(" WHEN A.VehicleType = '3' and A.Type = 'NOTUSE' THEN 'BIKE_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '3' and A.Type = 'USE' THEN 'BIKE_USE'");
            sb.AppendLine("END) as Type");
            sb.AppendLine("FROM (");
            sb.AppendLine("SELECT ISNULL(cu.CompartmentId,'') as CompartmentId,c.CardID,");
            sb.AppendLine("(CASE");
            sb.AppendLine("    WHEN vg.VehicleType = '2' THEN '3'");
            sb.AppendLine("    ELSE vg.VehicleType END) as VehicleType,");
            sb.AppendLine("(CASE");
            sb.AppendLine("    WHEN c.ExpireDate >= GETDATE() AND c.IsLock = 0 THEN 'USE'");
            sb.AppendLine("    ELSE 'NOTUSE' END) as Type");
            sb.AppendLine("FROM tblCard c WITH(NOLOCK)");
            sb.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(varchar(50), cg.CardGroupID)");
            sb.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(varchar(50), cu.CustomerID)");
            sb.AppendLine("LEFT JOIN tblCustomerGroup cug ON cu.CustomerGroupID = CONVERT(varchar(50), cug.CustomerGroupID)");
            sb.AppendLine("LEFT JOIN tblVehicleGroup vg ON cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID)");
            sb.AppendLine("WHERE 1=1 AND c.IsDelete = 0");

            //Điều kiện chính

            if (!string.IsNullOrWhiteSpace(key))
            {
                sb.AppendLine(string.Format("AND (c.CardNo LIKE '%{0}%' OR c.CardNumber LIKE '%{0}%' OR c.Plate1 LIKE '%{0}%' OR c.Plate2 LIKE '%{0}%' OR c.Plate3 LIKE '%{0}%' OR c.VehicleName1 LIKE N'%{0}%' OR c.VehicleName2 LIKE N'%{0}%' OR c.VehicleName3 LIKE N'%{0}%' OR cu.CustomerName LIKE N'%{0}%' OR cu.CustomerCode LIKE N'%{0}%' OR cu.Mobile LIKE '%{0}%' OR cu.Address LIKE N'%{0}%' OR cu.CompartmentId LIKE N'%{0}%')", key));
            }

            //if (!string.IsNullOrWhiteSpace(key))
            //{
            //    sb.AppendLine(string.Format("AND (cu.CompartmentId LIKE N'%{0}%')", key));
            //}



            if (!string.IsNullOrWhiteSpace(cardgroups))
            {
                var t = cardgroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN (");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }


            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                sb.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(customerid))
            {
                sb.AppendLine(string.Format("AND c.CustomerID = '{0}'", customerid));
            }

            switch (ischeckbytime)
            {
                case "1"://Ngày nhập thẻ
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        sb.AppendLine(string.Format("AND c.ImportDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ImportDate < tdate);
                        sb.AppendLine(string.Format("AND c.ImportDate < '{0}'", tdate));
                    }
                    break;
                case "2"://Ngày hết hạn
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate >= fdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate < tdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate < '{0}'", tdate));
                    }
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrWhiteSpace(active))
            {
                switch (active)
                {
                    case "0":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "0"));

                        break;
                    case "1":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "1"));

                        break;
                    default:
                        break;
                }
            }

            sb.AppendLine(") as A");
            sb.AppendLine(") as B");
            sb.AppendLine("GROUP BY B.CompartmentId,B.Type");
            sb.AppendLine(") src");
            sb.AppendLine("pivot");
            sb.AppendLine("(");
            sb.AppendLine("  sum(number)");
            sb.AppendLine("  for Type in (CAR_NOTUSE,CAR_USE,CYCLE_NOTUSE,CYCLE_USE,BIKE_NOTUSE,BIKE_USE)");
            sb.AppendLine(") piv");
            sb.AppendLine(") as C");
            sb.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageNumber, pageSize));

            var listData = Data.SqlHelper.SqlExQuery<TotalCardDepartment>.ExcuteQuery(sb.ToString());

            //Tính tổng
            sb.Clear();
            sb.AppendLine("SELECT COUNT(CompartmentId) TotalCount");
            sb.AppendLine("FROM (");
            sb.AppendLine("SELECT B.CompartmentId,B.Type,Count(B.CardID) as number FROM (");
            sb.AppendLine("SELECT A.CompartmentId, A.CardID,");
            sb.AppendLine("(CASE");
            sb.AppendLine(" WHEN A.VehicleType = '0' and A.Type = 'NOTUSE' THEN 'CAR_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '0' and A.Type = 'USE' THEN 'CAR_USE'");
            sb.AppendLine("	WHEN A.VehicleType = '1' and A.Type = 'NOTUSE' THEN 'CYCLE_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '1' and A.Type = 'USE' THEN 'CYCLE_USE'");
            sb.AppendLine(" WHEN A.VehicleType = '3' and A.Type = 'NOTUSE' THEN 'BIKE_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '3' and A.Type = 'USE' THEN 'BIKE_USE'");
            sb.AppendLine("END) as Type");
            sb.AppendLine("FROM (");
            sb.AppendLine("SELECT ISNULL(cu.CompartmentId,'') as CompartmentId,c.CardID,");
            sb.AppendLine("(CASE");
            sb.AppendLine("    WHEN vg.VehicleType = '2' THEN '3'");
            sb.AppendLine("    ELSE vg.VehicleType END) as VehicleType,");
            sb.AppendLine("(CASE");
            sb.AppendLine("    WHEN c.ExpireDate >= GETDATE() AND c.IsLock = 0 THEN 'USE'");
            sb.AppendLine("    ELSE 'NOTUSE' END) as Type");
            sb.AppendLine("FROM tblCard c WITH(NOLOCK)");
            sb.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(varchar(50), cg.CardGroupID)");
            sb.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(varchar(50), cu.CustomerID)");
            sb.AppendLine("LEFT JOIN tblCustomerGroup cug ON cu.CustomerGroupID = CONVERT(varchar(50), cug.CustomerGroupID)");
            sb.AppendLine("LEFT JOIN tblVehicleGroup vg ON cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID)");
            sb.AppendLine("WHERE 1=1 AND c.IsDelete = 0");

            //Điều kiện chính

            if (!string.IsNullOrWhiteSpace(key))
            {
                sb.AppendLine(string.Format("AND (c.CardNo LIKE '%{0}%' OR c.CardNumber LIKE '%{0}%' OR c.Plate1 LIKE '%{0}%' OR c.Plate2 LIKE '%{0}%' OR c.Plate3 LIKE '%{0}%' OR c.VehicleName1 LIKE N'%{0}%' OR c.VehicleName2 LIKE N'%{0}%' OR c.VehicleName3 LIKE N'%{0}%' OR cu.CustomerName LIKE N'%{0}%' OR cu.CustomerCode LIKE N'%{0}%' OR cu.Mobile LIKE '%{0}%' OR cu.Address LIKE N'%{0}%' OR cu.CompartmentId LIKE N'%{0}%')", key));
            }


            if (!string.IsNullOrWhiteSpace(cardgroups))
            {
                var t = cardgroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN (");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }


            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                sb.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(customerid))
            {
                sb.AppendLine(string.Format("AND c.CustomerID = '{0}'", customerid));
            }

            switch (ischeckbytime)
            {
                case "1"://Ngày nhập thẻ
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        sb.AppendLine(string.Format("AND c.ImportDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ImportDate < tdate);
                        sb.AppendLine(string.Format("AND c.ImportDate < '{0}'", tdate));
                    }
                    break;
                case "2"://Ngày hết hạn
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate >= fdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate < tdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate < '{0}'", tdate));
                    }
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrWhiteSpace(active))
            {
                switch (active)
                {
                    case "0":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "0"));

                        break;
                    case "1":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "1"));

                        break;
                    default:
                        break;
                }
            }

            sb.AppendLine(") as A");
            sb.AppendLine(") as B");
            sb.AppendLine("GROUP BY B.CompartmentId,B.Type");
            sb.AppendLine(") src");
            sb.AppendLine("pivot");
            sb.AppendLine("(");
            sb.AppendLine("  sum(number)");
            sb.AppendLine("  for Type in (CAR_NOTUSE,CAR_USE,CYCLE_NOTUSE,CYCLE_USE,BIKE_NOTUSE,BIKE_USE)");
            sb.AppendLine(") piv");
            var _total = Data.SqlHelper.SqlExQuery<TotalPaging>.ExcuteQueryFirst(sb.ToString());
            total = _total != null ? _total.TotalCount : 0;

            return listData;
        }

        public List<TotalCardDepartment> GetTotalCardCompartment_Excel(string key, string cardgroups, string customerid, List<string> CustomerGroupId, string fromdate, string todate, ref int total, string ischeckbytime = "0", int pageNumber = 1, int pageSize = 20, string active = "")
        {
            var sb = new StringBuilder();
            sb.AppendLine("SELECT * FROM (");
            sb.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY CompartmentId asc) AS RowNumber, CompartmentId,");
            sb.AppendLine("(ISNULL(CAR_NOTUSE,'0') + ISNULL(CAR_USE,'0')) as CAR_REG,");
            sb.AppendLine("ISNULL(CAR_NOTUSE,'0') as CAR_NOTUSE,");
            sb.AppendLine("ISNULL(CAR_USE,'0') as CAR_USE,");
            sb.AppendLine("(ISNULL(CYCLE_NOTUSE,'0') + ISNULL(CYCLE_USE,'0')) as CYCLE_REG,");
            sb.AppendLine("ISNULL(CYCLE_NOTUSE,'0') as CYCLE_NOTUSE,");
            sb.AppendLine("ISNULL(CYCLE_USE,'0') as CYCLE_USE,");
            sb.AppendLine("(ISNULL(BIKE_NOTUSE,'0') + ISNULL(BIKE_USE,'0')) as BIKE_REG,");
            sb.AppendLine("ISNULL(BIKE_NOTUSE,'0') as BIKE_NOTUSE,");
            sb.AppendLine("ISNULL(BIKE_USE,'0') as BIKE_USE");
            sb.AppendLine("FROM (");
            sb.AppendLine("SELECT B.CompartmentId,B.Type,Count(B.CardID) as number FROM (");
            sb.AppendLine("SELECT A.CompartmentId, A.CardID,");
            sb.AppendLine("(CASE");
            sb.AppendLine(" WHEN A.VehicleType = '0' and A.Type = 'NOTUSE' THEN 'CAR_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '0' and A.Type = 'USE' THEN 'CAR_USE'");
            sb.AppendLine("	WHEN A.VehicleType = '1' and A.Type = 'NOTUSE' THEN 'CYCLE_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '1' and A.Type = 'USE' THEN 'CYCLE_USE'");
            sb.AppendLine(" WHEN A.VehicleType = '3' and A.Type = 'NOTUSE' THEN 'BIKE_NOTUSE'");
            sb.AppendLine("	WHEN A.VehicleType = '3' and A.Type = 'USE' THEN 'BIKE_USE'");
            sb.AppendLine("END) as Type");
            sb.AppendLine("FROM (");
            sb.AppendLine("SELECT ISNULL(cu.CompartmentId,'') as CompartmentId,c.CardID,");
            sb.AppendLine("(CASE");
            sb.AppendLine("    WHEN vg.VehicleType = '2' THEN '3'");
            sb.AppendLine("    ELSE vg.VehicleType END) as VehicleType,");
            sb.AppendLine("(CASE");
            sb.AppendLine("    WHEN c.ExpireDate >= GETDATE() AND c.IsLock = 0 THEN 'USE'");
            sb.AppendLine("    ELSE 'NOTUSE' END) as Type");
            sb.AppendLine("FROM tblCard c WITH(NOLOCK)");
            sb.AppendLine("LEFT JOIN tblCardGroup cg ON c.CardGroupID = CONVERT(varchar(50), cg.CardGroupID)");
            sb.AppendLine("LEFT JOIN tblCustomer cu ON c.CustomerID = CONVERT(varchar(50), cu.CustomerID)");
            sb.AppendLine("LEFT JOIN tblCustomerGroup cug ON cu.CustomerGroupID = CONVERT(varchar(50), cug.CustomerGroupID)");
            sb.AppendLine("LEFT JOIN tblVehicleGroup vg ON cg.VehicleGroupID = CONVERT(varchar(50), vg.VehicleGroupID)");
            sb.AppendLine("WHERE 1=1 AND c.IsDelete = 0");

            //Điều kiện chính
            if (!string.IsNullOrWhiteSpace(key))
            {
                sb.AppendLine(string.Format("AND (c.CardNo LIKE '%{0}%' OR c.CardNumber LIKE '%{0}%' OR c.Plate1 LIKE '%{0}%' OR c.Plate2 LIKE '%{0}%' OR c.Plate3 LIKE '%{0}%' OR c.VehicleName1 LIKE N'%{0}%' OR c.VehicleName2 LIKE N'%{0}%' OR c.VehicleName3 LIKE N'%{0}%' OR cu.CustomerName LIKE N'%{0}%' OR cu.CustomerCode LIKE N'%{0}%' OR cu.Mobile LIKE '%{0}%' OR cu.Address LIKE N'%{0}%' OR cu.CompartmentId LIKE N'%{0}%')", key));
            }


            if (!string.IsNullOrWhiteSpace(cardgroups))
            {
                var t = cardgroups.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN (");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }


            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    sb.AppendLine("AND c.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        sb.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    sb.AppendLine(" )");
                }
            }

            if (CustomerGroupId.Any())
            {
                sb.AppendLine("AND cu.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    sb.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                sb.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(customerid))
            {
                sb.AppendLine(string.Format("AND c.CustomerID = '{0}'", customerid));
            }

            switch (ischeckbytime)
            {
                case "1"://Ngày nhập thẻ
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        sb.AppendLine(string.Format("AND c.ImportDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ImportDate < tdate);
                        sb.AppendLine(string.Format("AND c.ImportDate < '{0}'", tdate));
                    }
                    break;
                case "2"://Ngày hết hạn
                    if (!string.IsNullOrWhiteSpace(fromdate))
                    {
                        var fdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate >= fdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate >= '{0}'", fdate));
                    }

                    if (!string.IsNullOrWhiteSpace(todate))
                    {
                        var tdate = Convert.ToDateTime(todate).AddDays(1).ToString("yyyy/MM/dd");

                        //query = query.Where(n => n.ExpireDate < tdate);
                        sb.AppendLine(string.Format("AND c.ExpireDate < '{0}'", tdate));
                    }
                    break;
                default:
                    break;
            }

            if (!string.IsNullOrWhiteSpace(active))
            {
                switch (active)
                {
                    case "0":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "0"));

                        break;
                    case "1":

                        sb.AppendLine(string.Format("AND c.IsLock = {0}", "1"));

                        break;
                    default:
                        break;
                }
            }

            sb.AppendLine(") as A");
            sb.AppendLine(") as B");
            sb.AppendLine("GROUP BY B.CompartmentId,B.Type");
            sb.AppendLine(") src");
            sb.AppendLine("pivot");
            sb.AppendLine("(");
            sb.AppendLine("  sum(number)");
            sb.AppendLine("  for Type in (CAR_NOTUSE,CAR_USE,CYCLE_NOTUSE,CYCLE_USE,BIKE_NOTUSE,BIKE_USE)");
            sb.AppendLine(") piv");
            sb.AppendLine(") as C");

            var listData = Data.SqlHelper.SqlExQuery<TotalCardDepartment>.ExcuteQuery(sb.ToString());


            var list = new List<TotalCardDepartment>();

            return listData;
        }
        #endregion

        #endregion


        #region MyRegion
        public List<HOANHBO_ReportInOut> HOANHBO_GetReportInOut(string KeyWord, List<string> CustomerGroupID, bool IsFilterByTimeIn, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize, ref int total, ref long totalDVT)
        {
            string datebase = "MPARKING";
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("SELECT * FROM(");
            query.AppendLine("SELECT ROW_NUMBER() OVER(ORDER BY a.[DatetimeOut] desc) as RowNumber,a.*");
            query.AppendLine("FROM(");
            query.AppendLine("SELECT e.[Id], e.[CardNo], e.[CardNumber], CAST(CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[PicDirIn] as PicIn1, REPLACE(e.[PicDirIn], 'PLATEIN.JPG', 'OVERVIEWIN.JPG') as PicIn2, e.[PicDirOut] as PicOut1, REPLACE(e.[PicDirOut], 'PLATEOUT.JPG', 'OVERVIEWOUT.JPG') as PicOut2, e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys]");
            query.AppendLine(string.Format(",(Select top 1 DVT from [{0}].dbo.tblCard c where c.CardNumber = e.CardNumber) as DVT", datebase));
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH(NOLOCK)");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND (e.[LaneIDIn] = '{0}' OR e.[LaneIDOut] = '{0}')", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND (e.[UserIDIn] = '{0}' OR e.[UserIDOut] = '{0}')", UserID));
            //nhóm thẻ theo user đăng nhập
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[LaneIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[UserIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR  REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));


            query.AppendLine(") as a");
            query.AppendLine(") as TEMP");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //--Count Total
            query.AppendLine("SELECT COUNT(Id) as totalCount");
            query.AppendLine(string.Format(",ISNULL(SUM(DVT),0) as totalDVT", datebase));
            query.AppendLine("FROM ( SELECT Id,(Select top 1 DVT from [MPARKING].dbo.tblCard c where c.CardNumber = e.CardNumber) as DVT FROM dbo.[tblCardEvent]");
            query.AppendLine("e WITH(NOLOCK)");

            query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
            query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

            // query.AppendLine(string.Format("WHERE e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}'  AND e.[IsDelete] = 0 and e.[EventCode] = '2'", _fromdate, _todate));

            //if (!string.IsNullOrWhiteSpace(CardGroupID))
            //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
            //if (!string.IsNullOrWhiteSpace(LaneID))
            //    query.AppendLine(string.Format("AND (e.[LaneIDIn] = '{0}' OR e.[LaneIDOut] = '{0}')", LaneID));
            //if (!string.IsNullOrWhiteSpace(UserID))
            //    query.AppendLine(string.Format("AND (e.[UserIDIn] = '{0}' OR e.[UserIDOut] = '{0}')", UserID));
            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
            {
                var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and e.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[LaneIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //User
            if (!string.IsNullOrWhiteSpace(UserID))
            {
                var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;
                    var _count = 0;
                    query.AppendLine("and (e.UserIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) ");

                    query.AppendLine("OR e.[UserIDOut] IN (");

                    foreach (var item in t)
                    {
                        _count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" ) )");
                }
            }

            //Nhom KH
            if (CustomerGroupID.Any())
            {
                query.AppendLine("AND e.CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupID)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(KeyWord))
                query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

            query.AppendLine(") as e");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            totalDVT = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalDVT"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<HOANHBO_ReportInOut>(list.Tables[0]);
        }
        public DataTable HOANHBO_GetReportInOut_Excel(string KeyWord, List<string> CustomerGroupID, bool IsFilterByTimeIn, string fromdate, string todate, string CardGroupID, string LaneID, string UserID, string CustomerGroupId, int pageIndex, int pageSize)
        {
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            var dtrtn = new DataTable();
            try
            {
                //query.AppendLine("SELECT * FROM(");
                query.AppendLine(string.Format("select ROW_NUMBER() OVER(ORDER BY {0} desc) AS STT,", IsFilterByTimeIn ? "a.[DatetimeIn]" : "a.[DatetimeOut]"));
                query.AppendLine("a.[CardNo], a.[CardNumber] AS 'Mã thẻ', a.[Plate] AS 'Biển số', (select convert(varchar(10), a.DateTimeIn, 103) + ' ' + left(convert(varchar(32), a.DateTimeIn, 108), 8)) AS 'Thời gian vào', (select convert(varchar(10), a.DatetimeOut, 103) + ' ' + left(convert(varchar(32), a.DatetimeOut, 108), 8)) AS 'Thời gian ra', a.[CardGroupID] AS 'Nhóm thẻ', a.[CustomerName] AS 'Khách hàng', a.[LaneIDIn] AS 'Làn vào', a.[LaneIDOut] AS 'Làn ra', a.[UserIDIn] AS 'Giám sát vào', a.[UserIDOut] AS 'Giám sát ra','' as 'Mét khối đăng ký'");
                query.AppendLine("FROM(");

                query.AppendLine("SELECT e.[CardNo], e.[CardNumber], CAST( CASE WHEN e.[PlateOut] <> '' THEN e.[PlateOut] ELSE e.[PlateIn] END AS nvarchar(50)) as Plate, e.[DatetimeIn], e.[DatetimeOut], e.[CardGroupID], e.[CustomerName], e.[LaneIDIn], e.[LaneIDOut], e.[UserIDIn], e.[UserIDOut], e.[Moneys]");
                query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
                query.AppendLine("WHERE e.[IsDelete] = 0 and e.[EventCode] = '2'");
                query.AppendLine(string.Format("{0}", IsFilterByTimeIn ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdate, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdate, todate)));

                //if (!string.IsNullOrWhiteSpace(CardGroupID))
                //    query.AppendLine(string.Format("AND e.[CardGroupID] = '{0}'", CardGroupID));
                //if (!string.IsNullOrWhiteSpace(LaneID))
                //    query.AppendLine(string.Format("AND e.[LaneIDIn] = '{0}' OR e.[LaneIDOut] = '{0}'", LaneID));
                //if (!string.IsNullOrWhiteSpace(UserID))
                //    query.AppendLine(string.Format("AND e.[UserIDIn] = '{0}' OR e.[UserIDOut] = '{0}'", UserID));
                //nhóm thẻ theo user đăng nhập
                if (!string.IsNullOrWhiteSpace(AuthCardGroupIds))
                {
                    var t = AuthCardGroupIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and e.CardGroupID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                //Nhom the
                if (!string.IsNullOrWhiteSpace(CardGroupID))
                {
                    var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;

                        query.AppendLine("and e.CardGroupID IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" )");
                    }
                }

                //Lan
                if (!string.IsNullOrWhiteSpace(LaneID))
                {
                    var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;
                        var _count = 0;
                        query.AppendLine("and (e.LaneIDIn IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) ");

                        query.AppendLine("OR e.[LaneIDOut] IN (");

                        foreach (var item in t)
                        {
                            _count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) )");
                    }
                }

                //User
                if (!string.IsNullOrWhiteSpace(UserID))
                {
                    var t = UserID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (t.Any())
                    {
                        var count = 0;
                        var _count = 0;
                        query.AppendLine("and (e.UserIDIn IN ( ");

                        foreach (var item in t)
                        {
                            count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) ");

                        query.AppendLine("OR e.[UserIDOut] IN (");

                        foreach (var item in t)
                        {
                            _count++;

                            query.AppendLine(string.Format("'{0}'{1}", item, _count == t.Length ? "" : ","));
                        }

                        query.AppendLine(" ) )");
                    }
                }

                //Nhom KH
                if (CustomerGroupID.Any())
                {
                    query.AppendLine("AND e.CustomerGroupID IN (");

                    var count = 0;
                    foreach (var item in CustomerGroupID)
                    {
                        count++;
                        query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupID.Count ? "" : ","));
                    }

                    query.AppendLine(")");
                }

                if (!string.IsNullOrWhiteSpace(KeyWord))
                    query.AppendLine(string.Format("AND (e.[CardNumber] LIKE '%{0}%' OR e.[CardNo] LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateIn], '-', ''), '.', '') LIKE '%{0}%' OR REPLACE(REPLACE(e.[PlateOut], '-', ''), '.', '') LIKE '%{0}%')", KeyWord));

                query.AppendLine(") as a");

                dtrtn = ExcuteSQLEvent.GetDataSet(query.ToString(), false).Tables[0];

            }
            catch (Exception ex)
            {
            }
            //query.AppendLine(") as TEMP");
            //query.AppendLine(string.Format("WHERE STT BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));
            return dtrtn;
        }

        public void UpdatePlate(string Id, string Plate)
        {
            var query = new StringBuilder();
            query.AppendLine("UPDATE tblCardEvent");
            query.AppendLine(string.Format("Set PlateOut = N'{0}'", Plate));
            query.AppendLine(string.Format("WHERE Id = '{0}' ", Id));

            ExcuteSQLEvent.Execute(query.ToString());
        }


        /// <summary>
        /// sdsdfsdf
        /// </summary>
        /// <param name="key"></param>
        /// <param name="userId"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="CardGroupId"></param>
        /// <param name="laneId"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="total"></param>
        /// <returns></returns>
        /// 



        List<ReportIn> IReportService.GetReportIns(string key, bool IsHaveTime, List<string> CustomerGroupId, string userId, string fromdate, string todate, string CardGroupId, string LaneID, int pageIndex, int pageSize, ref int total)
        {

            //REGEX time date
            if (!string.IsNullOrEmpty(fromdate))
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrEmpty(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("Select * From (");
            query.AppendLine("select  ROW_NUMBER () Over (Order by DatetimeIn desc) As RowNumber, m.*,");
            query.AppendLine("(convert(varchar,m.DatetimeIn,103) + ' ' + convert(varchar,m.DatetimeIn,108)) as dates");
            query.AppendLine("From (");
            query.AppendLine("SELECT  m.CardNo ,m.DatetimeIn ,m.[CardNumber],CardGroupID, m.CustomerName, m.PicDirIn, m.UserIDIn, m.LaneIDIn");
            //query.AppendLine("(  Select l.LaneName From [MPARKING].dbo.[tblLane] l Where CONVERT(varchar(50), LaneID)=LaneIDIn  )as Lane_In,");
            //query.AppendLine("(  Select l.LaneName From [MPARKING].dbo.[tblLane] l Where CONVERT(varchar(50)  , LaneID)=LaneIDOut ) as Lane_Out,");
            // query.AppendLine(" (Select u.FullName From [MPARKING].dbo.[tblUser] u where CONvert (varchar(50),UserID)=[UserIDIn]) as Nguoi_giam_sat ");
            // query.AppendLine("m.Moneys");
            query.AppendLine("From dbo.tblCardEvent m  WITH(NOLOCK)  ");
            //query.AppendLine("LEFT Join  [MPARKING].dbo.[tblCardGroup] c ON c.CardGroupID = m.CardGroupID");
            query.AppendLine("Where m.EventCode ='1' ANd m.IsDelete =0 ");

            if (IsHaveTime == true)
            {

                query.AppendLine(string.Format("AND DatetimeIn >= '{0}' AND DatetimeIn <= '{1}' ", fromdate, todate));
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // nhóm thẻ
            if (!string.IsNullOrWhiteSpace(CardGroupId))
            {
                var t = CardGroupId.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // Nhóm khách hàng
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(key))
                query.AppendLine(string.Format("and (CustomerName like N'%{0}%' or CardNumber LIKE '%{0}%' )", key));


            query.AppendLine(")as m");
            query.AppendLine(")as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //Count total record
            query.AppendLine("SELECT COUNT(*) totalCount FROM ( ");
            query.AppendLine("Select e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = '0'  AND e.[EventCode] = '1' ");
            if (IsHaveTime == true)
            {

                query.AppendLine(string.Format("AND DatetimeIn >= '{0}' AND DatetimeIn <= '{1}' ", fromdate, todate));
            }
            //Lan
            if (!string.IsNullOrWhiteSpace(LaneID))
            {
                var t = LaneID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and LaneIDIn IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // nhóm thẻ
            if (!string.IsNullOrWhiteSpace(CardGroupId))
            {
                var t = CardGroupId.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // Nhóm khách hàng
            if (CustomerGroupId.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in CustomerGroupId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == CustomerGroupId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            if (!string.IsNullOrWhiteSpace(key))
                query.AppendLine(string.Format("and (CustomerName LIKE '%{0}%' or CardNumber LIKE '%{0}%' )", key));

            query.AppendLine(") as a");
            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;
            return ExcuteSQLEvent.ConvertTo<ReportIn>(list.Tables[0]);
        }

        public List<ReportInOut> GetReportOuts(string key, bool ischeckTime, string fromdt, string todate, List<string> strs, string lane, string user, string CardGroupID, int pageIndex, int pageSize, ref int totalItem)
        {

            if (!string.IsNullOrWhiteSpace(fromdt))
            {
                fromdt = Convert.ToDateTime(fromdt).ToString("yyyy/MM/dd HH:mm:ss");
            }
            if (!string.IsNullOrWhiteSpace(todate))
            {
                todate = Convert.ToDateTime(todate).ToString("yyyy/MM/dd HH:mm:ss");
            }
            var query = new StringBuilder();
            query.AppendLine("Select * From (");
            query.AppendLine("select  ROW_NUMBER () Over (Order by DatetimeIn desc ) As RowNumber, m.*,");
            query.AppendLine("(convert(varchar,m.DatetimeIn,103) + ' ' + convert(varchar,m.DatetimeIn,108)  ) as dates");
            query.AppendLine("From (");
            //CAST(CASE WHEN m.[PlateOut] <> '' THEN m.[PlateOut] ELSE m.[PlateIn] END AS nvarchar(50)) as Plate
            query.AppendLine("SELECT  m.CardNo ,m.CardNumber, m.PlateIn as Plate,m.DatetimeIn ,m.DateTimeOut,m.PicDirIn,m.PicDirOut,m.CardGroupID,m.CustomerName,");
            //query.AppendLine("(  Select l.LaneName From [MPARKING].dbo.[tblLane] l Where CONVERT(varchar(50), LaneID)=LaneIDIn  )as Lane_In,");
            //query.AppendLine("(  Select l.LaneName From [MPARKING].dbo.[tblLane] l Where CONVERT(varchar(50)  , LaneID)=LaneIDOut ) as Lane_Out,");
            //query.AppendLine("(Select u.FullName From [MPARKING].dbo.[tblUser] u where CONvert (varchar(50),UserID)=UserIDIn) as Giam_Sat_Vao ,");
            //query.AppendLine("(Select u.FullName From [MPARKING].dbo.[tblUser] u where CONvert (varchar(50),UserID)=UserIDOut) as Giam_Sat_Ra ");
            query.AppendLine("m.[LaneIDIn], m.[LaneIDOut],");
            query.AppendLine(" m.UserIDIn,m.UserIDOut, m.Moneys From dbo.tblCardEvent m ");
            query.AppendLine("Where m.EventCode ='2' ANd m.IsDelete =0 ");
            //query.AppendLine(string.Format("{0}", ischeckTime ? string.Format("and m.DatetimeIn >= '{0}' and m.DatetimeIn < '{1}'" , fromdt,todate) : string.Format("AND m.DateTimeOut >= '{0}' AND  m.DateTimeOut <= '{1}' ",fromdt,todate)));
            query.AppendLine(string.Format("{0}", ischeckTime ? string.Format("AND m.[DatetimeIn] >= '{0}' AND m.[DatetimeIn] <= '{1}' ", fromdt, todate) : string.Format("AND m.[DatetimeOut] >= '{0}' AND m.[DatetimeOut] <= '{1}' ", fromdt, todate)));

            if (!string.IsNullOrWhiteSpace(key))
                query.AppendLine(string.Format("and (CustomerName like N'%{0}%' or CardNumber LIKE '%{0}%' )", key));

            //Lan
            if (!string.IsNullOrWhiteSpace(lane))
            {
                var objlane = lane.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                var count = 0;
                var _count = 0;
                query.AppendLine(" And ( m.[LaneIDIn] IN  ( ");
                foreach (var item in objlane)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == objlane.Length ? "" : ","));

                }
                query.AppendLine(" )");

                query.AppendLine("Or  m.[LaneIDOut] IN ( ");
                foreach (var item1 in objlane)
                {
                    _count++;
                    query.AppendLine(string.Format("'{0}'{1}", item1, count == objlane.Length ? "" : ","));

                }
                query.AppendLine("))");
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and m.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }

            // Nhóm khách hàng
            if (strs.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in strs)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == strs.Count ? "" : ","));
                }

                query.AppendLine(")");
            }


            query.AppendLine(" ) as m");
            query.AppendLine(" ) as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //Count total record
            query.AppendLine("SELECT COUNT(*) totalCount FROM ( ");
            query.AppendLine("Select e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE e.[IsDelete] = '0'  AND e.[EventCode] = '2' ");

            if (!string.IsNullOrWhiteSpace(key))
                query.AppendLine(string.Format("and (CustomerName like N'%{0}%' or CardNumber LIKE '%{0}%' )", key));

            query.AppendLine(string.Format("{0}", ischeckTime ? string.Format("AND e.[DatetimeIn] >= '{0}' AND e.[DatetimeIn] <= '{1}' ", fromdt, todate) : string.Format("AND e.[DatetimeOut] >= '{0}' AND e.[DatetimeOut] <= '{1}' ", fromdt, todate)));

            //Lan
            if (!string.IsNullOrWhiteSpace(lane))
            {
                var objlane = lane.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                var count = 0;
                var _count = 0;
                query.AppendLine(" And ( [LaneIDIn] IN  ( ");
                foreach (var item in objlane)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == objlane.Length ? "" : ","));

                }
                query.AppendLine(" )");

                query.AppendLine("Or  [LaneIDOut] IN ( ");
                foreach (var item1 in objlane)
                {
                    _count++;
                    query.AppendLine(string.Format("'{0}'{1}", item1, count == objlane.Length ? "" : ","));

                }
                query.AppendLine("))");
            }


            // Nhóm thẻ

            if (!string.IsNullOrEmpty(CardGroupID))
            {
                var t = CardGroupID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                var count = 0;
                query.AppendLine("AND CardGroupID IN (");
                foreach (var item in t)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                }
                query.AppendLine(")");
            }
            // Nhóm khách hàng
            if (strs.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in strs)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == strs.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine(") as a");

            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            totalItem = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            return ExcuteSQLEvent.ConvertTo<ReportInOut>(list.Tables[0]);


        }

        public DataTable GetReportVehicleAnyTimes(string fromdate, int pageIndex, int pageSize)
        {

            DataTable dt = new DataTable();

            if (string.IsNullOrEmpty(fromdate))
            {
                fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:59");
            }
            else
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:59");
            }

            var query = new StringBuilder();
            query.AppendLine("Select * From  (");
            query.AppendLine("Select ROW_NUMBER () OVer (Order By VehicleGroupName ) as RowNumber ,a.*");
            query.AppendLine("From (");
            query.AppendLine("SELECT m.VehicleGroupName ,COUNT (VehicleGroupName) as VehicleCount From  tblCardEvent a");
            query.AppendLine("left Join [MPARKING].dbo.[tblVehicleGroup] m On CONVERT(varchar(50),m. VehicleGroupID) = a.VehicleGroupID");

            query.AppendLine("Where EventCode='1'");
            if (!string.IsNullOrWhiteSpace(fromdate))
            {
                query.AppendLine(string.Format("and DateTimeIn <= '{0}' ", fromdate));
            }
            query.AppendLine("group by m.VehicleGroupName");
            query.AppendLine("UNION");
            query.AppendLine("SELECT m.VehicleGroupName ,COUNT (Id) as VehicleCount From  tblCardEvent a");
            query.AppendLine("left Join [MPARKING].dbo.[tblVehicleGroup] m On CONVERT(varchar(50),m. VehicleGroupID) = a.VehicleGroupID");
            query.AppendLine("Where EventCode='2' and IsDelete=0 ");
            if (!string.IsNullOrWhiteSpace(fromdate))
            {
                query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{1}' ", fromdate, fromdate));
            }

            query.AppendLine("where EventCode = '1'");
            query.AppendLine(string.Format("and DatetimeIn < '{0}'",fromdate));
            query.AppendLine("group by m.VehicleGroupName");
            query.AppendLine("union");
            query.AppendLine("SELECT m.VehicleGroupName ,COUNT (VehicleGroupName) as VehicleCount From  tblCardEvent a");
            query.AppendLine("left Join [MPARKING].dbo.[tblVehicleGroup] m On CONVERT(varchar(50),m. VehicleGroupID) = a.VehicleGroupID");
            query.AppendLine("where EventCode = '2'  and IsDelete=0");
            query.AppendLine(string.Format("and DatetimeIn <= '{0}' and DateTimeOut > '{1}' ", fromdate,fromdate));
            

            query.AppendLine("group by m.VehicleGroupName");
            query.AppendLine(") as a");
            query.AppendLine(") as C1");

            
            query.AppendLine("SELECT COUNT(*) totalCount FROM ( ");
            query.AppendLine("Select e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

            query.AppendLine(") as a");


            var _total = 0;
         
           
                int vehicle1 = 0;
                int vehicle2 = 0;
            DataSet dstemp  = Data.SqlHelper.ExcuteSQL.GetDataSet(query.ToString(), false);

           
            var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
           
          //  total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;


            if (dstemp != null && dstemp.Tables.Count > 1)
            {
                if (dstemp.Tables[0].Rows[0][0].ToString() != "0")
                    vehicle1 = int.Parse(dstemp.Tables[0].Rows[0][0].ToString());

                if (dstemp.Tables[1].Rows[0][0].ToString() != "0")
                    vehicle2 = int.Parse(dstemp.Tables[1].Rows[0][0].ToString());
            }
            var totalVehicle = vehicle1 + vehicle2;
            _total += totalVehicle;
            dt.Rows.Add("Tổng ", "", _total != 0 ? _total.ToString("###,###") : "0");
        
            //var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
            //total = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;

            //return ExcuteSQLEvent.ConvertTo<ReportVehicleInAnyTime>(list.Tables[0]);
            return dt;
           
        }

        public List<ReportIn> GetReportDetailVehicleAnyTimse(string key, string fromdate, List<string> groupVehicleId, List<string> strCG, string cardgroup, int pageIndex, int pageSize, ref int totalItem)
        {

            if (string.IsNullOrEmpty(fromdate))
            {
                fromdate = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
            }
            else
            {
                fromdate = Convert.ToDateTime(fromdate).ToString("yyyy/MM/dd HH:mm:ss");
            }

            var query = new StringBuilder();
            query.AppendLine("SELECT * From (");
            query.AppendLine("SELECT  ROW_NUMBER () Over (Order by DatetimeIn desc ) As RowNumber, m.*,");
            query.AppendLine("(convert(varchar,m.DatetimeIn,103) + ' ' + convert(varchar,m.DatetimeIn,108)  ) as dates");
            query.AppendLine("From (");
            //CAST(CASE WHEN m.[PlateOut] <> '' THEN m.[PlateOut] ELSE m.[PlateIn] END AS nvarchar(50)) as Plate
            query.AppendLine("SELECT  m.CardNo ,m.CardNumber, m.PlateIn as Plate,m.DatetimeIn ,m.PicDirIn,m.CardGroupID,m.CustomerName,");

            query.AppendLine("m.[LaneIDIn], ");
            query.AppendLine(" m.UserIDIn From dbo.tblCardEvent m ");
            query.AppendLine("Where m.EventCode ='1' ");
            query.AppendLine(string.Format("and DatetimeIn <= '{0}' ", fromdate));
            if (!string.IsNullOrEmpty(key))
            {
                query.AppendLine(string.Format("and ( CardNumber LIKE '%{0}%' or CardNo LIKE '%{0}%' or PlateIn LIKE '%{0}%' )", key));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(cardgroup))
            {
                var t = cardgroup.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and m.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom xe
            if (groupVehicleId.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in groupVehicleId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == groupVehicleId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            // Nhóm khách hàng
            if (strCG.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in strCG)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == strCG.Count ? "" : ","));
                }

                query.AppendLine(")");
            }


            query.AppendLine("Union");
            query.AppendLine("SELECT  m.CardNo ,m.CardNumber, m.PlateIn as Plate,m.DatetimeIn ,m.PicDirIn,m.CardGroupID,m.CustomerName,");
            query.AppendLine("m.[LaneIDIn], m.UserIDIn From dbo.tblCardEvent m  ");

            query.AppendLine("Where m.EventCode ='2' and IsDelete = 0 ");
            query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));
            if (!string.IsNullOrEmpty(key))
            {
                query.AppendLine(string.Format("and ( PlateIn Like '%{0}%' or CustomerName like N'%{0}%'or CardNumber like '%{0}%' )", key));
            }
            //Nhom the
            if (!string.IsNullOrWhiteSpace(cardgroup))
            {
                var t = cardgroup.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and m.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom xe
            if (groupVehicleId.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in groupVehicleId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == groupVehicleId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            // Nhóm khách hàng
            if (strCG.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in strCG)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == strCG.Count ? "" : ","));
                }

                query.AppendLine(")");
            }



            query.AppendLine(")as m");
            query.AppendLine(")as C1");
            query.AppendLine(string.Format("WHERE RowNumber BETWEEN (({0}-1) * {1} + 1) AND ({0} * {1})", pageIndex, pageSize));

            //Count total record
            query.AppendLine("SELECT COUNT(*) totalCount FROM ( ");
            query.AppendLine("Select e.[Id]");
            query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");
            query.AppendLine("WHERE  e.[EventCode] = '1' ");
            query.AppendLine(string.Format("and DatetimeIn <= '{0}' ", fromdate));
            if (!string.IsNullOrEmpty(key))
            {
                query.AppendLine(string.Format("and ( PlateIn Like '%{0}%' or CustomerName like N'%{0}%'or CardNumber like '%{0}%' )", key));
            }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(cardgroup))
            {
                var t = cardgroup.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and m.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom xe
            if (groupVehicleId.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in groupVehicleId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == groupVehicleId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            // Nhóm khách hàng
            if (strCG.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in strCG)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == strCG.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            query.AppendLine(" Union");
                query.AppendLine("Select e.[Id]");
                query.AppendLine("FROM dbo.[tblCardEvent] e WITH (NOLOCK)");

                query.AppendLine("WHERE  e.[EventCode] = '2' and IsDelete = 0 ");



                query.AppendLine(string.Format("and DateTimeIn <= '{0}' and DateTimeOut > '{0}'", fromdate));
                if (!string.IsNullOrEmpty(key))
                {
                    query.AppendLine(string.Format("and ( PlateIn Like '%{0}%' or CustomerName like N'%{0}%'or CardNumber like '%{0}%' )", key));
                }

            //Nhom the
            if (!string.IsNullOrWhiteSpace(cardgroup))
            {
                var t = cardgroup.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (t.Any())
                {
                    var count = 0;

                    query.AppendLine("and m.CardGroupID IN ( ");

                    foreach (var item in t)
                    {
                        count++;

                        query.AppendLine(string.Format("'{0}'{1}", item, count == t.Length ? "" : ","));
                    }

                    query.AppendLine(" )");
                }
            }
            //Nhom xe
            if (groupVehicleId.Count > 0)
            {
                query.AppendLine("and VehicleGroupID IN (");

                var count = 0;

                foreach (var item in groupVehicleId)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == groupVehicleId.Count ? "" : ","));
                }

                query.AppendLine(")");
            }
            // Nhóm khách hàng
            if (strCG.Any())
            {
                query.AppendLine("AND CustomerGroupID IN (");

                var count = 0;
                foreach (var item in strCG)
                {
                    count++;
                    query.AppendLine(string.Format("'{0}'{1}", item, count == strCG.Count ? "" : ","));
                }

                query.AppendLine(")");
            }

            query.AppendLine(") as a");

                var list = ExcuteSQLEvent.GetDataSet(query.ToString(), false);
                totalItem = list.Tables.Count > 1 ? Convert.ToInt32(list.Tables[1].Rows[0]["totalCount"].ToString()) : 0;


                return ExcuteSQLEvent.ConvertTo<ReportIn>(list.Tables[0]);

            }

        




        #endregion


    }


    }
