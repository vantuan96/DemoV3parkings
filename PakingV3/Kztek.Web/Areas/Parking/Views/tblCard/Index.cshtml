@using Kztek.Model.CustomModel
@using Kztek.Web.Core.Extensions
@using Kztek.Web.Attributes
@using Kztek.Web.Core.Functions

@model PageModel<Kztek.Model.Models.tblCardCustomViewModel>

@{
    ViewBag.Title = "Danh sách thẻ";

    string controller = this.ViewContext.RouteData.Values["controller"].ToString();

    var checkbytype = (string)ViewBag.isCheckByTimeValue;

    string selected = (string)ViewBag.selectedIdValue;

    var listCardSelected = (List<string>)ViewBag.selectedCardValue;

    string path = HttpContext.Current.Request.Url.PathAndQuery;

    string columnquery = Convert.ToString(ViewBag.columnQueryValue);
    bool isDescSort = Convert.ToBoolean(ViewBag.DescValue);
    bool isTranserco = Convert.ToBoolean(ViewBag.ISTRANSERCO);
    bool isPRIDE = Convert.ToBoolean(ViewBag.ISPRIDE);

    var listmoney = new List<Kztek.Model.Models.tblActiveCard_TC>();
    if (isTranserco)
    {
        listmoney = (List<Kztek.Model.Models.tblActiveCard_TC>)ViewBag.ListMoney;
    }

    var Dictionary = FunctionHelper.GetLocalizeDictionary("tblCard", "Index");
    var DictionaryAction = FunctionHelper.GetLocalizeDictionary("Home", "Action");
    var DictionaryNoti = FunctionHelper.GetLocalizeDictionary("Home", "notification");

    var system = (Kztek.Model.Models.tblSystemConfig)ViewBag.System;
}

<div class="page-header">
    <h1>
        @Dictionary["Title"] (<span>@Model.TotalItem</span>)
    </h1>
</div>

<div id="boxAutoCapture"></div>
@using (Html.BeginForm("Index", "tblCard", FormMethod.Get, new { id = "frmCard" }))
{
    @Html.Hidden("chkExport", "0")
    @Html.Hidden("selectedId", selected)
    @Html.Hidden("columnQuery", columnquery)
    @Html.Hidden("desc", isDescSort)
    <div class="row">
        <div class="col-md-3 col-xs-12 divboxmd">
            @Dictionary["Keyword"]
            <input type="text" name="key" value="@ViewBag.keyValue" placeholder="@Dictionary["KeywordPlaceholder"]" class="form-control" />
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            @Dictionary["FromDate"]
            <div class="input-group">
                @Html.TextBox("fromdate", (string)ViewBag.fromdateValue, new { @class = "form-control daterangnoautopicker" })
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            @Dictionary["ToDate"]
            <div class="input-group">
                @Html.TextBox("todate", (string)ViewBag.todateValue, new { @class = "form-control daterangnoautopicker" })
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            @Dictionary["CustomerGroupFilter"]
            @Html.DropDownList("customergroups", new SelectList(ViewBag.lcustomergroups, "ItemValue", "ItemText", ViewBag.customergroupsValue), new { @class = "form-control chosen-select" })
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            @Dictionary["StatusFilter"]
            @Html.DropDownList("active", new SelectList(ViewBag.lactives, "ItemValue", "ItemText", ViewBag.activeValue), new { @class = "form-control" })
        </div>
    </div>
    <div class="row">

        <div class="col-md-2 col-xs-4 divboxmd">
            <label class="line-height-250">
                <input type="radio" name="isCheckByTime" value="0" class="ace" @string.Format("{0}", checkbytype.Equals("0") ? "checked" : "")>
                <span class="lbl"> @Dictionary["NoFilter"] </span>
            </label>
        </div>
        <div class="col-md-2 col-xs-4 divboxmd">
            <label class="line-height-250">
                <input type="radio" name="isCheckByTime" value="1" class="ace" @string.Format("{0}", checkbytype.Equals("1") ? "checked" : "")>
                <span class="lbl"> @Dictionary["FilterByCreated"] </span>
            </label>
        </div>
        <div class="col-md-2 col-xs-4 divboxmd">
            <label class="line-height-250">
                <input type="radio" name="isCheckByTime" value="2" class="ace" @string.Format("{0}", checkbytype.Equals("2") ? "checked" : "")>
                <span class="lbl"> @Dictionary["FilterByExpire"] </span>
            </label>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            @Dictionary["CardGroupFilter"]
            @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.lcardgroups, itemValue = "CardGroupID", itemText = "CardGroupName", selectedValues = ViewBag.cardgroupsValue, Modelname = "ddlcardgroup", labelName = "-- Lựa chọn --" })
            @Html.Hidden("cardgroups")
        </div>
        @if ((bool)ViewBag.ISMANDARIN1 == false)
        {
            <div class="col-md-2 col-xs-12 divboxmd">
                <label class="line-height-450">
                    @Html.CheckBox("chkFindAutoCapture", (bool)ViewBag.chkFindAutoCaptureValue, new { @class = "ace" })
                    <span class="lbl"> Tìm xe chụp ảnh tự động </span>
                </label>
            </div>
        }

        @*<div class="col-md-2 col-xs-4 divboxmd">
                <label class="line-height-250">
                    <input type="radio" name="columnQuery" value="DateActive" class="ace" @string.Format("{0}", checkbytype.Equals("3") ? "checked" : "")>
                    <span class="lbl"> Lọc theo ngày kích hoạt </span>
                </label>
            </div>*@
    </div>
    <div class="row">
        <div class="col-md-8 col-xs-12 divboxmd">
            @Html.Action("Actions", "Home", new { ActionName = "Search", ControllerName = controller })

            @Html.Action("Actions", "Home", new { ActionName = "Export", ControllerName = controller })

            @Html.Action("Actions", "Home", new { ActionName = "Import", ControllerName = controller })
            <button class="btn btn-primary btn-white btn-bold" type="button" name="btnImportDat">
                <i class="fa fa-file green"></i>
                Import File Dat
            </button>
            @Html.Action("Actions", "Home", new { ActionName = "Index", ControllerName = controller })
        </div>
    </div>

}

<input type="hidden" name="_openCardConfirm" value="@DictionaryNoti["openCardConfirm"]" />
<input type="hidden" name="_returnCardConfirm" value="@DictionaryNoti["deleteConfirm"]" />
<input type="hidden" name="_lockCardConfirm" value="@DictionaryNoti["lockCardConfirm"]" />
<input type="hidden" name="_reason" value="@DictionaryNoti["reason"]" />

<div class="hr hr-18 dotted hr-24"></div>
<div class="row">
    @*<div class="col-xs-2">
            <div id="boxActionCardChoice" style="display:none">
                @Html.Action("CardActionSubmitChoice")
            </div>
        </div>*@
    <div class="col-md-6 col-xs-12">
        <div id="boxCardAction"></div>

        @if ((bool)ViewBag.ISMANDARIN1 == false)
        {

            <button type="button" class="btn btn-purple btn-sm btn-white btn-bold btnAutoPhoto">
                <i class="fa fa-camera"></i>
                Chụp tự động
            </button>
        }

    </div>
    <div class="col-md-6 col-xs-12">
        <div class="pull-right">
            @if (CheckAuthorizeAction.CheckActionPemission(controller, "Create"))
            {
                <a href="@Url.Action("Create", controller, new { key = ViewBag.keyValue, cardgroups = ViewBag.cardgroupsValue, customergroups = ViewBag.customergroupsValue, active = ViewBag.active, fromdate = ViewBag.fromdateValue, todate = ViewBag.todateValue, isCheckByTime = ViewBag.isCheckByTimeValue })" class="btn btn-primary btn-sm btn-white btn-bold">
                    <i class=" fa fa-plus"></i> @DictionaryAction["Create"]
                </a>
            }
        </div>
    </div>
</div>

<div class="hr hr-18 dotted hr-24"></div>

<div class="row">
    <div class="col-xs-12">
        <div class="divScroll">
            <table class="table  table-bordered table-hover">
                <thead>
                    <tr class="headerSort">
                        <th class="center">
                            <label class="pos-rel">
                                <input type="checkbox" class="ace" id="chkCheckALL" />
                                <span class="lbl"></span>
                            </label>
                        </th>
                        <th class="text-left" idata="CardNo"> @Dictionary["CardNo"] <i class=""></i></th>
                        <th class="text-left" idata="CardNumber"> @Dictionary["CardNumber"] <i class=""></i></th>
                        <th class="text-left"> @Dictionary["CardGroup"] </th>
                        <th class="text-left"> @Dictionary["Plate"] </th>

                        @if (isTranserco)
                        {
                            <th class="text-left">Mã hợp đồng</th>
                        }

                        <th class="text-left"> @Dictionary["ExpireDate"] </th>
                        @if (isTranserco)
                        {
                            <th class="text-left">Số tiền</th>
                        }

                        <th class="text-left"> @Dictionary["CustomerCode"] </th>
                        <th class="text-left"> @Dictionary["CustomerName"] </th>
                        <th class="text-left"> @Dictionary["CustomerGroupName"] </th>
                        <th class="text-left"> @Dictionary["CustomerAddress"] </th>
                        <th class="text-left" idata="ImportDate"> @Dictionary["ImportDate"] <i class=""></i></th>
                        <th class="text-left" idata="IsLock"> @Dictionary["IsLock"] <i class=""></i></th>
                        @if (isPRIDE)
                        {
                            <th class="text-left">Lý do</th>
                        }
                        <th class="text-left"> @Dictionary["Action"] </th>

                    </tr>
                </thead>

                <tbody>
                    @if (Model.Data.Any())
                    {
                        foreach (var item in Model.Data)
                        {

                            var obj = listmoney.FirstOrDefault(n => n.CardNumber.Contains(item.CardNumber));
                            <tr class="@string.Format("{0}", (!string.IsNullOrWhiteSpace(selected) && selected == item.CardID.ToString() ) ? "info" : "")">
                                <td class="center">
                                    <label class="pos-rel">
                                        <input type="checkbox" id="@item.CardID.ToString()" name="Id" value="@item.CardNumber.ToString()" class="ace chkCheck" @string.Format("{0}", (listCardSelected != null && listCardSelected.Any(n => n.Equals(item.CardNumber))) ? "checked" : "") />
                                        <span class="lbl"></span>
                                    </label>
                                </td>

                                <td class="text-left">
                                    @item.CardNo
                                </td>

                                <td class="text-left">
                                    @item.CardNumber
                                </td>

                                <td class="text-left">
                                    @item.CardGroupName
                                </td>

                                <td class="text-left">
                                    @if (!string.IsNullOrWhiteSpace(item.Plate1))
                                    {
                                        <span>@item.Plate1</span>
                                    }


                                    @if (!string.IsNullOrWhiteSpace(item.Plate2))
                                    {
                                        <span>, @item.Plate2</span>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(item.Plate3))
                                    {
                                        <span>, @item.Plate3</span>
                                    }
                                </td>
                                @if (isTranserco)
                                {
                                    <td class="text-left">
                                        @item.Description
                                    </td>
                                }

                                @*<td class="text-left">
                                        @if (item.DateActive != null)
                                        {
                                            <span>@item.DateActive.ToString("dd/MM/yyyy")</span>
                                        }
                                    </td>*@

                                <td class="text-left">
                                    @if (item.ExpireDate != null)
                                    {
                                        var status = Kztek.Web.Core.Functions.FunctionHelper.GetStatusDateByDay(Convert.ToDateTime(item.ExpireDate));
                                        <span>@Html.Raw(status)</span>
                                    }
                                </td>
                                @if (isTranserco)
                                {
                                    <td class="text-left">
                                        @if (obj != null && obj.FeeLevel > 0)
                                        {
                                            <span>@obj.FeeLevel.ToString("###,###")</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                }
                                <td class="text-left">
                                    @item.CustomerCode
                                </td>

                                <td class="text-left">
                                    @item.CustomerName
                                </td>

                                <td class="text-left">
                                    @item.CustomerGroupName
                                </td>

                                <td class="text-left">
                                    @item.CustomerAddress
                                </td>

                                <td class="text-left">
                                    @if (item.ImportDate != null)
                                    {
                                        <span>
                                            @item.ImportDate.Value.ToString("dd/MM/yyyy")
                                        </span>
                                    }
                                </td>
                                <td class="text-left">
                                    @if (item.IsLock == false)
                                    {
                                        <span class="label label-sm label-success">@Dictionary["IsLockTrue"]</span>
                                    }
                                    else
                                    {
                                        <span class="label label-sm label-warning">@Dictionary["IsLockFalse"]</span>
                                    }
                                </td>
                                @if (isPRIDE)
                                {
                                    <td class="text-left">
                                        @item.DescriptionCard
                                    </td>
                                }
                                <td class="center">
                                    <div class="btn-group">
                                        @if (CheckAuthorizeAction.CheckActionPemission(controller, "Update"))
                                        {
                                            <a href="@Url.Action("Update", controller, new { id = item.CardID, key = ViewBag.keyValue, cardgroups = ViewBag.cardgroupsValue, customergroups = ViewBag.customergroupsValue, active = ViewBag.active, fromdate = ViewBag.fromdateValue, todate = ViewBag.todateValue, isCheckByTime = ViewBag.isCheckByTimeValue, page = Model.PageIndex })" class="green" title="Cập nhật">
                                                <i class="ace-icon fa fa-pencil bigger-120"></i>
                                            </a>
                                        }
                                        @if (CheckAuthorizeAction.CheckActionPemission(controller, "Delete"))
                                        {
                                            <a href="javascript:void(0)" class="btnDelete red" idata="@item.CardID" title="Xóa">
                                                <i class="ace-icon fa fa-trash bigger-120"></i>
                                            </a>
                                        }

                                        @if (CheckAuthorizeAction.CheckActionPemission(controller, "Remove"))
                                        {
                                            <a href="javascript:void(0)" class="btnRemove red" idata="@item.CardID" title="Xóa không điều kiện">
                                                <i class="ace-icon fa fa-remove bigger-120"></i>
                                            </a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

    </div><!-- /.span -->
    @if (Model.Data.Any())
    {
        <div class="col-xs-12">
            <div class="pull-right">
                @Html.GeneratePagingFooter(Model.TotalPage, Model.PageIndex, Model.PageSize, "pagination", x => Url.Action("Index", "tblCard", new
           {
               page = x,
               key = ViewBag.keyValue,
               cardgroups = ViewBag.cardgroupsValue,
               customergroups = ViewBag.customergroupsValue,
               customerid = ViewBag.customeridValue,
               active = ViewBag.activeValue,
               fromdate = ViewBag.fromdateValue,
               todate = ViewBag.todateValue,
               isCheckByTime = ViewBag.isCheckByTimeValue,
               selectedId = ViewBag.selectedIdValue,
               desc = ViewBag.DescValue,
               columnQuery = ViewBag.columnQueryValue,
               chkFindAutoCapture = ViewBag.chkFindAutoCaptureValue
           }))
            </div>
        </div>
    }
</div><!-- /.row -->

@if (system.FeeName.Contains("ECOME_DUNGQUAT"))
{
    @Html.Action("ECOME_DUNGQUAT_ModalImportCard")
}
else
{
    @Html.Action("ModalImportCard")
}


@section scripts{
    @*<script src="~/Areas/Parking/Scripts/CardController.js"></script>*@
    <script>
        function saveNewFileCard() {
            $('.loading1').css('display', 'block');
            $('#proccess').css('display', 'block');
            $("#messs").css('display', 'none');

            var file = $("#modalImportCard").find("input[name=FileUpload]").prop("files");

            var formdata = new FormData();

            for (i = 0; i < file.length; i++) {
                //Appending each file to FormData object
                formdata.append(file[i].name, file[i]);
            }

            $.ajax({
                type: "POST",
                url: _prefixParkingDomain + '/tblCard/ImportFile',
                data: formdata,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.isSuccess) {
                        $('.loading1').css('display', 'none');

                        toastr.success(response.Message);

                        window.location.href = "/Parking/tblCard";
                    }
                    else {
                        toastr.error(response.Message);
                    }

                },
                error: function (error) {
                    alert("errror");
                    console.log(error);
                }
            });
        }
        function saveNewFileDat() {
            $('.loading1').css('display', 'block');
            $('#proccess').css('display', 'block');
            $("#messs").css('display', 'none');

            var file = $("#modalImportCard").find("input[name=FileUpload]").prop("files");

            var formdata = new FormData();

            for (i = 0; i < file.length; i++) {
                //Appending each file to FormData object
                formdata.append(file[i].name, file[i]);
            }

            $.ajax({
                type: "POST",
                url: _prefixParkingDomain + '/tblCard/ImportFileDat',
                data: formdata,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.isSuccess) {
                        $('.loading1').css('display', 'none');

                        toastr.success(response.Message);

                        window.location.href = "/Parking/tblCard";
                    }
                    else {
                        toastr.error(response.Message);
                    }

                },
                error: function (error) {
                    alert("errror");
                    console.log(error);
                }
            });
        }
        function saveNewFileCard_HPDQ() {
            $('.loading1').css('display', 'block');
            $('#proccess').css('display', 'block');
            $("#messs").css('display', 'none');

            var file = $("#modalImportCard").find("input[name=FileUpload]").prop("files");

            var formdata = new FormData();

            for (i = 0; i < file.length; i++) {
                //Appending each file to FormData object
                formdata.append(file[i].name, file[i]);
            }

            $.ajax({
                type: "POST",
                url: _prefixParkingDomain + '/tblCard/ECOME_DUNGQUAT_ImportFile',
                data: formdata,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.isSuccess) {
                        $('.loading1').css('display', 'none');

                        toastr.success(response.Message);

                        window.location.href = "/Parking/tblCard";
                    }
                    else {
                        toastr.error(response.Message);
                    }

                },
                error: function (error) {
                    alert("errror");
                    console.log(error);
                }
            });
        }

        function OrderColumnInTable(columnSort, columnDefault, isDesc, url) {
            columnSort = columnDefault;

            $(".headerSort th").on('click', function () {
                var cmd = $(this);
                var column = cmd.attr('idata');
                cmd.removeClass("blue");
                cmd.find("i").addClass("fa fa-sort")
                if (column != undefined) {
                    cmd.find("i").removeClass();
                    sortColumn(column, columnDefault, isDesc, url);
                    var className = getClass(column, columnDefault, isDesc);
                    cmd.find("i").toggleClass(className);

                    columnSort = column;
                }
            })

            $(".headerSort th").each(function () {
                var cmd = $(this);
                cmd.find("i").addClass("fa fa-sort");
                var column = cmd.attr('idata');
                if (column == columnSort) {
                    $(".headerSort").find("th[idata=" + columnSort + "]").find("i").removeClass();

                    var className = getClass(columnSort, columnDefault, isDesc);

                    $(".headerSort").find("th[idata=" + columnSort + "]").find("i").toggleClass(className);

                    $(".headerSort").find("th[idata=" + columnSort + "]").addClass("blue");
                }
            })
        }

        function sortColumn(column, defaultColumn, isDesc, firsturl) {

            if (defaultColumn == column) {
                if (isDesc === "False") {
                    isDesc = "True";
                } else {
                    isDesc = "False";
                }
            } else {
                isDesc = "True";
            }

            defaultColumn = column;
            window.location.href = firsturl + "&&columnQuery=" + column + "&&desc=" + isDesc;
        }

        function getClass(column, defaultColumn, isDesc) {

            if (defaultColumn == column) {
                if (isDesc == "True") {
                    return "fa fa-caret-down";
                } else {
                    return "fa fa-caret-up";
                }
            }
            return "";
        }

        $(document).ready(function () {

            var _str = '@ViewBag.cardgroupsValue';
            var count = (_str.match(/&#39;/g) || []).length;
            var i;
            for (i = 0; i < count; ++i) {
                _str = _str.replace('&#39;', "'").replace(',','%2C');
            };

            var urlSt = '/Parking/tblCard/Index?key=' + '@ViewBag.keyValue' + '&page=' + '@Model.PageIndex' + '&cardgroups=' + _str + '&customergroups=' + '@ViewBag.customergroupsValue' + '&isCheckByTime=' + '@ViewBag.isCheckByTimeValue' + '&active=' + '@ViewBag.activeValue' + '&fromdate=' + '@ViewBag.fromdateValue' + '&todate=' + '@ViewBag.todateValue';

            OrderColumnInTable("", "@columnquery", "@isDescSort", urlSt);
            //
            $('#ddlcardgroup').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += "'" + _cmd.find('input[type=checkbox]').val() + "'" + ',';
                });
                $('#cardgroups').val(str);
            });

            //Xóa 1 bản ghi
            DeleteSubmit(_prefixParkingDomain + '/tblCard/Delete');

            //$('.btnDelete').click(function () {
            //    var cmd = $(this);
            //    var _id = cmd.attr('idata');
            //    if (confirm('Bạn chắc chắn muốn xóa bản ghi này?')) {
            //        $.ajax({
            //            url: ,
            //            data: { id: _id },
            //            type: 'json',
            //            //async:false,
            //            success: function (data) {
            //                if (data.Success) {
            //                    cmd.parent().parent().parent().fadeOut();
            //                    toastr.success(data.Message)
            //                } else {
            //                    toastr.error(data.Message)
            //                }
            //            }
            //        });
            //    }
            //});

            $('.btnRemove').click(function () {
                var cmd = $(this);
                var _id = cmd.attr('idata');

                bootbox.confirm("Bạn chắc chắn muốn xóa bản ghi này?", function (result) {
                    if (result) {
                        $.ajax({
                            url: '/Parking/tblCard/Remove',
                            data: { id: _id },
                            type: 'json',
                            //async:false,
                            success: function (data) {
                                if (data.isSuccess) {
                                    cmd.parent().parent().parent().fadeOut();
                                    toastr.success(data.Message, _noti);
                                } else {
                                    toastr.error(data.Message, _noti);
                                }
                            }
                        });
                    }
                });
            });

            $('input[name=fromdate],input[name=todate]').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY'));
            });


            @*var urlSt = '/Parking/PK_Card/Index?key=' + '@ViewBag.Keyword' + '&page=' + '@Model.PageIndex' + '&cardgroup=' + '@ViewBag.CardGroupId' + '&datefrompicker=' + '@ViewBag.DateTimePicker' + '&customergroup=' + '@ViewBag.CustomerGroupId' + '&columnQuery=' + '@columnquery' + '&cardstatus=' + '@cardStatus' ;

            OrderColumnInTable("", "@column", "@isDescSort", urlSt);*@

            //Export excel
            $('button[name=btnExport]').click(function () {
                $('#chkExport').val('1');
                $('#frmCard').submit();
            });

            $('button[name=btnFilter]').click(function () {
                $('#chkExport').val('0'); // ko xuat xxcel
                $('#frmCard').submit();
            });

            $("button[name=btnImport]").click(function () {
                $("#modalImportCard").modal("show");
            });

            
            $("button[name=btnImportDat]").click(function () {
                $("#modalImportCard").modal("show");
            });

            //
            PK_CardController.loadModalButton('@Model.TotalItem', '@path');

            $("#chkCheckALL").click(function () {
                if ($(this).is(":checked")) {
                    var choices = [];
                    $('.chkCheck').each(function () {
                        if ($(this).is(":checked")) {
                            var cn = $(this).val();
                            choices.push(cn);
                        }
                    });

                    PK_CardController.AddRemoveCardChoice(choices, '@Model.TotalItem', true);

                } else {
                    var unchoices = [];

                    $('.chkCheck').each(function () {
                        if (!$(this).is(":checked")) {
                            var cn = $(this).val();
                            unchoices.push(cn);
                        }
                    });

                    PK_CardController.AddRemoveCardChoice(unchoices, '@Model.TotalItem', false);
                }
            });

            $('.chkCheck').click(function () {
                if ($(this).is(":checked")) {
                    var choices = [];
                    var cn = $(this).val();
                    choices.push(cn);
                    PK_CardController.AddRemoveCardChoice(choices, '@Model.TotalItem', true);

                } else {
                    var unchoices = [];
                    var cn1 = $(this).val();
                    unchoices.push(cn1);
                    PK_CardController.AddRemoveCardChoice(unchoices, '@Model.TotalItem', false);
                }
            });

            //
            $("#frmCard").find("input[name=key]").keypress(function (e) {
                if (e.which === 13) {
                    $("#frmCard").submit();
                }
            });

            $('.btnAutoPhoto').click(function () {
                bootbox.prompt({
                    title: "Chọn phương thức thực hiện",
                    inputType: 'select',
                    inputOptions: [
                        {
                            text: '-- Lựa chọn --',
                            value: '',
                        },
                        {
                            text: 'Cập nhật danh sách thẻ đã tích chọn',
                            value: '1',
                        },
                        {
                            text: 'Cập nhật danh sách thẻ đã tìm kiếm',
                            value: '2',
                        }
                    ],
                    callback: function (data1) {
                        if (data1 !== "" && data1 !== null) {
                            bootbox.confirm("Bạn muốn cập nhật chụp ảnh tự động cho những bản ghi này?", function (result) {
                                if (result) {
                                    var model = {
                                        type: data1,
                                        key: $("input[name=key]").val(),
                                        cardgroups: $("#cardgroups").val(),
                                        customergroups: $("#customergroups").val(),
                                        active: $("#active").val(),
                                        fromdate: $("input[name=fromdate]").val(),
                                        todate: $("input[name=todate]").val(),
                                        isCheckByTime: $("input[name=isCheckByTime]:checked").val(),
                                        chkFindAutoCapture: $("#chkFindAutoCapture").is(":checked")
                                    }

                                    $.ajax({
                                        url: '/Parking/tblCard/AutoTakePhoto',
                                        data: model,
                                        type: 'json',
                                        //async:false,
                                        success: function (data) {
                                            if (data.isSuccess) {
                                                $("#Modal_AutoCapture").modal("hide");
                                                location.reload();
                                                toastr.success(data.Message);
                                            } else {
                                                toastr.error(data.Message);
                                            }
                                        }
                                    });
                                }
                            });
                        } else {
                            if (data1 !== null) {
                                toastr.error("Vui lòng chọn phương thức thực hiện");
                            }

                        }

                    }
                });
            });


        });
    </script>
}