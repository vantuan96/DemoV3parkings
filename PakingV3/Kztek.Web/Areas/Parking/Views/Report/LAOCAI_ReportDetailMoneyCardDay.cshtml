@using Kztek.Model.CustomModel
@using Kztek.Web.Core.Extensions
@using Kztek.Web.Core.Helpers
@using Kztek.Web.Attributes
@using Kztek.Web.Core.Functions

@model PageModel<Kztek.Model.Models.ReportDetailMoneyCardDay_LAOCAI>

@{
    /**/

    ViewBag.Title = "ReportDetailMoneyCardDay";

    var listLane = (List<Kztek.Model.Models.tblLane>)ViewBag.LaneList;

    var listcardGroup = (List<SelectListModel2>)ViewBag.CardGroups;

    var listuser = (List<Kztek.Model.Models.User>)ViewBag.Users;

    var user = Kztek.Web.Core.Functions.GetCurrentUser.GetUser();

    string totalMoney = ViewBag.TotalMoney.ToString();

    var print = "LAOCAI_PrintReportDetailMoneyCardDay";

    var Dictionary = FunctionHelper.GetLocalizeDictionary("report", "ReportDetailMoneyCardDay");
    var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
    var DictionaryAction = FunctionHelper.GetLocalizeDictionary("Home", "Action");
    var Dictionarycar = FunctionHelper.GetLocalizeDictionary("tblCard", "Index");
}

<div class="page-header">
    <h1>
        Chi tiết thu tiền thẻ lượt khi vào (<span>@Model.TotalItem</span>)
    </h1>
</div>

<div class="row">
    @using (Html.BeginForm("LAOCAI_ReportDetailMoneyCardDay", "Report", FormMethod.Get, new { id = "frmReportDetailMoneyCardDay" }))
    {
        @Html.Hidden("chkExport", "0")
        @*@Html.Hidden("column", column)
            @Html.Hidden("desc", isDescSort)*@
        <div class="col-md-4 col-xs-12 divboxmd">
            @DictionarySearch["keyWord"]:
            <input type="text" name="key" value="@ViewBag.KeyWord" placeholder=" @DictionarySearch["keywordPlaceholder"]" class="form-control" />
        </div>
        <div class="col-md-4 col-xs-12 divboxmd">
            @DictionarySearch["fromDate"]:
            <div class="input-group">
                @Html.TextBox("fromdate", (string)ViewBag.fromdateValue, new { @class = "form-control datepicker" })
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </div>
        <div class="col-md-4 col-xs-12 divboxmd">
            @DictionarySearch["toDate"]:
            <div class="input-group">
                @Html.TextBox("todate", (string)ViewBag.todateValue, new { @class = "form-control datepicker" })
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </div>

        <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
                @DictionarySearch["lane"]:
            </div>
            <div>
                @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.LaneDT, itemValue = "LaneID", itemText = "LaneName", selectedValues = ViewBag.LaneId, Modelname = "ddllane", labelName = "-- Lựa chọn --" })
                @Html.Hidden("lane")
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
                @DictionarySearch["user"]:
            </div>
            <div>
                @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.UserDT, itemValue = "Id", itemText = "Username", selectedValues = ViewBag.UserId, Modelname = "ddluser", labelName = "-- Lựa chọn --" })
                @Html.Hidden("user")
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
                @DictionarySearch["cardGroup"]:
            </div>
            <div>
                @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.CardGroupDT, itemValue = "ItemValue", itemText = "ItemText", selectedValues = ViewBag.CardGroupId, Modelname = "ddlcardgroup", labelName = "-- Lựa chọn --" })
                @Html.Hidden("cardgroup")
            </div>
        </div>
         <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
                @Dictionarycar["StatusFilter"]:
            </div>
            <div>
                @Html.DropDownList("state", new SelectList(ViewBag.PayState, "ItemValue", "ItemText", ViewBag.PayStateValue), new { @class = "form-control" })
            </div>
        </div>
        <div class="col-md-12 col-xs-12 divboxmd line-height-450">
            @Html.Action("Actions", "Home", new { ActionName = "Search", ControllerName = "LAOCAI_ReportDetailMoneyCardDay" })

            @Html.Action("Actions", "Home", new { ActionName = "Export", ControllerName = "LAOCAI_ReportDetailMoneyCardDay" })

            @Html.Action("Actions", "Home", new { ActionName = "Print", ControllerName = "LAOCAI_ReportDetailMoneyCardDay" })

            @Html.Action("Actions", "Home", new { ActionName = "Index", ControllerName = "LAOCAI_ReportDetailMoneyCardDay" })

        </div>
    }
</div>

<div class="hr hr-18 dotted hr-24"></div>

<div class="row">
    <div class="col-xs-12">
        <div class="divScroll">
            <table class="table  table-bordered table-hover">
                <thead>
                    <tr class="headerSort">
                        <th class="center">@Dictionary["stt"]</th>
                        <th class="text-left" idata="Card">@Dictionary["cardNo"]<i class=""></i></th>
                        <th class="text-left">@Dictionary["codeCard"]</th>
                        <th class="text-left">@Dictionary["licensePlate"]</th>
                        <th class="text-left">@Dictionary["timeIn"]</th>
                        @*<th class="text-left">@Dictionary["timeOut"]</th>*@
                        <th class="text-left hidden-480" idata="CardGroup">@Dictionary["cardGroup"]<i class=""></i></th>
                        <th class="text-left hidden-480" idata="Customer">@Dictionary["customer"]<i class=""></i></th>
                        <th class="text-left hidden-480">@Dictionary["lanceIn"]</th>
                        @*<th class="text-left hidden-480">@Dictionary["lanceOut"]</th>*@
                        <th class="text-left">@Dictionary["monitoringIn"]</th>
                        @*<th class="text-left">@Dictionary["monitoringOut"]</th>*@
                        @*<th class="text-left">@Dictionary["moneyout"]</th>*@
                        <th class="text-left">@Dictionary["moneyin"]</th>
                        <th class="text-left">@Dictionary["paystate"]</th>
                        @*<th class="text-left">@Dictionary["totalinout"]</th>*@
                        @*<th class="hidden-480">@Dictionary["timeAll"]</th>*@
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Data.Any())
                    {
                        var count = (Model.PageIndex - 1) * Model.PageSize;
                        foreach (var item in Model.Data)
                        {
                            count++;
                            <tr>
                                <td class="text-center">
                                    @item.RowNumber
                                </td>
                                <td>
                                    @item.CardNo
                                </td>
                                <td>
                                    @item.CardNumber
                                </td>
                                <td>
                                    @item.Plate
                                </td>
                                <td>
                                    @Convert.ToDateTime(item.DateTimeIn).ToString("dd/MM/yyy HH:mm:ss")
                                </td>
                                @*<td>
                                    @Convert.ToDateTime(item.DateTimeOut).ToString("dd/MM/yyy HH:mm:ss")
                                </td>*@
                                <td>
                                    @{
                                        var objcardGroup = listcardGroup != null ? listcardGroup.FirstOrDefault(n => n.ItemValue.ToString().Equals(item.CardGroupID)) : null;

                                        if (objcardGroup != null)
                                        {
                                            <span>@objcardGroup.ItemText</span>
                                        }
                                    }
                                </td>
                                <td>
                                    @item.CustomerName
                                </td>
                                <td>
                                    @{
                                        var objLaneIn = listLane != null ? listLane.FirstOrDefault(n => n.LaneID.ToString().Equals(item.LaneIDIn)) : null;

                                        if (objLaneIn != null)
                                        {
                                            <span>@objLaneIn.LaneName</span>
                                        }
                                    }
                                </td>
                                @*<td>
                                    @{
                                        var objLaneOut = listLane != null ? listLane.FirstOrDefault(n => n.LaneID.ToString().Equals(item.LaneIDOut)) : null;

                                        if (objLaneOut != null)
                                        {
                                            <span>@objLaneOut.LaneName</span>
                                        }
                                    }
                                </td>*@
                                <td>
                                    @{
                                        var objuserIn = listuser != null ? listuser.FirstOrDefault(n => n.Id.ToString().Equals(item.UserIDIn)) : null;

                                        if (objuserIn != null)
                                        {
                                            <span>@objuserIn.Username</span>
                                        }
                                    }
                                </td>
                                @*<td>
                                    @{
                                        var objuserOut = listuser != null ? listuser.FirstOrDefault(n => n.Id.ToString().Equals(item.UserIDOut)) : null;

                                        if (objuserOut != null)
                                        {
                                            <span>@objuserOut.Username</span>
                                        }
                                    }
                                </td>*@
                                @*<td class="text-right">
                                    @item.Moneys.FormatMoney()
                                </td>*@
                                <td class="text-right">
                                    @string.Format("{0:n0}", item.MoneyIn)
                                </td>
                                <td class="text-right" idata="@item.PayInID" idata1="@item.Id" idata2="@item.PayState">
                                    <select class="form-control" name="paystate">
                                        <option @string.Format("{0}",item.PayState == 0 ? "selected" : "") value="0">Chưa thanh toán</option>
                                        <option @string.Format("{0}",item.PayState == 1 ? "selected" : "") value="1">Đã thanh toán</option>
                                    </select>
                                    @*@Html.DropDownList("paystate", new SelectList(ViewBag.PayState, "ItemValue", "ItemText", item.PayState), new { @class = "form-control" })*@
                                </td>
                                @*<td class="text-right">
                                    @if (item.PayState == 0)
                                    {
                                        @item.Moneys.FormatMoney()                                      
                                    }
                                    else
                                    {
                                        var total = (!string.IsNullOrEmpty(item.Moneys) ? Convert.ToDecimal(item.Moneys) : 0) + item.MoneyIn;
                                       
                                    <span>  @string.Format("{0:n0}", total)</span>
                                    }
                                </td>*@
                                @*<td>
                                    <span>@StringUtil.CalculateTimeDiff(item.DateTimeIn, item.DateTimeOut)</span>
                                </td>*@
                            </tr>
                        }
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td></td>
                        <td>#</td>
                        <td>@DictionarySearch["total"]</td>
                        <td></td>
                        <td></td>
                        @*<td></td>
                        <td></td>
                        <td></td>*@
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td class="text-right">@totalMoney.FormatMoney()</td>
                        <td></td>
                        @*<td></td>*@
                    </tr>
                </tfoot>
            </table>
        </div>

    </div>
    @if (Model.Data.Any())
    {
        <div class="col-xs-12">
            <div class="pull-right">
                @Html.GeneratePagingFooter(Model.TotalPage, Model.PageIndex, Model.PageSize, "pagination", x => Url.Action("LAOCAI_ReportDetailMoneyCardDay", "Report", new
           {
               page = x,
               key = ViewBag.KeyWord,
               cardgroup = ViewBag.CardGroupId,
               datefrompicker = ViewBag.DateFromPickerValue,
               lane = ViewBag.LaneId,
               user = ViewBag.UserId,
               fromdate = ViewBag.fromdateValue,
               todate = ViewBag.todateValue,
               state = ViewBag.PayStateValue
           }))
            </div>
        </div>
    }
</div>

@section scripts{
    <script>
      

        $(document).ready(function () {
            //Export excel
            $('button[name=btnExport]').click(function () {
                $('#chkExport').val('1');
                $('#frmReportDetailMoneyCardDay').submit();
            });

            $('button[name=btnFilter]').click(function () {
                $('#chkExport').val('0'); // ko xuat xxcel
                $('#frmReportDetailMoneyCardDay').submit();
            });

            $('#btnPrintFile').click(function () {
                var _frdate = $('input[name=fromdate]').val();
                var _todate = $('input[name=todate]').val();
                var _key = $('input[name=key]').val();
                var _cardgroup = $('#cardgroup').val();
                var _lane = $('#lane').val();
                var _user = $('#user').val();
                var state = $('#state').val();
                var url = '/Parking/Report/' + '@print' + '?fromdate=' + _frdate + '&todate=' + _todate + '&key=' + _key + '&cardgroup=' + _cardgroup + '&lane=' + _lane + '&user=' + _user + '&state=' + state;
                window.open(url, '_blank');
                //$('#chkExport').val('2');
                //$('#frmReportDetailMoneyCardDay').submit();
            });

            $('#ddlcardgroup').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#cardgroup').val(str);
            });

            $('#ddllane').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#lane').val(str);
            });

            $('#ddluser').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#user').val(str);
            });

            $('select[name=paystate]').change(function () {
                var payid = $(this).parent().attr("idata");
                if (payid === "0") {
                    toastr.error("Không có thông tin tiền vào");
                } else {
                    $.ajax({
                        url: _prefixParkingDomain + '/Report/UpdatePayState',
                        data: { payid: payid },
                        type: 'json',
                        //async: true,
                        success: function (data) {
                            if (data.isSuccess) {
                                location.reload(true);
                                toastr.success(data.Message);
                            } else {
                                toastr.error(data.Message);
                            }
                        }
                    });
                }
               
            });

        

        });
    </script>
}