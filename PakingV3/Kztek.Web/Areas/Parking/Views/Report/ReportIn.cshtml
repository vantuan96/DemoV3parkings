@using Kztek.Model.CustomModel
@using Kztek.Web.Core.Extensions
@using Kztek.Web.Attributes
@using Kztek.Web.Core.Functions

@model PageModel<Kztek.Model.Models.ReportIn>

@{
    ViewBag.Title = "ReportIn";

    var listLane = (List<Kztek.Model.Models.tblLane>)ViewBag.LaneList;

    var listcardGroup = (List<SelectListModel2>)ViewBag.CardGroups;

    var listuser = (List<Kztek.Model.Models.User>)ViewBag.Users;

    bool checkByTime = Convert.ToBoolean(ViewBag.CheckByTime);

    var user = Kztek.Web.Core.Functions.GetCurrentUser.GetUser();

    var Dictionary = FunctionHelper.GetLocalizeDictionary("report", "reportIn");
    var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
    var DictionaryAction = FunctionHelper.GetLocalizeDictionary("Home", "Action");
    var DictionarySelectCusGrp = FunctionHelper.GetLocalizeDictionary("SelectList", "CustomerGroupID");
}

<div class="page-header">
    <h1>
        @Dictionary["title"] (<span>@Model.TotalItem</span>)
    </h1>
</div>

<div class="row">
    @using (Html.BeginForm("ReportIn", "Report", FormMethod.Get, new { id = "frmReportIn" }))
    {
        @Html.Hidden("chkExport", "0")
        <div class="col-md-2 col-xs-12 divboxmd">
            <label class="col-sm-12 control-label no-padding-right"> @DictionarySearch["keyWord"] </label>
            <input type="text" name="key" value="@ViewBag.KeyWord" placeholder="@DictionarySearch["keywordPlaceholder"]" class="form-control" />
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            <label class="col-sm-12 control-label no-padding-right"> @DictionarySearch["customerGroup"] </label>

            @Html.DropDownList("customergroup", new SelectList(ViewBag.CustomerGroups, "ItemValue", "ItemText", ViewBag.CustomerGroupId), DictionarySelectCusGrp["SlectlistCusGrp"], new { @class = "form-control chosen-select" })
        </div>


        <div class="col-md-3 col-xs-12 divboxmd">
            <label class="col-sm-12 control-label no-padding-right"> @DictionarySearch["fromDate"] </label>
            <div class="input-group">
                @Html.TextBox("fromdate", (string)ViewBag.fromdateValue, new { @class = "form-control datepicker" })
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </div>
        <div class="col-md-3 col-xs-12 divboxmd">
            <label class="col-sm-12 control-label no-padding-right"> @DictionarySearch["toDate"] </label>
            <div class="input-group">
                @Html.TextBox("todate", (string)ViewBag.todateValue, new { @class = "form-control datepicker" })
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            <label class="line-height-450">
                @Html.CheckBox("chkCheckByTime", checkByTime, new { @class = "ace" })
                <span class="lbl">@DictionarySearch["checkByTime"]</span>
            </label>
        </div>

        <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
               @DictionarySearch["lane"]
            </div>
            <div>
                @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.LaneDT, itemValue = "LaneID", itemText = "LaneName", selectedValues = ViewBag.LaneId, Modelname = "ddllane"})
                @Html.Hidden("lane")
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
                @DictionarySearch["user"]
            </div>
            <div>
                @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.UserDT, itemValue = "Id", itemText = "Username", selectedValues = ViewBag.UserId, Modelname = "ddluser", labelName = DictionarySearch["select"] })
                @Html.Hidden("user")
            </div>
        </div>
        <div class="col-md-2 col-xs-12 divboxmd">
            <div class="control-label">
               @DictionarySearch["cardGroup"]
            </div>
            <div>
                @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.CardGroupDT, itemValue = "ItemValue", itemText = "ItemText", selectedValues = ViewBag.CardGroupId, Modelname = "ddlcardgroup", labelName = DictionarySearch["select"] })
                @Html.Hidden("cardgroup")
            </div>
        </div>
        <div class="col-md-12 col-xs-12 divboxmd">
            @Html.Action("Actions", "Home", new { ActionName = "Search", ControllerName = "ReportIn" })

            @Html.Action("Actions", "Home", new { ActionName = "Index", ControllerName = "ReportIn" })

            @Html.Action("PartialExcelColumn", "Report", new { action = "ReportIn" })
            @Html.Hidden("excelcol")
            @Html.Action("Actions", "Home", new { ActionName = "Export", ControllerName = "ReportIn" })

        </div>

    }
</div>

<div class="hr hr-18 dotted hr-24"></div>

<div class="row">
    <div class="col-xs-12">
        <div class="divScroll">
            <table class="table  table-bordered table-hover">
                <thead>
                    <tr class="headerSort">
                        <th class="center">
                            STT
                        </th>
                        <th class="text-left" idata="Card"> @Dictionary["cardNo"] <i class=""></i></th>
                        <th class="text-left"> @Dictionary["codeCard"] </th>
                        <th class="text-left">@Dictionary["licensePlate"]</th>
                        <th class="text-left">@Dictionary["timeIn"]</th>
                        <th class="text-left">@Dictionary["imageIn"]</th>
                        <th class="text-left" idata="CardGroup">@Dictionary["cardGroup"] <i class=""></i></th>
                        <th class="text-left" idata="Customer">@Dictionary["user"] <i class=""></i></th>
                        <th class="text-left">@Dictionary["lanceIn"]</th>
                        <th class="text-left">@Dictionary["monitoringIn"]</th>
                        <th class="hidden-480">@Dictionary["expiredDate"]</th>
                        <th class="hidden-480">@Dictionary["remainingTime"]</th>
                        <th class="text-left">@Dictionary["action"]</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Data.Any())
                    {
                        var count = (Model.PageIndex - 1) * Model.PageSize;
                        foreach (var item in Model.Data)
                        {
                            count++;
                            <tr>
                                <td>@item.RowNumber</td>
                                <td>
                                    @item.CardNo
                                </td>
                                <td>
                                    @item.CardNumber
                                </td>
                                <td>
                                    @item.Plate
                                </td>
                                <td>
                                    @Convert.ToDateTime(item.DateTimeIn).ToString("dd/MM/yyy HH:mm:ss")
                                </td>
                                <td class="center">
                                    <div class="ace-thumbnails clearfix">
                                        @if (!string.IsNullOrWhiteSpace(item.PicIn1))
                                        {
                                            @Html.Action("ImageFTP", new { filename = item.PicIn1, description = "Ảnh", type = "INOUT" })
                                        }
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var objcardGroup = listcardGroup != null ? listcardGroup.FirstOrDefault(n => n.ItemValue.ToString().Equals(item.CardGroupID)) : null;

                                        if (objcardGroup != null)
                                        {
                                            <span>@objcardGroup.ItemText</span>
                                        }
                                    }
                                </td>
                                <td>
                                    @item.CustomerName
                                </td>
                                <td>
                                    @{
                                        var objLane = listLane != null ? listLane.FirstOrDefault(n => n.LaneID.ToString().Equals(item.LaneIDIn)) : null;

                                        if (objLane != null)
                                        {
                                            <span>@objLane.LaneName</span>
                                        }
                                    }
                                </td>
                                <td>
                                    @{
                                        var objuser = listuser != null ? listuser.FirstOrDefault(n => n.Id.ToString().Equals(item.UserIDIn)) : null;

                                        if (objuser != null)
                                        {
                                            <span>@objuser.Username</span>
                                        }
                                    }
                                </td>
                                <td>
                                    <span> @Html.Action("GetExpireDate", new { CardNumber = item.CardNumber })</span>
                                </td>
                                <td>
                                    <span>@Html.Action("GetDays", new { CardNumber = item.CardNumber, cardgroupId = item.CardGroupID })</span>
                                </td>
                                <td>
                                    @if (CheckAuthorizeAction.CheckActionPemission("ReportIn", "Delete"))
                                    {
                                        <div class="btn-group">
                                            @Html.Action("Actions", "Home", new { ActionName = "Delete", ControllerName = "ReportIn", id = item.Id })
                                        </div>
                                    }

                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

    </div>
    @if (Model.Data.Any())
    {
        <div class="col-xs-12">
            <div class="pull-right">
                @Html.GeneratePagingFooter(Model.TotalPage, Model.PageIndex, Model.PageSize, "pagination", x => Url.Action("ReportIn", "Report", new
           {
               page = x,
               key = ViewBag.KeyWord,
               cardgroup = ViewBag.CardGroupId,
               datefrompicker = ViewBag.DateFromPickerValue,
               lane = ViewBag.LaneId,
               user = ViewBag.UserId,
               fromdate = ViewBag.fromdateValue,
               todate = ViewBag.todateValue,
               customergroup = ViewBag.CustomerGroupId,
               chkCheckByTime = ViewBag.CheckByTime
           }))
            </div>
        </div>
    }
</div>

@section scripts{
    <script src="~/Scripts/ExcelColumn.js"></script>
    <script>
        jQuery(function ($) {

            var $overflow = '';
            var colorbox_params = {
                rel: 'colorbox',
                reposition: true,
                scalePhotos: true,
                scrolling: false,
                previous: '<i class="ace-icon fa fa-arrow-left"></i>',
                next: '<i class="ace-icon fa fa-arrow-right"></i>',
                close: '&times;',
                current: '{current} of {total}',
                maxWidth: '100%',
                maxHeight: '100%',
                onOpen: function () {
                    $overflow = document.body.style.overflow;
                    document.body.style.overflow = 'hidden';
                },
                onClosed: function () {
                    document.body.style.overflow = $overflow;
                },
                onComplete: function () {
                    $.colorbox.resize();
                }
            };

            $('.ace-thumbnails [data-rel="colorbox"]').colorbox(colorbox_params);
            $("#cboxLoadingGraphic").html("<i class='ace-icon fa fa-spinner orange fa-spin'></i>");//let's add a custom loading icon


            $(document).one('ajaxloadstart.page', function (e) {
                $('#colorbox, #cboxOverlay').remove();
            });



        });

        $(document).ready(function () {
            $('#ddlcardgroup').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#cardgroup').val(str);
            });

            $('#ddllane').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#lane').val(str);
            });

            $('#ddluser').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#user').val(str);
            });

            $('#ddlExcelColumn').change(function () {
                var cmd = $(this);
                var str = '';
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#excelcol').val(str);
            });
            //Export excel
            $('button[name=btnExport]').click(function () {
                $('#chkExport').val('1');
                $('#frmReportIn').submit();
            });

            $('button[name=btnFilter]').click(function () {
                $('#chkExport').val('0'); // ko xuat xxcel
                $('#frmReportIn').submit();
            });

            //Xóa 1 bản ghi
            DeleteSubmit(_prefixParkingDomain + '/Report/DeleteEventIn')
        });
    </script>
}
