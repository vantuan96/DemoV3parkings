@using Kztek.Model.CustomModel
@using Kztek.Web.Core.Extensions
@using Kztek.Web.Attributes
@using Kztek.Web.Core.Functions

@model PageModel<Kztek.Model.Models.ReportTotalVehicleMoneyByCardMonth>

@{
    ViewBag.Title = "ReportInOut";

    var listLane = (List<Kztek.Model.Models.tblLane>)ViewBag.LaneList;

    var listcardGroup = (List<SelectListModel2>)ViewBag.CardGroups;

    var listuser = (List<Kztek.Model.Models.User>)ViewBag.Users;

    var user = Kztek.Web.Core.Functions.GetCurrentUser.GetUser();

   // bool isTimeIn = ViewBag.isFilterByTimeIn;

    var Dictionary = FunctionHelper.GetLocalizeDictionary("report", "ReportTotalSubventionByCardNumber");
    var DictionarySearch = FunctionHelper.GetLocalizeDictionary("report", "reportSearch");
    var DictionaryAction = FunctionHelper.GetLocalizeDictionary("Home", "Action");
    var DictionarySelectCusGrp = FunctionHelper.GetLocalizeDictionary("SelectList", "CustomerGroupID");
}

<div class="page-header">
    <h1>
        @Dictionary["title"] (<span>@Model.TotalItem</span>)
    </h1>
</div>

<div class="row">
    @using (Html.BeginForm("ReportTotalSubventionByCardNumber", "Report", FormMethod.Get, new { id = "frmReportInOut" }))
    {
        @Html.Hidden("chkExport", "0")
        @*@Html.Hidden("column", column)
            @Html.Hidden("desc", isDescSort)*@
    <div class="col-md-2 col-xs-12 divboxmd">
        @DictionarySearch["keyWord"]:
        <input type="text" name="key" value="@ViewBag.KeyWord" placeholder=" @DictionarySearch["keywordPlaceholder"]" class="form-control" />
    </div>
    <div class="col-md-2 col-xs-12 divboxmd">
        @DictionarySearch["fromDate"]:
        <div class="input-group">
            @Html.TextBox("fromdate", (string)ViewBag.fromdateValue, new { @class = "form-control datepicker" })
            <span class="input-group-addon">
                <i class="fa fa-calendar"></i>
            </span>
        </div>
    </div>
    <div class="col-md-2 col-xs-12 divboxmd">
        @DictionarySearch["toDate"]:
        <div class="input-group">
            @Html.TextBox("todate", (string)ViewBag.todateValue, new { @class = "form-control datepicker" })
            <span class="input-group-addon">
                <i class="fa fa-calendar"></i>
            </span>
        </div>
    </div>
    <div class="col-md-3 col-xs-12 divboxmd">
        @DictionarySearch["customerGroup"]:
        @Html.DropDownList("customergroup", new SelectList(ViewBag.CustomerGroups, "ItemValue", "ItemText", ViewBag.CustomerGroupId), DictionarySelectCusGrp["SlectlistCusGrp"], new { @class = "form-control chosen-select" })
    </div>
        @*<div class="col-xs-12">
                <div class="row">

                    <div class="col-md-2 col-xs-12 divboxmd">
                        <div class="control-label">
                           Làn vào:
                        </div>
                        <div>
                            @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.LaneDT, itemValue = "LaneID", itemText = "LaneName", selectedValues = ViewBag.LaneId, Modelname = "ddllane", labelName = "-- Lựa chọn --" })
                            @Html.Hidden("lane")
                        </div>
                    </div>
                    <div class="col-md-2 col-xs-12 divboxmd">
                        <div class="control-label">
                            Người dùng:
                        </div>
                        <div>
                            @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.UserDT, itemValue = "Id", itemText = "Username", selectedValues = ViewBag.UserId, Modelname = "ddluser", labelName = "-- Lựa chọn --" })
                            @Html.Hidden("user")
                        </div>
                    </div>
                    <div class="col-md-2 col-xs-12 divboxmd">
                        <div class="control-label">
                            Nhóm thẻ:
                        </div>
                        <div>
                            @Html.Action("DroplistMultiSelectTemplate1", "CommonUse", new { _dt = ViewBag.CardGroupDT, itemValue = "ItemValue", itemText = "ItemText", selectedValues = ViewBag.CardGroupId, Modelname = "ddlcardgroup", labelName = "-- Lựa chọn --" })
                            @Html.Hidden("cardgroup")
                        </div>
                    </div>
                </div>
            </div>*@


        <div class="col-md-12 col-xs-12 divboxmd">
            @Html.Action("Actions", "Home", new { ActionName = "Search", ControllerName = "ReportTotalSubventionByCardNumber" })

            @Html.Action("Actions", "Home", new { ActionName = "Index", ControllerName = "ReportTotalSubventionByCardNumber" })

            @*@Html.Action("PartialExcelColumn", "Report", new { action = "ReportVehicleMoneyByCardMonth" })
                @Html.Hidden("excelcol")*@

            @Html.Action("Actions", "Home", new { ActionName = "Export", ControllerName = "ReportTotalSubventionByCardNumber" })

        </div>
    }
</div>

<div class="hr hr-18 dotted hr-24"></div>

<div class="row">
    <div class="col-xs-12">
        <div class="divScroll">
            <table class="table  table-bordered table-hover">
                <thead>
                    <tr class="headerSort">
                        <th class="center">@Dictionary["stt"]</th>
                        <th class="text-left" idata="Card">@Dictionary["cardNo"]<i class=""></i></th>
                        <th class="text-left">@Dictionary["cardId"]</th>
                        <th class="text-left">@Dictionary["licensePlate"]</th>
                        @*<th class="text-left">Thời gian vào</th>
        <th class="text-left">Nhóm thẻ</th>*@
                        <th class="text-left">@Dictionary["customer"]</th>
                        <th class="text-left">@Dictionary["customerGroup"]</th>
                        @*<th class="text-left">Làn vào</th>
        <th class="text-left">Làn ra</th>
        <th class="text-left hidden-480">Giám sát vào</th>
        <th class="text-left hidden-480">Giám sát ra</th>*@
                        <th class="text-left" width="80">@Dictionary["cost"]</th>

                    </tr>
                </thead>
                <tbody>
                    @if (Model.Data.Any())
                    {
                        var count = (Model.PageIndex - 1) * Model.PageSize;
                        foreach (var item in Model.Data)
                        {
                            count++;
                    <tr>
                        <td class="text-center">@item.RowNumber</td>
                        <td>
                            @item.CardNo
                        </td>
                        <td>
                            @item.CardNumber
                        </td>
                        <td>
                            @item.RegistedPlate
                        </td>
                        @*<td>
            @if (!string.IsNullOrEmpty(item.DateTimeIn))
            {
                @Convert.ToDateTime(item.DateTimeIn).ToString("dd/MM/yyy HH:mm:ss")
            }

        </td>

        <td>
            @{
                var objcardGroup = listcardGroup != null ? listcardGroup.FirstOrDefault(n => n.ItemValue.ToString().Equals(item.CardGroupID)) : null;

                if (objcardGroup != null)
                {
                    <span>@objcardGroup.ItemText</span>
                }
            }
        </td>*@
                        <td>
                            @item.CustomerName
                        </td>
                        <td>
                            @item.CustomerGroupName
                        </td>
                        @*<td>
            @{
                var objLaneIn = listLane != null ? listLane.FirstOrDefault(n => n.LaneID.ToString().Equals(item.LaneIDIn)) : null;

                if (objLaneIn != null)
                {
                    <span>@objLaneIn.LaneName</span>
                }
            }
        </td>
        <td>
            @{
                var objLaneOut = listLane != null ? listLane.FirstOrDefault(n => n.LaneID.ToString().Equals(item.LaneIDOut)) : null;

                if (objLaneOut != null)
                {
                    <span>@objLaneOut.LaneName</span>
                }
            }
        </td>
        <td>
            @{
                var objuserIn = listuser != null ? listuser.FirstOrDefault(n => n.Id.ToString().Equals(item.UserIDIn)) : null;

                if (objuserIn != null)
                {
                    <span>@objuserIn.Username</span>
                }
            }
        </td>
        <td>
            @{
                var objuserOut = listuser != null ? listuser.FirstOrDefault(n => n.Id.ToString().Equals(item.UserIDOut)) : null;

                if (objuserOut != null)
                {
                    <span>@objuserOut.Username</span>
                }
            }
        </td>*@
                        <td class="text-right">
                            @string.Format("{0:N0}", long.Parse(item.Moneys))
                        </td>

                    </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

    </div>
    @if (Model.Data.Any())
    {
        <div class="col-xs-12">
            <div class="pull-right">
                @Html.GeneratePagingFooter(Model.TotalPage, Model.PageIndex, Model.PageSize, "pagination", x => Url.Action("ReportTotalSubventionByCardNumber", "Report", new
           {
               page = x,
               key = ViewBag.KeyWord,
               //cardgroup = ViewBag.CardGroupId,
               datefrompicker = ViewBag.DateFromPickerValue,
               //lane = ViewBag.LaneId,
               //user = ViewBag.UserId,
               fromdate = ViewBag.fromdateValue,
               todate = ViewBag.todateValue,
               customergroup = ViewBag.CustomerGroupId
           }))
            </div>
        </div>
    }
</div>

@section scripts{
    @*<script src="~/Scripts/ExcelColumn.js"></script>*@
    <script>
        jQuery(function ($) {

            var $overflow = '';
            var colorbox_params = {
                rel: 'colorbox',
                reposition: true,
                scalePhotos: true,
                scrolling: false,
                previous: '<i class="ace-icon fa fa-arrow-left"></i>',
                next: '<i class="ace-icon fa fa-arrow-right"></i>',
                close: '&times;',
                current: '{current} of {total}',
                maxWidth: '100%',
                maxHeight: '100%',
                onOpen: function () {
                    $overflow = document.body.style.overflow;
                    document.body.style.overflow = 'hidden';
                },
                onClosed: function () {
                    document.body.style.overflow = $overflow;
                },
                onComplete: function () {
                    $.colorbox.resize();
                }
            };

            $('.ace-thumbnails [data-rel="colorbox"]').colorbox(colorbox_params);
            $("#cboxLoadingGraphic").html("<i class='ace-icon fa fa-spinner orange fa-spin'></i>");//let's add a custom loading icon


            $(document).one('ajaxloadstart.page', function (e) {
                $('#colorbox, #cboxOverlay').remove();
            });



        })

        $(document).ready(function () {
            //$('#sidebar').removeClass('sidebar-scroll');
            //$('#sidebar').addClass('menu-min');
            //$('#sidebar-toggle-icon').removeClass('fa-angle-double-left');
            //$('#sidebar-toggle-icon').addClass('fa-angle-double-right');
            //$('#groupname1').hide();
            //$('#groupname2').hide();

            //Export excel
            $('button[name=btnExport]').click(function () {
                $('#chkExport').val('1');
                $('#frmReportInOut').submit();
            });

            $('button[name=btnFilter]').click(function () {
                $('#chkExport').val('0'); // ko xuat xxcel
                $('#frmReportInOut').submit();
            });

            $('#ddlcardgroup').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#cardgroup').val(str);
            });

            $('#ddllane').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#lane').val(str);
            });

            $('#ddluser').change(function () {
                var str = '';
                var cmd = $(this);
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#user').val(str);
            });

            $('#ddlExcelColumn').change(function () {
                var cmd = $(this);
                var str = '';
                cmd.parent().find('ul.multiselect-container li.active').each(function () {
                    var _cmd = $(this);
                    str += _cmd.find('input[type=checkbox]').val() + ',';
                });
                $('#excelcol').val(str);
            });

            //Xóa 1 bản ghi
            DeleteSubmit(_prefixParkingDomain + '/Report/DeleteEventInOut')
        });
    </script>
}
