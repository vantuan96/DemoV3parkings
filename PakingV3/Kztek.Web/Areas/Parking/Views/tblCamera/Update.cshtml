@model Kztek.Model.Models.tblCamera
@using Kztek.Web.Core.Functions

@{
    ViewBag.Title = "Update";
    //Layout = Kztek.Web.Core.Functions.FunctionHelper.GetLayoutByGroup(ViewBag.Group);

    int pn = Convert.ToInt32(ViewBag.PN);

    var Dictionary = FunctionHelper.GetLocalizeDictionary("tblCamera", "Update");
    var DictionaryAction = FunctionHelper.GetLocalizeDictionary("Home", "Action");
}

<div class="page-header">
    <h1>
        @Dictionary["Title"] 
    </h1>
</div>
<div class="row">
    @if (TempData["Success"] != null)
    {
        <strong style="color:green">@TempData["Success"]</strong>
    }
    <strong style="color:red">@ViewBag.Error</strong>
</div>
<div class="row">
    <div class="col-xs-12">
        @using (Html.BeginForm("Update", "tblCamera", FormMethod.Post, new { encType = "multipart/form-data", @class = "form-horizontal", @role = "form" }))
        {
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            @Html.HiddenFor(n => n.CameraID)

            @Html.Hidden("page", pn)
            @Html.Hidden("key", (string)ViewBag.keyValue)
            @Html.Hidden("pc", (string)ViewBag.pcValue)
            @Html.Hidden("group", (string)ViewBag.groupValue)

            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right"> @Dictionary["CameraName"] </label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.CameraName, new { @class = "form-control", @placeholder = @Dictionary["CameraNamePlaceholder"] })
                    @Html.ValidationMessageFor(n => n.CameraName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right"> @Dictionary["PCID"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.DropDownListFor(n => n.PCID, new SelectList(ViewBag.PCs, "PCID", "ComputerName"), Dictionary["PCIDPlaceholder"], new { @class = "form-control chosen-select" })
                    @Html.ValidationMessageFor(n => n.PCID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["HttpURL"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.HttpURL, new { @class = "form-control", @placeholder = Dictionary["HttpURLPlaceholder"] })
                    @Html.ValidationMessageFor(n => n.HttpURL, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right"> @Dictionary["HttpPort"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.HttpPort, new { @class = "form-control", @placeholder = @Dictionary["HttpPortPlaceholder"] })
                    @Html.ValidationMessageFor(n => n.HttpPort, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["RtspPort"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.RtspPort, new { @class = "form-control", @placeholder = @Dictionary["RtspPortPlaceholder"] })
                    @Html.ValidationMessageFor(n => n.RtspPort, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right"> @Dictionary["UserName"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.UserName, new { @class = "form-control", @placeholder = @Dictionary["UserNamePlaceholder"]})
                    @Html.ValidationMessageFor(n => n.UserName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["Password"] Mật khẩu</label>
                <div class="col-sm-4 col-xs-12">
                    @{
                        var _pass = "";
                        if (!string.IsNullOrWhiteSpace(Model.Password))
                        {
                            _pass = Kztek.Web.Core.Helpers.CryptorEngine.Decrypt(Model.Password, true);
                        }
                    }
                    @Html.TextBoxFor(n => n.Password, new { @class = "form-control", @type = "password", @Value = _pass })
                </div>
            </div>

            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["Channel"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.Channel)
                    @Html.ValidationMessageFor(n => n.Channel, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["CameraType"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.DropDownListFor(n => n.CameraType, new SelectList(ViewBag.CameraType, "ItemValue", "ItemText"), new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["StreamType"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.DropDownListFor(n => n.StreamType, new SelectList(ViewBag.StreamType, "ItemValue", "ItemText"), new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["Resolution"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.Resolution, new { @class = "form-control", @placeholder = "Độ phân giải" })
                    @Html.ValidationMessageFor(n => n.Resolution, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["FrameRate"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.TextBoxFor(n => n.FrameRate)
                    @Html.ValidationMessageFor(n => n.FrameRate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["SDK"]</label>
                <div class="col-sm-4 col-xs-12">
                    @Html.DropDownListFor(n => n.SDK, new SelectList(ViewBag.SDK, "ItemValue", "ItemText"), new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["EnableRecording"]</label>
                <div class="col-sm-8">
                    <label class="line-height-250">
                        @Html.CheckBoxFor(n => n.EnableRecording, new { @class = "ace" })
                        <span class="lbl"></span>
                    </label>
                </div>
            </div>
            @*<div class="form-group">
                    <label class="col-sm-4 control-label no-padding-right"> STT </label>
                    <div class="col-sm-2 col-xs-12">
                        @Html.TextBoxFor(n => n.SortOrder, new { @class = "form-control", @placeholder = "STT" })
                        @Html.ValidationMessageFor(n => n.SortOrder, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="form-group">
                <label class="col-sm-4 control-label no-padding-right">@Dictionary["Inactive"]</label>
                <div class="col-sm-8">
                    <label class="line-height-250">
                        @Html.CheckBoxFor(n => n.Inactive, new { @class = "ace" })
                        <span class="lbl"></span>
                    </label>
                </div>
            </div>

            <div class="ace-settings-container" id="ace-settings-container" style="position: fixed; top: 155px;">
                <div class="btn btn-app btn-xs btn-grey ace-settings-btn open" id="ace-settings-btn">
                    <i class="ace-icon fa fa-cog bigger-130"></i>
                </div>

                <div class="ace-settings-box clearfix open" id="ace-settings-box">
                    <!-- /.pull-left -->
                    <div class="bg-rightbox">
                        <div class="clearfix lineButton">
                            <div class="col-md-12 input-group">
                                <button class="btn btn-success" type="submit" id="Countinue">
                                    <i class="ace-icon fa fa-refresh bigger-110"></i>
                                    @DictionaryAction["Save"]
                                </button>
                                <button class="btn" type="reset">
                                    <i class="ace-icon fa fa-undo bigger-110"></i>
                                    @DictionaryAction["Refresh"]
                                </button>
                                <a href="@Url.Action("Index", new { group = ViewBag.groupValue, key = ViewBag.keyValue, pc = ViewBag.pcValue, selectedId = Model.CameraID.ToString(), page = pn })" class="btn btn-yellow">
                                    <i class="ace-icon fa fa-chevron-circle-left bigger-110"></i>
                                    @DictionaryAction["BackToList"]
                                </a>
                            </div>
                        </div>
                    </div>
                    <!-- /.pull-left -->
                </div><!-- /.ace-settings-box -->
            </div>
        }
    </div>
</div>

@section scripts{
    <script>
        $(document).ready(function () {
            $('#Channel').ace_spinner({ min: 0, max: 100, step: 1, btn_up_class: 'btn-info', btn_down_class: 'btn-info' })
                .closest('.ace-spinner')
                .on('changed.fu.spinbox', function () {z
                    //console.log($('#spinner1').val())
                });
            $('#Framerate').ace_spinner({ min: 5, max: 20, step: 5, btn_up_class: 'btn-info', btn_down_class: 'btn-info' })
                .closest('.ace-spinner')
                .on('changed.fu.spinbox', function () {
                    //console.log($('#spinner1').val())
                });

            $("#CameraType").val('@Model.CameraType');
            $("#StreamType").val('@Model.StreamType');
            $("#SDK").val('@Model.SDK');

            $("#Resolution").autocomplete({
                source: []
            });

            $("#Resolution").keyup(function () {
                var key = $(this).val();

                $.ajax({
                    url: _prefixParkingDomain + '/tblCamera/GetResolution',
                    data: { key: key },
                    type: 'json',
                    async: true,
                    success: function (data) {
                        $("#Resolution").autocomplete({
                            source: data
                        });
                    }
                });
            });
        });
    </script>
}